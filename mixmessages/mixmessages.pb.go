// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message asking if server is online
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// The request message asking server to add their time
type TimePing struct {
	Times                []int64  `protobuf:"varint,1,rep,packed,name=Times,proto3" json:"Times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimePing) Reset()         { *m = TimePing{} }
func (m *TimePing) String() string { return proto.CompactTextString(m) }
func (*TimePing) ProtoMessage()    {}
func (*TimePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *TimePing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePing.Unmarshal(m, b)
}
func (m *TimePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePing.Marshal(b, m, deterministic)
}
func (m *TimePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePing.Merge(m, src)
}
func (m *TimePing) XXX_Size() int {
	return xxx_messageInfo_TimePing.Size(m)
}
func (m *TimePing) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePing.DiscardUnknown(m)
}

var xxx_messageInfo_TimePing proto.InternalMessageInfo

func (m *TimePing) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

// The message containing the server metrics from all visited nodes
type ServerMetrics struct {
	MemUsage             []uint32 `protobuf:"varint,1,rep,packed,name=MemUsage,proto3" json:"MemUsage,omitempty"`
	ThreadUsage          []uint32 `protobuf:"varint,2,rep,packed,name=ThreadUsage,proto3" json:"ThreadUsage,omitempty"`
	CpuUsage             []uint32 `protobuf:"varint,3,rep,packed,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`
	UpSince              []int64  `protobuf:"varint,4,rep,packed,name=UpSince,proto3" json:"UpSince,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMetrics) Reset()         { *m = ServerMetrics{} }
func (m *ServerMetrics) String() string { return proto.CompactTextString(m) }
func (*ServerMetrics) ProtoMessage()    {}
func (*ServerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *ServerMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMetrics.Unmarshal(m, b)
}
func (m *ServerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMetrics.Marshal(b, m, deterministic)
}
func (m *ServerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetrics.Merge(m, src)
}
func (m *ServerMetrics) XXX_Size() int {
	return xxx_messageInfo_ServerMetrics.Size(m)
}
func (m *ServerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetrics proto.InternalMessageInfo

func (m *ServerMetrics) GetMemUsage() []uint32 {
	if m != nil {
		return m.MemUsage
	}
	return nil
}

func (m *ServerMetrics) GetThreadUsage() []uint32 {
	if m != nil {
		return m.ThreadUsage
	}
	return nil
}

func (m *ServerMetrics) GetCpuUsage() []uint32 {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *ServerMetrics) GetUpSince() []int64 {
	if m != nil {
		return m.UpSince
	}
	return nil
}

// The message for Init Round
type RoundInfo struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (m *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(m, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

// ClientRequest message for clients to poll new CMIX messages
type ClientRequest struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LastMessageID        string   `protobuf:"bytes,2,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientRequest) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *IDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDList.Unmarshal(m, b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return xxx_messageInfo_IDList.Size(m)
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func (m *IDList) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Input messages are a list of messages run as a batch
type CmixInput struct {
	Messages             []*CmixBatch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CmixInput) Reset()         { *m = CmixInput{} }
func (m *CmixInput) String() string { return proto.CompactTextString(m) }
func (*CmixInput) ProtoMessage()    {}
func (*CmixInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *CmixInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixInput.Unmarshal(m, b)
}
func (m *CmixInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixInput.Marshal(b, m, deterministic)
}
func (m *CmixInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixInput.Merge(m, src)
}
func (m *CmixInput) XXX_Size() int {
	return xxx_messageInfo_CmixInput.Size(m)
}
func (m *CmixInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixInput.DiscardUnknown(m)
}

var xxx_messageInfo_CmixInput proto.InternalMessageInfo

func (m *CmixInput) GetMessages() []*CmixBatch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Output messages are a list of messages run as a batch
type CmixOutput struct {
	Messages             []*CmixBatch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CmixOutput) Reset()         { *m = CmixOutput{} }
func (m *CmixOutput) String() string { return proto.CompactTextString(m) }
func (*CmixOutput) ProtoMessage()    {}
func (*CmixOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *CmixOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixOutput.Unmarshal(m, b)
}
func (m *CmixOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixOutput.Marshal(b, m, deterministic)
}
func (m *CmixOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixOutput.Merge(m, src)
}
func (m *CmixOutput) XXX_Size() int {
	return xxx_messageInfo_CmixOutput.Size(m)
}
func (m *CmixOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CmixOutput proto.InternalMessageInfo

func (m *CmixOutput) GetMessages() []*CmixBatch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// DSAPublicKey is a public key for the digital signature algorithm
type DSAPublicKey struct {
	Y                    []byte   `protobuf:"bytes,1,opt,name=Y,proto3" json:"Y,omitempty"`
	P                    []byte   `protobuf:"bytes,2,opt,name=P,proto3" json:"P,omitempty"`
	Q                    []byte   `protobuf:"bytes,3,opt,name=Q,proto3" json:"Q,omitempty"`
	G                    []byte   `protobuf:"bytes,4,opt,name=G,proto3" json:"G,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSAPublicKey) Reset()         { *m = DSAPublicKey{} }
func (m *DSAPublicKey) String() string { return proto.CompactTextString(m) }
func (*DSAPublicKey) ProtoMessage()    {}
func (*DSAPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *DSAPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSAPublicKey.Unmarshal(m, b)
}
func (m *DSAPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSAPublicKey.Marshal(b, m, deterministic)
}
func (m *DSAPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSAPublicKey.Merge(m, src)
}
func (m *DSAPublicKey) XXX_Size() int {
	return xxx_messageInfo_DSAPublicKey.Size(m)
}
func (m *DSAPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DSAPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_DSAPublicKey proto.InternalMessageInfo

func (m *DSAPublicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *DSAPublicKey) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *DSAPublicKey) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *DSAPublicKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

// DSASignature is a digital signature for the digital signature algorithm
type DSASignature struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSASignature) Reset()         { *m = DSASignature{} }
func (m *DSASignature) String() string { return proto.CompactTextString(m) }
func (*DSASignature) ProtoMessage()    {}
func (*DSASignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *DSASignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSASignature.Unmarshal(m, b)
}
func (m *DSASignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSASignature.Marshal(b, m, deterministic)
}
func (m *DSASignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSASignature.Merge(m, src)
}
func (m *DSASignature) XXX_Size() int {
	return xxx_messageInfo_DSASignature.Size(m)
}
func (m *DSASignature) XXX_DiscardUnknown() {
	xxx_messageInfo_DSASignature.DiscardUnknown(m)
}

var xxx_messageInfo_DSASignature proto.InternalMessageInfo

func (m *DSASignature) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *DSASignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *DSASignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// UserRegistration message to initialize registration process
type UserRegistration struct {
	RegistrationCode     string        `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,proto3" json:"Client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistration) Reset()         { *m = UserRegistration{} }
func (m *UserRegistration) String() string { return proto.CompactTextString(m) }
func (*UserRegistration) ProtoMessage()    {}
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *UserRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistration.Unmarshal(m, b)
}
func (m *UserRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistration.Marshal(b, m, deterministic)
}
func (m *UserRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistration.Merge(m, src)
}
func (m *UserRegistration) XXX_Size() int {
	return xxx_messageInfo_UserRegistration.Size(m)
}
func (m *UserRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistration proto.InternalMessageInfo

func (m *UserRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *UserRegistration) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

// UserRegistrationConfirmation to confirm registration with users
type UserRegistrationConfirmation struct {
	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistrationConfirmation) Reset()         { *m = UserRegistrationConfirmation{} }
func (m *UserRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*UserRegistrationConfirmation) ProtoMessage()    {}
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *UserRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistrationConfirmation.Unmarshal(m, b)
}
func (m *UserRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *UserRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistrationConfirmation.Merge(m, src)
}
func (m *UserRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_UserRegistrationConfirmation.Size(m)
}
func (m *UserRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistrationConfirmation proto.InternalMessageInfo

func (m *UserRegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *UserRegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Client -> Gateway -> Server message to request nonce
type NonceRequest struct {
	Salt                 []byte        `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,proto3" json:"Client,omitempty"`
	ClientSignedByServer *DSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NonceRequest) Reset()         { *m = NonceRequest{} }
func (m *NonceRequest) String() string { return proto.CompactTextString(m) }
func (*NonceRequest) ProtoMessage()    {}
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *NonceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NonceRequest.Unmarshal(m, b)
}
func (m *NonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NonceRequest.Marshal(b, m, deterministic)
}
func (m *NonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceRequest.Merge(m, src)
}
func (m *NonceRequest) XXX_Size() int {
	return xxx_messageInfo_NonceRequest.Size(m)
}
func (m *NonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NonceRequest proto.InternalMessageInfo

func (m *NonceRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *NonceRequest) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *NonceRequest) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

// Server -> Gateway -> Client response to RequestNonceMessage
type Nonce struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Nonce) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Server -> Gateway -> Client response to ConfirmNonceMessage
type RegistrationConfirmation struct {
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Server               *DSAPublicKey `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
	Error                string        `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(m, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *RegistrationConfirmation) GetServer() *DSAPublicKey {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *RegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Generic Ack message containing an Error field
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CmixBatch struct {
	Round                *RoundInfo  `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	ForPhase             int32       `protobuf:"varint,2,opt,name=ForPhase,proto3" json:"ForPhase,omitempty"`
	Slots                []*CmixSlot `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CmixBatch) Reset()         { *m = CmixBatch{} }
func (m *CmixBatch) String() string { return proto.CompactTextString(m) }
func (*CmixBatch) ProtoMessage()    {}
func (*CmixBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *CmixBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixBatch.Unmarshal(m, b)
}
func (m *CmixBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixBatch.Marshal(b, m, deterministic)
}
func (m *CmixBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixBatch.Merge(m, src)
}
func (m *CmixBatch) XXX_Size() int {
	return xxx_messageInfo_CmixBatch.Size(m)
}
func (m *CmixBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CmixBatch proto.InternalMessageInfo

func (m *CmixBatch) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *CmixBatch) GetForPhase() int32 {
	if m != nil {
		return m.ForPhase
	}
	return 0
}

func (m *CmixBatch) GetSlots() []*CmixSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type CmixSlot struct {
	// Precomputation fields
	EncryptedMessageKeys            []byte `protobuf:"bytes,1,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedAssociatedDataKeys     []byte `protobuf:"bytes,2,opt,name=EncryptedAssociatedDataKeys,proto3" json:"EncryptedAssociatedDataKeys,omitempty"`
	PartialMessageCypherText        []byte `protobuf:"bytes,3,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte `protobuf:"bytes,4,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	PartialRoundPublicCypherKey     []byte `protobuf:"bytes,5,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,6,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	MessagePayload       []byte   `protobuf:"bytes,7,opt,name=MessagePayload,proto3" json:"MessagePayload,omitempty"`
	AssociatedData       []byte   `protobuf:"bytes,8,opt,name=AssociatedData,proto3" json:"AssociatedData,omitempty"`
	Salt                 []byte   `protobuf:"bytes,9,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,10,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmixSlot) Reset()         { *m = CmixSlot{} }
func (m *CmixSlot) String() string { return proto.CompactTextString(m) }
func (*CmixSlot) ProtoMessage()    {}
func (*CmixSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *CmixSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixSlot.Unmarshal(m, b)
}
func (m *CmixSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixSlot.Marshal(b, m, deterministic)
}
func (m *CmixSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixSlot.Merge(m, src)
}
func (m *CmixSlot) XXX_Size() int {
	return xxx_messageInfo_CmixSlot.Size(m)
}
func (m *CmixSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixSlot.DiscardUnknown(m)
}

var xxx_messageInfo_CmixSlot proto.InternalMessageInfo

func (m *CmixSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *CmixSlot) GetEncryptedAssociatedDataKeys() []byte {
	if m != nil {
		return m.EncryptedAssociatedDataKeys
	}
	return nil
}

func (m *CmixSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *CmixSlot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

func (m *CmixSlot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *CmixSlot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *CmixSlot) GetMessagePayload() []byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

func (m *CmixSlot) GetAssociatedData() []byte {
	if m != nil {
		return m.AssociatedData
	}
	return nil
}

func (m *CmixSlot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *CmixSlot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

func init() {
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*TimePing)(nil), "mixmessages.TimePing")
	proto.RegisterType((*ServerMetrics)(nil), "mixmessages.ServerMetrics")
	proto.RegisterType((*RoundInfo)(nil), "mixmessages.RoundInfo")
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*ClientRequest)(nil), "mixmessages.ClientRequest")
	proto.RegisterType((*IDList)(nil), "mixmessages.IDList")
	proto.RegisterType((*CmixInput)(nil), "mixmessages.CmixInput")
	proto.RegisterType((*CmixOutput)(nil), "mixmessages.CmixOutput")
	proto.RegisterType((*DSAPublicKey)(nil), "mixmessages.DSAPublicKey")
	proto.RegisterType((*DSASignature)(nil), "mixmessages.DSASignature")
	proto.RegisterType((*UserRegistration)(nil), "mixmessages.UserRegistration")
	proto.RegisterType((*UserRegistrationConfirmation)(nil), "mixmessages.UserRegistrationConfirmation")
	proto.RegisterType((*NonceRequest)(nil), "mixmessages.NonceRequest")
	proto.RegisterType((*Nonce)(nil), "mixmessages.Nonce")
	proto.RegisterType((*RegistrationConfirmation)(nil), "mixmessages.RegistrationConfirmation")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*CmixBatch)(nil), "mixmessages.CmixBatch")
	proto.RegisterType((*CmixSlot)(nil), "mixmessages.CmixSlot")
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5) }

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 1059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x4d, 0x49, 0xb1, 0xc6, 0x92, 0x6b, 0x6f, 0xdc, 0x94, 0x95, 0x53, 0x54, 0x20, 0xda,
	0xc2, 0xfd, 0x41, 0x80, 0x28, 0x40, 0x51, 0x24, 0x45, 0x13, 0x59, 0x4a, 0x14, 0xc1, 0x91, 0xa3,
	0x2c, 0xed, 0x83, 0x7b, 0x63, 0xa8, 0xb1, 0xb5, 0xb5, 0x44, 0x2a, 0xcb, 0x55, 0x62, 0xf5, 0xd8,
	0xbe, 0x4a, 0x81, 0xde, 0xfb, 0x3e, 0xed, 0xb3, 0x14, 0xfb, 0x43, 0x99, 0x94, 0x29, 0x05, 0x71,
	0x81, 0xde, 0x38, 0x33, 0xdf, 0xcc, 0xce, 0xff, 0x2e, 0x61, 0x67, 0xcc, 0x2e, 0xc7, 0x18, 0xc7,
	0xfe, 0x39, 0xc6, 0xf7, 0x26, 0x3c, 0x12, 0x11, 0xd9, 0x4c, 0xb1, 0xdc, 0x12, 0x14, 0xfa, 0x2c,
	0x3c, 0x77, 0xeb, 0xb0, 0x71, 0xcc, 0xc6, 0x28, 0xbf, 0xc9, 0x2e, 0x14, 0xe5, 0x77, 0xec, 0x58,
	0x75, 0x7b, 0xdf, 0xa6, 0x9a, 0x70, 0x7f, 0xb7, 0xa0, 0xea, 0x21, 0x7f, 0x8b, 0xbc, 0x87, 0x82,
	0xb3, 0x20, 0x26, 0x35, 0xd8, 0xe8, 0xe1, 0xf8, 0x44, 0x1a, 0x52, 0xd0, 0x2a, 0x9d, 0xd3, 0xa4,
	0x0e, 0x9b, 0xc7, 0x43, 0x8e, 0xfe, 0x40, 0x8b, 0xd7, 0x95, 0x38, 0xcd, 0x92, 0xda, 0xad, 0xc9,
	0x54, 0x8b, 0x6d, 0xad, 0x9d, 0xd0, 0xc4, 0x81, 0x5b, 0x27, 0x13, 0x8f, 0x85, 0x01, 0x3a, 0x05,
	0xe5, 0x43, 0x42, 0xba, 0x7b, 0x50, 0xa6, 0xd1, 0x34, 0x1c, 0x74, 0xc3, 0xb3, 0x88, 0x6c, 0xc1,
	0x7a, 0xb7, 0xed, 0x58, 0x75, 0x6b, 0xbf, 0x40, 0xd7, 0xbb, 0x6d, 0xf7, 0x11, 0x7c, 0xa4, 0x84,
	0x07, 0xd3, 0xb3, 0x33, 0xe4, 0x0a, 0xb2, 0x9f, 0x61, 0x79, 0xec, 0x57, 0x54, 0xf8, 0x2a, 0x5d,
	0x64, 0xbb, 0x3d, 0xa8, 0xb6, 0x46, 0x0c, 0x43, 0x41, 0xf1, 0xcd, 0x14, 0x63, 0x41, 0xee, 0x40,
	0xe9, 0x24, 0x46, 0x6e, 0x4e, 0xa8, 0x50, 0x43, 0x91, 0x2f, 0xa0, 0xfa, 0xc2, 0x8f, 0x45, 0x4f,
	0xa7, 0xb0, 0xdb, 0x76, 0xd6, 0xeb, 0xd6, 0x7e, 0x99, 0x66, 0x99, 0x6e, 0x0d, 0x4a, 0xdd, 0xf6,
	0x0b, 0x16, 0x0b, 0xb2, 0x0d, 0x76, 0xb7, 0xad, 0x93, 0x59, 0xa6, 0xf2, 0xd3, 0x7d, 0x0c, 0xe5,
	0xd6, 0x98, 0x5d, 0x76, 0xc3, 0xc9, 0x54, 0x90, 0x86, 0xcc, 0xa2, 0xae, 0x86, 0xc2, 0x6c, 0x36,
	0xee, 0xdc, 0x4b, 0x17, 0x4d, 0x22, 0x0f, 0x7c, 0x11, 0x0c, 0xe9, 0x1c, 0xe7, 0x3e, 0x01, 0x90,
	0xec, 0x97, 0x53, 0x71, 0x53, 0x0b, 0xcf, 0xa0, 0xd2, 0xf6, 0x9a, 0xfd, 0xe9, 0xeb, 0x11, 0x0b,
	0x0e, 0x71, 0x46, 0x2a, 0x60, 0x9d, 0x9a, 0x38, 0xad, 0x53, 0x49, 0xf5, 0x55, 0x58, 0x15, 0x6a,
	0xf5, 0x25, 0xf5, 0xca, 0xb1, 0x35, 0xf5, 0x4a, 0x52, 0x1d, 0xa7, 0xa0, 0xa9, 0x8e, 0xfb, 0x93,
	0xb2, 0xe3, 0xb1, 0xf3, 0xd0, 0x17, 0x53, 0x8e, 0x84, 0x40, 0xe1, 0xb9, 0x1f, 0x0f, 0x8d, 0x29,
	0xf5, 0x2d, 0x35, 0x68, 0x62, 0x8d, 0x4a, 0xca, 0x4b, 0xac, 0x79, 0xee, 0x1b, 0xd8, 0x96, 0x69,
	0xa5, 0x78, 0xce, 0x62, 0xc1, 0x7d, 0xc1, 0xa2, 0x90, 0x7c, 0x03, 0xdb, 0x69, 0xba, 0x15, 0x0d,
	0x74, 0xd1, 0xca, 0xf4, 0x1a, 0x9f, 0xdc, 0x87, 0x92, 0xae, 0x9a, 0x3a, 0x60, 0xb3, 0xf1, 0x69,
	0x26, 0xf2, 0x74, 0x88, 0xd4, 0x00, 0x65, 0x23, 0xdf, 0x5d, 0x3c, 0xb3, 0x15, 0x85, 0x67, 0x8c,
	0x8f, 0xf5, 0xf9, 0x3d, 0xd8, 0xd5, 0x50, 0x19, 0x16, 0x0e, 0x0e, 0x66, 0xba, 0xed, 0x95, 0x0f,
	0x39, 0x27, 0xcc, 0x83, 0xa7, 0xb9, 0x6a, 0x72, 0x9c, 0x9e, 0x72, 0x1e, 0x71, 0xd3, 0x27, 0x9a,
	0x70, 0xff, 0xb0, 0xa0, 0x72, 0x14, 0x85, 0x01, 0x26, 0xed, 0x46, 0xa0, 0xe0, 0xf9, 0x23, 0x91,
	0x64, 0x4e, 0x7e, 0xdf, 0x20, 0xba, 0xa5, 0xce, 0xdb, 0x37, 0x72, 0xde, 0x7d, 0x00, 0x45, 0xe5,
	0xa5, 0x8c, 0x42, 0x7d, 0x18, 0xff, 0xae, 0xb8, 0x39, 0xb1, 0xfd, 0x65, 0x81, 0xf3, 0x7f, 0x65,
	0xf7, 0x3e, 0x94, 0x8c, 0x81, 0xf7, 0xa7, 0x68, 0xb1, 0x20, 0x76, 0xda, 0xe9, 0x3d, 0xb0, 0x9b,
	0xc1, 0xc5, 0x95, 0xd0, 0x4a, 0x0b, 0x7f, 0xb3, 0xf4, 0xc8, 0xaa, 0x31, 0x22, 0xdf, 0x41, 0x51,
	0x6d, 0x0f, 0xe3, 0x73, 0x76, 0xda, 0xe6, 0xeb, 0x89, 0x6a, 0x90, 0x5c, 0x74, 0xcf, 0x22, 0xde,
	0x1f, 0xfa, 0x31, 0x2a, 0x1f, 0x8b, 0x74, 0x4e, 0x93, 0x6f, 0xa1, 0x18, 0x8f, 0x22, 0x11, 0xab,
	0x0d, 0xb8, 0xd9, 0xf8, 0xf8, 0xda, 0xdc, 0x7a, 0xa3, 0x48, 0x50, 0x8d, 0x71, 0xff, 0xb1, 0x61,
	0x23, 0xe1, 0x91, 0x06, 0xec, 0x3e, 0x0d, 0x03, 0x3e, 0x9b, 0x08, 0x1c, 0x98, 0xa9, 0x3e, 0xc4,
	0x59, 0x6c, 0xca, 0x93, 0x2b, 0x23, 0x4f, 0x60, 0x6f, 0xce, 0x6f, 0xc6, 0x71, 0x14, 0x30, 0x5f,
	0xe0, 0xa0, 0xed, 0x0b, 0x5f, 0xa9, 0xea, 0x11, 0x5d, 0x05, 0x21, 0x0f, 0xc1, 0xe9, 0xfb, 0x5c,
	0x30, 0x7f, 0x64, 0xec, 0xb6, 0x66, 0x93, 0x21, 0xf2, 0x63, 0xbc, 0x14, 0x66, 0xa6, 0x97, 0xca,
	0xc9, 0x73, 0xf8, 0xdc, 0xc8, 0xb2, 0x86, 0x53, 0x26, 0xf4, 0x5a, 0x79, 0x1f, 0x4c, 0xc6, 0x61,
	0x20, 0x2a, 0xc3, 0xba, 0xc2, 0x5a, 0x7e, 0x88, 0x33, 0xa7, 0xa8, 0xe3, 0x58, 0x01, 0x91, 0x35,
	0xf1, 0x30, 0x1c, 0xa8, 0xed, 0x5e, 0x52, 0xf0, 0x39, 0x4d, 0xbe, 0x82, 0x2d, 0xe3, 0x7c, 0xdf,
	0x9f, 0x8d, 0x22, 0x7f, 0xe0, 0xdc, 0x52, 0x88, 0x05, 0xae, 0xc4, 0x65, 0x3d, 0x74, 0x36, 0x34,
	0x2e, 0xcb, 0x9d, 0x0f, 0x76, 0x39, 0x35, 0xd8, 0xbb, 0x50, 0x3c, 0xec, 0x35, 0x5b, 0xb1, 0x03,
	0x75, 0x5b, 0x4e, 0x93, 0x22, 0x1a, 0x7f, 0x17, 0xe0, 0x56, 0x8f, 0x5d, 0x1e, 0xc9, 0xc5, 0xd6,
	0x80, 0x72, 0x33, 0xbe, 0x78, 0x19, 0x8e, 0x58, 0x88, 0x64, 0x27, 0xd3, 0x17, 0xf2, 0x92, 0xae,
	0x6d, 0x67, 0x58, 0xcd, 0xe0, 0xc2, 0x5d, 0x23, 0x0f, 0xa1, 0xaa, 0xa2, 0x15, 0x9c, 0x4d, 0xd4,
	0x4d, 0x9e, 0xed, 0xa7, 0xe4, 0x82, 0xcf, 0xd5, 0x3d, 0x80, 0xed, 0x0e, 0x8a, 0x85, 0x0b, 0x3e,
	0x83, 0xcb, 0xc8, 0x72, 0x6d, 0xfc, 0x08, 0x5b, 0x2d, 0x8e, 0xbe, 0xc0, 0x23, 0x7c, 0xa7, 0x7b,
	0x7f, 0xc9, 0x45, 0x94, 0xab, 0xfd, 0x03, 0x80, 0x27, 0x7c, 0x2e, 0x96, 0x69, 0xaa, 0xeb, 0x32,
	0x57, 0xf3, 0x7b, 0xd8, 0xa0, 0xd3, 0x50, 0x4f, 0xd4, 0x87, 0x9c, 0x48, 0x81, 0x74, 0x50, 0x2c,
	0x3e, 0x19, 0xee, 0x5e, 0x1f, 0xe7, 0x2b, 0x69, 0x6d, 0xa5, 0xd4, 0x5d, 0x23, 0x8f, 0xa1, 0x62,
	0x36, 0xba, 0xde, 0x90, 0xd9, 0x7d, 0x94, 0xde, 0xf8, 0x35, 0x72, 0x5d, 0xe4, 0xae, 0x91, 0x53,
	0xb8, 0x6d, 0xf6, 0x65, 0xe6, 0x52, 0x5c, 0xbe, 0x18, 0x6b, 0x5f, 0x66, 0x5d, 0x5a, 0xb2, 0x78,
	0xdd, 0xb5, 0xc6, 0x9f, 0x36, 0xec, 0xf4, 0xd8, 0xa5, 0xe9, 0xe3, 0x8e, 0x2f, 0xf0, 0x9d, 0x3f,
	0x23, 0x07, 0x50, 0x6d, 0x0d, 0x31, 0xb8, 0x48, 0xde, 0x06, 0x0b, 0x65, 0xcf, 0x3c, 0x8a, 0x6a,
	0xb7, 0x33, 0x32, 0xfd, 0xc2, 0x51, 0xdd, 0x03, 0x1d, 0x4c, 0x5e, 0x3f, 0x2b, 0x0d, 0x2c, 0xa9,
	0x8f, 0xae, 0x7f, 0x7f, 0x3a, 0xb7, 0xf1, 0x21, 0x75, 0x7c, 0x24, 0x73, 0x1e, 0x20, 0x7b, 0x8b,
	0x7a, 0x3f, 0x7f, 0x72, 0x4d, 0x57, 0xbf, 0x94, 0x72, 0x95, 0xff, 0x73, 0xc1, 0x28, 0x54, 0x4c,
	0x9e, 0xf3, 0x0c, 0xdc, 0xac, 0x52, 0xbf, 0x48, 0xa7, 0x52, 0xd5, 0xff, 0x39, 0xa1, 0x91, 0xcb,
	0xa7, 0x0b, 0xf9, 0x2c, 0x63, 0x68, 0xf1, 0x35, 0x53, 0xfb, 0x7a, 0xa5, 0x38, 0x7b, 0xd6, 0xeb,
	0x92, 0xfa, 0x2d, 0x78, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x39, 0x11, 0x7e, 0x2b,
	0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MixNodeClient is the client API for MixNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixNodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error)
	// GetServerMetrics returns server metrics
	GetServerMetrics(ctx context.Context, in *ServerMetrics, opts ...grpc.CallOption) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// StartRound begins a round with these messages (if len(msgs) == batch size)
	StartRound(ctx context.Context, in *CmixInput, opts ...grpc.CallOption) (*Ack, error)
	// RunPhase a cMix phase on another node
	RunPhase(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type mixNodeClient struct {
	cc *grpc.ClientConn
}

func NewMixNodeClient(cc *grpc.ClientConn) MixNodeClient {
	return &mixNodeClient{cc}
}

func (c *mixNodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/RoundtripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) GetServerMetrics(ctx context.Context, in *ServerMetrics, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/GetServerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) CreateNewRound(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) StartRound(ctx context.Context, in *CmixInput, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) RunPhase(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/RunPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixNodeClient) ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.MixNode/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixNodeServer is the server API for MixNode service.
type MixNodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(context.Context, *TimePing) (*Ack, error)
	// GetServerMetrics returns server metrics
	GetServerMetrics(context.Context, *ServerMetrics) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *CmixBatch) (*Ack, error)
	// StartRound begins a round with these messages (if len(msgs) == batch size)
	StartRound(context.Context, *CmixInput) (*Ack, error)
	// RunPhase a cMix phase on another node
	RunPhase(context.Context, *CmixBatch) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *RoundBufferInfo) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *DSASignature) (*RegistrationConfirmation, error)
}

func RegisterMixNodeServer(s *grpc.Server, srv MixNodeServer) {
	s.RegisterService(&_MixNode_serviceDesc, srv)
}

func _MixNode_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_RoundtripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).RoundtripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/RoundtripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).RoundtripPing(ctx, req.(*TimePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_GetServerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).GetServerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/GetServerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).GetServerMetrics(ctx, req.(*ServerMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).CreateNewRound(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).StartRound(ctx, req.(*CmixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_RunPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).RunPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/RunPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).RunPhase(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBufferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).GetRoundBufferInfo(ctx, req.(*RoundBufferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixNode_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixNodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixNode/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixNodeServer).ConfirmRegistration(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixNode",
	HandlerType: (*MixNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _MixNode_AskOnline_Handler,
		},
		{
			MethodName: "RoundtripPing",
			Handler:    _MixNode_RoundtripPing_Handler,
		},
		{
			MethodName: "GetServerMetrics",
			Handler:    _MixNode_GetServerMetrics_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _MixNode_CreateNewRound_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _MixNode_StartRound_Handler,
		},
		{
			MethodName: "RunPhase",
			Handler:    _MixNode_RunPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _MixNode_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _MixNode_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _MixNode_ConfirmRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// MixMessageGatewayClient is the client API for MixMessageGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixMessageGatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error)
	// GetMessage a CmixBatch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*CmixBatch, error)
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// ReceiveBatch of messages from the server
	ReceiveBatch(ctx context.Context, in *CmixOutput, opts ...grpc.CallOption) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type mixMessageGatewayClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageGatewayClient(cc *grpc.ClientConn) MixMessageGatewayClient {
	return &mixMessageGatewayClient{cc}
}

func (c *mixMessageGatewayClient) CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*CmixBatch, error) {
	out := new(CmixBatch)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) PutMessage(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) ReceiveBatch(ctx context.Context, in *CmixOutput, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/ReceiveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixMessageGatewayServer is the server API for MixMessageGateway service.
type MixMessageGatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientRequest) (*IDList, error)
	// GetMessage a CmixBatch from the gateway for the given message information
	GetMessage(context.Context, *ClientRequest) (*CmixBatch, error)
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *CmixBatch) (*Ack, error)
	// ReceiveBatch of messages from the server
	ReceiveBatch(context.Context, *CmixOutput) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *DSASignature) (*RegistrationConfirmation, error)
}

func RegisterMixMessageGatewayServer(s *grpc.Server, srv MixMessageGatewayServer) {
	s.RegisterService(&_MixMessageGateway_serviceDesc, srv)
}

func _MixMessageGateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_ReceiveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/ReceiveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, req.(*CmixOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).ConfirmNonce(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageGateway",
	HandlerType: (*MixMessageGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _MixMessageGateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MixMessageGateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _MixMessageGateway_PutMessage_Handler,
		},
		{
			MethodName: "ReceiveBatch",
			Handler:    _MixMessageGateway_ReceiveBatch_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _MixMessageGateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _MixMessageGateway_ConfirmNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client & RegistrationServer Communication
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client & RegistrationServer Communication
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
