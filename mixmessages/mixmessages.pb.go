// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message asking if server is online
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// The request message asking server to add their time
type TimePing struct {
	Times                []int64  `protobuf:"varint,1,rep,packed,name=Times,proto3" json:"Times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimePing) Reset()         { *m = TimePing{} }
func (m *TimePing) String() string { return proto.CompactTextString(m) }
func (*TimePing) ProtoMessage()    {}
func (*TimePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *TimePing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePing.Unmarshal(m, b)
}
func (m *TimePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePing.Marshal(b, m, deterministic)
}
func (m *TimePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePing.Merge(m, src)
}
func (m *TimePing) XXX_Size() int {
	return xxx_messageInfo_TimePing.Size(m)
}
func (m *TimePing) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePing.DiscardUnknown(m)
}

var xxx_messageInfo_TimePing proto.InternalMessageInfo

func (m *TimePing) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

// The message containing the server metrics from all visited nodes
type ServerMetricsMessage struct {
	MemUsage             []uint32 `protobuf:"varint,1,rep,packed,name=MemUsage,proto3" json:"MemUsage,omitempty"`
	ThreadUsage          []uint32 `protobuf:"varint,2,rep,packed,name=ThreadUsage,proto3" json:"ThreadUsage,omitempty"`
	CpuUsage             []uint32 `protobuf:"varint,3,rep,packed,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`
	UpSince              []int64  `protobuf:"varint,4,rep,packed,name=UpSince,proto3" json:"UpSince,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMetricsMessage) Reset()         { *m = ServerMetricsMessage{} }
func (m *ServerMetricsMessage) String() string { return proto.CompactTextString(m) }
func (*ServerMetricsMessage) ProtoMessage()    {}
func (*ServerMetricsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *ServerMetricsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMetricsMessage.Unmarshal(m, b)
}
func (m *ServerMetricsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMetricsMessage.Marshal(b, m, deterministic)
}
func (m *ServerMetricsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetricsMessage.Merge(m, src)
}
func (m *ServerMetricsMessage) XXX_Size() int {
	return xxx_messageInfo_ServerMetricsMessage.Size(m)
}
func (m *ServerMetricsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetricsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetricsMessage proto.InternalMessageInfo

func (m *ServerMetricsMessage) GetMemUsage() []uint32 {
	if m != nil {
		return m.MemUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetThreadUsage() []uint32 {
	if m != nil {
		return m.ThreadUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetCpuUsage() []uint32 {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetUpSince() []int64 {
	if m != nil {
		return m.UpSince
	}
	return nil
}

// The message for Init Round
type InitRound struct {
	RoundID              string   `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitRound) Reset()         { *m = InitRound{} }
func (m *InitRound) String() string { return proto.CompactTextString(m) }
func (*InitRound) ProtoMessage()    {}
func (*InitRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *InitRound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitRound.Unmarshal(m, b)
}
func (m *InitRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitRound.Marshal(b, m, deterministic)
}
func (m *InitRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRound.Merge(m, src)
}
func (m *InitRound) XXX_Size() int {
	return xxx_messageInfo_InitRound.Size(m)
}
func (m *InitRound) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRound.DiscardUnknown(m)
}

var xxx_messageInfo_InitRound proto.InternalMessageInfo

func (m *InitRound) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

// The message for clients to poll new CMIX messages
type ClientPollMessage struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MessageID            string   `protobuf:"bytes,2,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientPollMessage) Reset()         { *m = ClientPollMessage{} }
func (m *ClientPollMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPollMessage) ProtoMessage()    {}
func (*ClientPollMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *ClientPollMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientPollMessage.Unmarshal(m, b)
}
func (m *ClientPollMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientPollMessage.Marshal(b, m, deterministic)
}
func (m *ClientPollMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPollMessage.Merge(m, src)
}
func (m *ClientPollMessage) XXX_Size() int {
	return xxx_messageInfo_ClientPollMessage.Size(m)
}
func (m *ClientPollMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPollMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPollMessage proto.InternalMessageInfo

func (m *ClientPollMessage) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientPollMessage) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type ClientMessages struct {
	MessageIDs           []string `protobuf:"bytes,1,rep,name=MessageIDs,proto3" json:"MessageIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessages) Reset()         { *m = ClientMessages{} }
func (m *ClientMessages) String() string { return proto.CompactTextString(m) }
func (*ClientMessages) ProtoMessage()    {}
func (*ClientMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *ClientMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessages.Unmarshal(m, b)
}
func (m *ClientMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessages.Marshal(b, m, deterministic)
}
func (m *ClientMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessages.Merge(m, src)
}
func (m *ClientMessages) XXX_Size() int {
	return xxx_messageInfo_ClientMessages.Size(m)
}
func (m *ClientMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessages proto.InternalMessageInfo

func (m *ClientMessages) GetMessageIDs() []string {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// Message for setting public key
type PublicKeyMessage struct {
	RoundID              string   `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKeyMessage) Reset()         { *m = PublicKeyMessage{} }
func (m *PublicKeyMessage) String() string { return proto.CompactTextString(m) }
func (*PublicKeyMessage) ProtoMessage()    {}
func (*PublicKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *PublicKeyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKeyMessage.Unmarshal(m, b)
}
func (m *PublicKeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKeyMessage.Marshal(b, m, deterministic)
}
func (m *PublicKeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyMessage.Merge(m, src)
}
func (m *PublicKeyMessage) XXX_Size() int {
	return xxx_messageInfo_PublicKeyMessage.Size(m)
}
func (m *PublicKeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyMessage proto.InternalMessageInfo

func (m *PublicKeyMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PublicKeyMessage) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// Input messages are a list of messages run as a batch
type InputMessages struct {
	Messages             []*CmixMessage `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InputMessages) Reset()         { *m = InputMessages{} }
func (m *InputMessages) String() string { return proto.CompactTextString(m) }
func (*InputMessages) ProtoMessage()    {}
func (*InputMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *InputMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputMessages.Unmarshal(m, b)
}
func (m *InputMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputMessages.Marshal(b, m, deterministic)
}
func (m *InputMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputMessages.Merge(m, src)
}
func (m *InputMessages) XXX_Size() int {
	return xxx_messageInfo_InputMessages.Size(m)
}
func (m *InputMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_InputMessages.DiscardUnknown(m)
}

var xxx_messageInfo_InputMessages proto.InternalMessageInfo

func (m *InputMessages) GetMessages() []*CmixMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Output messages are a list of messages run as a batch
type OutputMessages struct {
	Messages             []*CmixMessage `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OutputMessages) Reset()         { *m = OutputMessages{} }
func (m *OutputMessages) String() string { return proto.CompactTextString(m) }
func (*OutputMessages) ProtoMessage()    {}
func (*OutputMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *OutputMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputMessages.Unmarshal(m, b)
}
func (m *OutputMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputMessages.Marshal(b, m, deterministic)
}
func (m *OutputMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputMessages.Merge(m, src)
}
func (m *OutputMessages) XXX_Size() int {
	return xxx_messageInfo_OutputMessages.Size(m)
}
func (m *OutputMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputMessages.DiscardUnknown(m)
}

var xxx_messageInfo_OutputMessages proto.InternalMessageInfo

func (m *OutputMessages) GetMessages() []*CmixMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Message sent to registration server to initialize registration process
type RegisterUserMessage struct {
	RegistrationCode     string   `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,4,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserMessage) Reset()         { *m = RegisterUserMessage{} }
func (m *RegisterUserMessage) String() string { return proto.CompactTextString(m) }
func (*RegisterUserMessage) ProtoMessage()    {}
func (*RegisterUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *RegisterUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterUserMessage.Unmarshal(m, b)
}
func (m *RegisterUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterUserMessage.Marshal(b, m, deterministic)
}
func (m *RegisterUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserMessage.Merge(m, src)
}
func (m *RegisterUserMessage) XXX_Size() int {
	return xxx_messageInfo_RegisterUserMessage.Size(m)
}
func (m *RegisterUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserMessage proto.InternalMessageInfo

func (m *RegisterUserMessage) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *RegisterUserMessage) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterUserMessage) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterUserMessage) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// Response from the registration server to RegisterUser messages
type ConfirmRegisterUserMessage struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	SignedPublicKey      []byte   `protobuf:"bytes,2,opt,name=SignedPublicKey,proto3" json:"SignedPublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmRegisterUserMessage) Reset()         { *m = ConfirmRegisterUserMessage{} }
func (m *ConfirmRegisterUserMessage) String() string { return proto.CompactTextString(m) }
func (*ConfirmRegisterUserMessage) ProtoMessage()    {}
func (*ConfirmRegisterUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *ConfirmRegisterUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Unmarshal(m, b)
}
func (m *ConfirmRegisterUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Marshal(b, m, deterministic)
}
func (m *ConfirmRegisterUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmRegisterUserMessage.Merge(m, src)
}
func (m *ConfirmRegisterUserMessage) XXX_Size() int {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Size(m)
}
func (m *ConfirmRegisterUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmRegisterUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmRegisterUserMessage proto.InternalMessageInfo

func (m *ConfirmRegisterUserMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ConfirmRegisterUserMessage) GetSignedPublicKey() []byte {
	if m != nil {
		return m.SignedPublicKey
	}
	return nil
}

// Generic Ack message containing an Error field
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// The standard CMIX message type
type CmixMessage struct {
	SenderID       []byte `protobuf:"bytes,1,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	MessagePayload []byte `protobuf:"bytes,2,opt,name=MessagePayload,proto3" json:"MessagePayload,omitempty"`
	// TODO When we increase the size of the prime, the payload and associated
	// data should become part of the
	AssociatedData       []byte   `protobuf:"bytes,3,opt,name=AssociatedData,proto3" json:"AssociatedData,omitempty"`
	Salt                 []byte   `protobuf:"bytes,4,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,5,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmixMessage) Reset()         { *m = CmixMessage{} }
func (m *CmixMessage) String() string { return proto.CompactTextString(m) }
func (*CmixMessage) ProtoMessage()    {}
func (*CmixMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *CmixMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixMessage.Unmarshal(m, b)
}
func (m *CmixMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixMessage.Marshal(b, m, deterministic)
}
func (m *CmixMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixMessage.Merge(m, src)
}
func (m *CmixMessage) XXX_Size() int {
	return xxx_messageInfo_CmixMessage.Size(m)
}
func (m *CmixMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CmixMessage proto.InternalMessageInfo

func (m *CmixMessage) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *CmixMessage) GetMessagePayload() []byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

func (m *CmixMessage) GetAssociatedData() []byte {
	if m != nil {
		return m.AssociatedData
	}
	return nil
}

func (m *CmixMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *CmixMessage) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

// Message for individual Precomp Decrypt Slot
type PrecompDecryptSlot struct {
	Slot                            uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	EncryptedMessageKeys            []byte   `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedAssociatedDataKeys     []byte   `protobuf:"bytes,3,opt,name=EncryptedAssociatedDataKeys,proto3" json:"EncryptedAssociatedDataKeys,omitempty"`
	PartialMessageCypherText        []byte   `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte   `protobuf:"bytes,5,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *PrecompDecryptSlot) Reset()         { *m = PrecompDecryptSlot{} }
func (m *PrecompDecryptSlot) String() string { return proto.CompactTextString(m) }
func (*PrecompDecryptSlot) ProtoMessage()    {}
func (*PrecompDecryptSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *PrecompDecryptSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompDecryptSlot.Unmarshal(m, b)
}
func (m *PrecompDecryptSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompDecryptSlot.Marshal(b, m, deterministic)
}
func (m *PrecompDecryptSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompDecryptSlot.Merge(m, src)
}
func (m *PrecompDecryptSlot) XXX_Size() int {
	return xxx_messageInfo_PrecompDecryptSlot.Size(m)
}
func (m *PrecompDecryptSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompDecryptSlot.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompDecryptSlot proto.InternalMessageInfo

func (m *PrecompDecryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompDecryptSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetEncryptedAssociatedDataKeys() []byte {
	if m != nil {
		return m.EncryptedAssociatedDataKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

// Message for batch of Precomp Decrypt Slots
type PrecompDecryptMessage struct {
	RoundID              string                `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32                 `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*PrecompDecryptSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrecompDecryptMessage) Reset()         { *m = PrecompDecryptMessage{} }
func (m *PrecompDecryptMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompDecryptMessage) ProtoMessage()    {}
func (*PrecompDecryptMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *PrecompDecryptMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompDecryptMessage.Unmarshal(m, b)
}
func (m *PrecompDecryptMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompDecryptMessage.Marshal(b, m, deterministic)
}
func (m *PrecompDecryptMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompDecryptMessage.Merge(m, src)
}
func (m *PrecompDecryptMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompDecryptMessage.Size(m)
}
func (m *PrecompDecryptMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompDecryptMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompDecryptMessage proto.InternalMessageInfo

func (m *PrecompDecryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompDecryptMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *PrecompDecryptMessage) GetSlots() []*PrecompDecryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Encrypt Slot
type PrecompEncryptSlot struct {
	Slot                     uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	EncryptedMessageKeys     []byte   `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	PartialMessageCypherText []byte   `protobuf:"bytes,3,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PrecompEncryptSlot) Reset()         { *m = PrecompEncryptSlot{} }
func (m *PrecompEncryptSlot) String() string { return proto.CompactTextString(m) }
func (*PrecompEncryptSlot) ProtoMessage()    {}
func (*PrecompEncryptSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *PrecompEncryptSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompEncryptSlot.Unmarshal(m, b)
}
func (m *PrecompEncryptSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompEncryptSlot.Marshal(b, m, deterministic)
}
func (m *PrecompEncryptSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompEncryptSlot.Merge(m, src)
}
func (m *PrecompEncryptSlot) XXX_Size() int {
	return xxx_messageInfo_PrecompEncryptSlot.Size(m)
}
func (m *PrecompEncryptSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompEncryptSlot.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompEncryptSlot proto.InternalMessageInfo

func (m *PrecompEncryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompEncryptSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompEncryptSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

// Message for batch of Precomp Encrypt Slots
type PrecompEncryptMessage struct {
	RoundID              string                `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32                 `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*PrecompEncryptSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrecompEncryptMessage) Reset()         { *m = PrecompEncryptMessage{} }
func (m *PrecompEncryptMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompEncryptMessage) ProtoMessage()    {}
func (*PrecompEncryptMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *PrecompEncryptMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompEncryptMessage.Unmarshal(m, b)
}
func (m *PrecompEncryptMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompEncryptMessage.Marshal(b, m, deterministic)
}
func (m *PrecompEncryptMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompEncryptMessage.Merge(m, src)
}
func (m *PrecompEncryptMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompEncryptMessage.Size(m)
}
func (m *PrecompEncryptMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompEncryptMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompEncryptMessage proto.InternalMessageInfo

func (m *PrecompEncryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompEncryptMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *PrecompEncryptMessage) GetSlots() []*PrecompEncryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Reveal Slot
type PrecompRevealSlot struct {
	Slot                            uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	PartialMessageCypherText        []byte   `protobuf:"bytes,2,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte   `protobuf:"bytes,3,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *PrecompRevealSlot) Reset()         { *m = PrecompRevealSlot{} }
func (m *PrecompRevealSlot) String() string { return proto.CompactTextString(m) }
func (*PrecompRevealSlot) ProtoMessage()    {}
func (*PrecompRevealSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *PrecompRevealSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompRevealSlot.Unmarshal(m, b)
}
func (m *PrecompRevealSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompRevealSlot.Marshal(b, m, deterministic)
}
func (m *PrecompRevealSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompRevealSlot.Merge(m, src)
}
func (m *PrecompRevealSlot) XXX_Size() int {
	return xxx_messageInfo_PrecompRevealSlot.Size(m)
}
func (m *PrecompRevealSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompRevealSlot.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompRevealSlot proto.InternalMessageInfo

func (m *PrecompRevealSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompRevealSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompRevealSlot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

// Message for batch of Precomp Reveal Slots
type PrecompRevealMessage struct {
	RoundID              string               `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32                `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*PrecompRevealSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PrecompRevealMessage) Reset()         { *m = PrecompRevealMessage{} }
func (m *PrecompRevealMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompRevealMessage) ProtoMessage()    {}
func (*PrecompRevealMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *PrecompRevealMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompRevealMessage.Unmarshal(m, b)
}
func (m *PrecompRevealMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompRevealMessage.Marshal(b, m, deterministic)
}
func (m *PrecompRevealMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompRevealMessage.Merge(m, src)
}
func (m *PrecompRevealMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompRevealMessage.Size(m)
}
func (m *PrecompRevealMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompRevealMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompRevealMessage proto.InternalMessageInfo

func (m *PrecompRevealMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompRevealMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *PrecompRevealMessage) GetSlots() []*PrecompRevealSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Permute Slot
type PrecompPermuteSlot struct {
	Slot                            uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	EncryptedMessageKeys            []byte   `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedAssociatedDataKeys     []byte   `protobuf:"bytes,3,opt,name=EncryptedAssociatedDataKeys,proto3" json:"EncryptedAssociatedDataKeys,omitempty"`
	PartialMessageCypherText        []byte   `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte   `protobuf:"bytes,5,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *PrecompPermuteSlot) Reset()         { *m = PrecompPermuteSlot{} }
func (m *PrecompPermuteSlot) String() string { return proto.CompactTextString(m) }
func (*PrecompPermuteSlot) ProtoMessage()    {}
func (*PrecompPermuteSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{19}
}

func (m *PrecompPermuteSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompPermuteSlot.Unmarshal(m, b)
}
func (m *PrecompPermuteSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompPermuteSlot.Marshal(b, m, deterministic)
}
func (m *PrecompPermuteSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompPermuteSlot.Merge(m, src)
}
func (m *PrecompPermuteSlot) XXX_Size() int {
	return xxx_messageInfo_PrecompPermuteSlot.Size(m)
}
func (m *PrecompPermuteSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompPermuteSlot.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompPermuteSlot proto.InternalMessageInfo

func (m *PrecompPermuteSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompPermuteSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompPermuteSlot) GetEncryptedAssociatedDataKeys() []byte {
	if m != nil {
		return m.EncryptedAssociatedDataKeys
	}
	return nil
}

func (m *PrecompPermuteSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompPermuteSlot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

// Message for batch of Precomp Permute Slots
type PrecompPermuteMessage struct {
	RoundID              string                `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32                 `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*PrecompPermuteSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrecompPermuteMessage) Reset()         { *m = PrecompPermuteMessage{} }
func (m *PrecompPermuteMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompPermuteMessage) ProtoMessage()    {}
func (*PrecompPermuteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{20}
}

func (m *PrecompPermuteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompPermuteMessage.Unmarshal(m, b)
}
func (m *PrecompPermuteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompPermuteMessage.Marshal(b, m, deterministic)
}
func (m *PrecompPermuteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompPermuteMessage.Merge(m, src)
}
func (m *PrecompPermuteMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompPermuteMessage.Size(m)
}
func (m *PrecompPermuteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompPermuteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompPermuteMessage proto.InternalMessageInfo

func (m *PrecompPermuteMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompPermuteMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *PrecompPermuteMessage) GetSlots() []*PrecompPermuteSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message from last node to indicate share phase is beginning
type PrecompShareInitMessage struct {
	RoundID              string   `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	NodeID               uint64   `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	SignedRoundID        []byte   `protobuf:"bytes,3,opt,name=SignedRoundID,proto3" json:"SignedRoundID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrecompShareInitMessage) Reset()         { *m = PrecompShareInitMessage{} }
func (m *PrecompShareInitMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompShareInitMessage) ProtoMessage()    {}
func (*PrecompShareInitMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{21}
}

func (m *PrecompShareInitMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompShareInitMessage.Unmarshal(m, b)
}
func (m *PrecompShareInitMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompShareInitMessage.Marshal(b, m, deterministic)
}
func (m *PrecompShareInitMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompShareInitMessage.Merge(m, src)
}
func (m *PrecompShareInitMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompShareInitMessage.Size(m)
}
func (m *PrecompShareInitMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompShareInitMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompShareInitMessage proto.InternalMessageInfo

func (m *PrecompShareInitMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompShareInitMessage) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PrecompShareInitMessage) GetSignedRoundID() []byte {
	if m != nil {
		return m.SignedRoundID
	}
	return nil
}

// Message from each node to every other node to compare results of share phase
type PrecompShareCompareMessage struct {
	RoundCypherKey       []byte   `protobuf:"bytes,1,opt,name=RoundCypherKey,proto3" json:"RoundCypherKey,omitempty"`
	NodeID               uint64   `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	SignedCypherKey      []byte   `protobuf:"bytes,3,opt,name=SignedCypherKey,proto3" json:"SignedCypherKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrecompShareCompareMessage) Reset()         { *m = PrecompShareCompareMessage{} }
func (m *PrecompShareCompareMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompShareCompareMessage) ProtoMessage()    {}
func (*PrecompShareCompareMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{22}
}

func (m *PrecompShareCompareMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompShareCompareMessage.Unmarshal(m, b)
}
func (m *PrecompShareCompareMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompShareCompareMessage.Marshal(b, m, deterministic)
}
func (m *PrecompShareCompareMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompShareCompareMessage.Merge(m, src)
}
func (m *PrecompShareCompareMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompShareCompareMessage.Size(m)
}
func (m *PrecompShareCompareMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompShareCompareMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompShareCompareMessage proto.InternalMessageInfo

func (m *PrecompShareCompareMessage) GetRoundCypherKey() []byte {
	if m != nil {
		return m.RoundCypherKey
	}
	return nil
}

func (m *PrecompShareCompareMessage) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PrecompShareCompareMessage) GetSignedCypherKey() []byte {
	if m != nil {
		return m.SignedCypherKey
	}
	return nil
}

// Message from each node after it has confirmed the round cypher key
type PrecompShareConfirmMessage struct {
	HashedCypherKey      []byte   `protobuf:"bytes,1,opt,name=HashedCypherKey,proto3" json:"HashedCypherKey,omitempty"`
	NodeID               uint64   `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	ComparisonResult     []byte   `protobuf:"bytes,3,opt,name=ComparisonResult,proto3" json:"ComparisonResult,omitempty"`
	SignedCypherConfirm  []byte   `protobuf:"bytes,4,opt,name=SignedCypherConfirm,proto3" json:"SignedCypherConfirm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrecompShareConfirmMessage) Reset()         { *m = PrecompShareConfirmMessage{} }
func (m *PrecompShareConfirmMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompShareConfirmMessage) ProtoMessage()    {}
func (*PrecompShareConfirmMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{23}
}

func (m *PrecompShareConfirmMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompShareConfirmMessage.Unmarshal(m, b)
}
func (m *PrecompShareConfirmMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompShareConfirmMessage.Marshal(b, m, deterministic)
}
func (m *PrecompShareConfirmMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompShareConfirmMessage.Merge(m, src)
}
func (m *PrecompShareConfirmMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompShareConfirmMessage.Size(m)
}
func (m *PrecompShareConfirmMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompShareConfirmMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompShareConfirmMessage proto.InternalMessageInfo

func (m *PrecompShareConfirmMessage) GetHashedCypherKey() []byte {
	if m != nil {
		return m.HashedCypherKey
	}
	return nil
}

func (m *PrecompShareConfirmMessage) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PrecompShareConfirmMessage) GetComparisonResult() []byte {
	if m != nil {
		return m.ComparisonResult
	}
	return nil
}

func (m *PrecompShareConfirmMessage) GetSignedCypherConfirm() []byte {
	if m != nil {
		return m.SignedCypherConfirm
	}
	return nil
}

// Message for individual Precomp Share Slot
type PrecompShareSlot struct {
	Slot                        uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	PartialRoundPublicCypherKey []byte   `protobuf:"bytes,2,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *PrecompShareSlot) Reset()         { *m = PrecompShareSlot{} }
func (m *PrecompShareSlot) String() string { return proto.CompactTextString(m) }
func (*PrecompShareSlot) ProtoMessage()    {}
func (*PrecompShareSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{24}
}

func (m *PrecompShareSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompShareSlot.Unmarshal(m, b)
}
func (m *PrecompShareSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompShareSlot.Marshal(b, m, deterministic)
}
func (m *PrecompShareSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompShareSlot.Merge(m, src)
}
func (m *PrecompShareSlot) XXX_Size() int {
	return xxx_messageInfo_PrecompShareSlot.Size(m)
}
func (m *PrecompShareSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompShareSlot.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompShareSlot proto.InternalMessageInfo

func (m *PrecompShareSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompShareSlot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

// Message for batch of Precomp Share Slots
type PrecompShareMessage struct {
	RoundID              string              `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32               `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*PrecompShareSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PrecompShareMessage) Reset()         { *m = PrecompShareMessage{} }
func (m *PrecompShareMessage) String() string { return proto.CompactTextString(m) }
func (*PrecompShareMessage) ProtoMessage()    {}
func (*PrecompShareMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{25}
}

func (m *PrecompShareMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecompShareMessage.Unmarshal(m, b)
}
func (m *PrecompShareMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecompShareMessage.Marshal(b, m, deterministic)
}
func (m *PrecompShareMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecompShareMessage.Merge(m, src)
}
func (m *PrecompShareMessage) XXX_Size() int {
	return xxx_messageInfo_PrecompShareMessage.Size(m)
}
func (m *PrecompShareMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecompShareMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrecompShareMessage proto.InternalMessageInfo

func (m *PrecompShareMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompShareMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *PrecompShareMessage) GetSlots() []*PrecompShareSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for batch of Realtime Decrypt Slots
type RealtimeDecryptMessage struct {
	RoundID              string         `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32          `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*CmixMessage `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RealtimeDecryptMessage) Reset()         { *m = RealtimeDecryptMessage{} }
func (m *RealtimeDecryptMessage) String() string { return proto.CompactTextString(m) }
func (*RealtimeDecryptMessage) ProtoMessage()    {}
func (*RealtimeDecryptMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{26}
}

func (m *RealtimeDecryptMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealtimeDecryptMessage.Unmarshal(m, b)
}
func (m *RealtimeDecryptMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealtimeDecryptMessage.Marshal(b, m, deterministic)
}
func (m *RealtimeDecryptMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealtimeDecryptMessage.Merge(m, src)
}
func (m *RealtimeDecryptMessage) XXX_Size() int {
	return xxx_messageInfo_RealtimeDecryptMessage.Size(m)
}
func (m *RealtimeDecryptMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RealtimeDecryptMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RealtimeDecryptMessage proto.InternalMessageInfo

func (m *RealtimeDecryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimeDecryptMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *RealtimeDecryptMessage) GetSlots() []*CmixMessage {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for batch of Realtime Encrypt Slots
type RealtimeEncryptMessage struct {
	RoundID              string         `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32          `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*CmixMessage `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RealtimeEncryptMessage) Reset()         { *m = RealtimeEncryptMessage{} }
func (m *RealtimeEncryptMessage) String() string { return proto.CompactTextString(m) }
func (*RealtimeEncryptMessage) ProtoMessage()    {}
func (*RealtimeEncryptMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{27}
}

func (m *RealtimeEncryptMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealtimeEncryptMessage.Unmarshal(m, b)
}
func (m *RealtimeEncryptMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealtimeEncryptMessage.Marshal(b, m, deterministic)
}
func (m *RealtimeEncryptMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealtimeEncryptMessage.Merge(m, src)
}
func (m *RealtimeEncryptMessage) XXX_Size() int {
	return xxx_messageInfo_RealtimeEncryptMessage.Size(m)
}
func (m *RealtimeEncryptMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RealtimeEncryptMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RealtimeEncryptMessage proto.InternalMessageInfo

func (m *RealtimeEncryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimeEncryptMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *RealtimeEncryptMessage) GetSlots() []*CmixMessage {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Realtime Permute Slot
type RealtimePermuteSlot struct {
	Slot                    uint64   `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	EncryptedMessage        []byte   `protobuf:"bytes,2,opt,name=EncryptedMessage,proto3" json:"EncryptedMessage,omitempty"`
	EncryptedAssociatedData []byte   `protobuf:"bytes,3,opt,name=EncryptedAssociatedData,proto3" json:"EncryptedAssociatedData,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *RealtimePermuteSlot) Reset()         { *m = RealtimePermuteSlot{} }
func (m *RealtimePermuteSlot) String() string { return proto.CompactTextString(m) }
func (*RealtimePermuteSlot) ProtoMessage()    {}
func (*RealtimePermuteSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{28}
}

func (m *RealtimePermuteSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealtimePermuteSlot.Unmarshal(m, b)
}
func (m *RealtimePermuteSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealtimePermuteSlot.Marshal(b, m, deterministic)
}
func (m *RealtimePermuteSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealtimePermuteSlot.Merge(m, src)
}
func (m *RealtimePermuteSlot) XXX_Size() int {
	return xxx_messageInfo_RealtimePermuteSlot.Size(m)
}
func (m *RealtimePermuteSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_RealtimePermuteSlot.DiscardUnknown(m)
}

var xxx_messageInfo_RealtimePermuteSlot proto.InternalMessageInfo

func (m *RealtimePermuteSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RealtimePermuteSlot) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

func (m *RealtimePermuteSlot) GetEncryptedAssociatedData() []byte {
	if m != nil {
		return m.EncryptedAssociatedData
	}
	return nil
}

// Message for batch of Realtime Permute Slots
type RealtimePermuteMessage struct {
	RoundID              string                 `protobuf:"bytes,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	LastOp               int32                  `protobuf:"varint,2,opt,name=LastOp,proto3" json:"LastOp,omitempty"`
	Slots                []*RealtimePermuteSlot `protobuf:"bytes,3,rep,name=Slots,proto3" json:"Slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RealtimePermuteMessage) Reset()         { *m = RealtimePermuteMessage{} }
func (m *RealtimePermuteMessage) String() string { return proto.CompactTextString(m) }
func (*RealtimePermuteMessage) ProtoMessage()    {}
func (*RealtimePermuteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{29}
}

func (m *RealtimePermuteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealtimePermuteMessage.Unmarshal(m, b)
}
func (m *RealtimePermuteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealtimePermuteMessage.Marshal(b, m, deterministic)
}
func (m *RealtimePermuteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealtimePermuteMessage.Merge(m, src)
}
func (m *RealtimePermuteMessage) XXX_Size() int {
	return xxx_messageInfo_RealtimePermuteMessage.Size(m)
}
func (m *RealtimePermuteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RealtimePermuteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RealtimePermuteMessage proto.InternalMessageInfo

func (m *RealtimePermuteMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimePermuteMessage) GetLastOp() int32 {
	if m != nil {
		return m.LastOp
	}
	return 0
}

func (m *RealtimePermuteMessage) GetSlots() []*RealtimePermuteSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func init() {
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*TimePing)(nil), "mixmessages.TimePing")
	proto.RegisterType((*ServerMetricsMessage)(nil), "mixmessages.ServerMetricsMessage")
	proto.RegisterType((*InitRound)(nil), "mixmessages.InitRound")
	proto.RegisterType((*ClientPollMessage)(nil), "mixmessages.ClientPollMessage")
	proto.RegisterType((*ClientMessages)(nil), "mixmessages.ClientMessages")
	proto.RegisterType((*PublicKeyMessage)(nil), "mixmessages.PublicKeyMessage")
	proto.RegisterType((*InputMessages)(nil), "mixmessages.InputMessages")
	proto.RegisterType((*OutputMessages)(nil), "mixmessages.OutputMessages")
	proto.RegisterType((*RegisterUserMessage)(nil), "mixmessages.RegisterUserMessage")
	proto.RegisterType((*ConfirmRegisterUserMessage)(nil), "mixmessages.ConfirmRegisterUserMessage")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*CmixMessage)(nil), "mixmessages.CmixMessage")
	proto.RegisterType((*PrecompDecryptSlot)(nil), "mixmessages.PrecompDecryptSlot")
	proto.RegisterType((*PrecompDecryptMessage)(nil), "mixmessages.PrecompDecryptMessage")
	proto.RegisterType((*PrecompEncryptSlot)(nil), "mixmessages.PrecompEncryptSlot")
	proto.RegisterType((*PrecompEncryptMessage)(nil), "mixmessages.PrecompEncryptMessage")
	proto.RegisterType((*PrecompRevealSlot)(nil), "mixmessages.PrecompRevealSlot")
	proto.RegisterType((*PrecompRevealMessage)(nil), "mixmessages.PrecompRevealMessage")
	proto.RegisterType((*PrecompPermuteSlot)(nil), "mixmessages.PrecompPermuteSlot")
	proto.RegisterType((*PrecompPermuteMessage)(nil), "mixmessages.PrecompPermuteMessage")
	proto.RegisterType((*PrecompShareInitMessage)(nil), "mixmessages.PrecompShareInitMessage")
	proto.RegisterType((*PrecompShareCompareMessage)(nil), "mixmessages.PrecompShareCompareMessage")
	proto.RegisterType((*PrecompShareConfirmMessage)(nil), "mixmessages.PrecompShareConfirmMessage")
	proto.RegisterType((*PrecompShareSlot)(nil), "mixmessages.PrecompShareSlot")
	proto.RegisterType((*PrecompShareMessage)(nil), "mixmessages.PrecompShareMessage")
	proto.RegisterType((*RealtimeDecryptMessage)(nil), "mixmessages.RealtimeDecryptMessage")
	proto.RegisterType((*RealtimeEncryptMessage)(nil), "mixmessages.RealtimeEncryptMessage")
	proto.RegisterType((*RealtimePermuteSlot)(nil), "mixmessages.RealtimePermuteSlot")
	proto.RegisterType((*RealtimePermuteMessage)(nil), "mixmessages.RealtimePermuteMessage")
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5) }

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 1318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xaf, 0x63, 0x27, 0xdf, 0xfa, 0xc5, 0x76, 0x9d, 0x49, 0x9a, 0x5a, 0xce, 0x97, 0xd6, 0x6c,
	0x4b, 0x89, 0x72, 0x88, 0x2a, 0xb7, 0x54, 0xa8, 0x42, 0xa2, 0xc6, 0x49, 0x9b, 0x34, 0x4d, 0x62,
	0xad, 0x93, 0x13, 0x5c, 0xa6, 0xf6, 0x10, 0xaf, 0xb2, 0x3f, 0xcc, 0xee, 0x38, 0x89, 0x11, 0x42,
	0x88, 0x03, 0x07, 0x2e, 0x88, 0x1b, 0x77, 0x38, 0x21, 0xf1, 0x1f, 0x70, 0xe7, 0xdf, 0x42, 0x3b,
	0x33, 0xbb, 0x3b, 0xb3, 0x9e, 0xdd, 0x84, 0x86, 0xde, 0xb8, 0xed, 0xfb, 0x31, 0x9f, 0x79, 0xf3,
	0x99, 0xf7, 0xe6, 0xcd, 0x0e, 0x2c, 0x39, 0xd6, 0x85, 0x43, 0x82, 0x00, 0x9f, 0x90, 0x60, 0x73,
	0xec, 0x7b, 0xd4, 0x43, 0x8b, 0x92, 0xca, 0x58, 0x80, 0x52, 0xcf, 0x72, 0x4f, 0x8c, 0x16, 0xdc,
	0x3c, 0xb2, 0x1c, 0x12, 0x7e, 0xa3, 0x15, 0x98, 0x0f, 0xbf, 0x83, 0x46, 0xa1, 0x55, 0x5c, 0x2f,
	0x9a, 0x5c, 0x30, 0x7e, 0x2c, 0xc0, 0x4a, 0x9f, 0xf8, 0x67, 0xc4, 0xdf, 0x27, 0xd4, 0xb7, 0x06,
	0xc1, 0x3e, 0xc7, 0x40, 0x4d, 0xb8, 0xb9, 0x4f, 0x9c, 0xe3, 0xf0, 0x9b, 0x8d, 0xa8, 0x9a, 0xb1,
	0x8c, 0x5a, 0xb0, 0x78, 0x34, 0xf2, 0x09, 0x1e, 0x72, 0xf3, 0x1c, 0x33, 0xcb, 0xaa, 0x70, 0x74,
	0x77, 0x3c, 0xe1, 0xe6, 0x22, 0x1f, 0x1d, 0xc9, 0xa8, 0x01, 0xff, 0x3b, 0x1e, 0xf7, 0x2d, 0x77,
	0x40, 0x1a, 0x25, 0x16, 0x4a, 0x24, 0x1a, 0x1f, 0x40, 0x79, 0xd7, 0xb5, 0xa8, 0xe9, 0x4d, 0xdc,
	0x61, 0xe8, 0xc6, 0x3e, 0x76, 0xb7, 0x1a, 0x85, 0x56, 0x61, 0xbd, 0x6c, 0x46, 0xa2, 0xb1, 0x0b,
	0x4b, 0x5d, 0xdb, 0x22, 0x2e, 0xed, 0x79, 0xb6, 0x1d, 0xc5, 0xbb, 0x0a, 0x0b, 0xc7, 0x01, 0xf1,
	0x85, 0x77, 0xc5, 0x14, 0x12, 0xfa, 0x3f, 0x94, 0x85, 0xcb, 0xee, 0x56, 0x63, 0x8e, 0x01, 0x25,
	0x0a, 0xe3, 0x11, 0xd4, 0x38, 0x94, 0x50, 0x05, 0xe8, 0x2e, 0x40, 0x6c, 0xe6, 0x5c, 0x95, 0x4d,
	0x49, 0x63, 0xbc, 0x82, 0x7a, 0x6f, 0xf2, 0xc6, 0xb6, 0x06, 0x7b, 0x64, 0x1a, 0xcd, 0x9d, 0x19,
	0x6a, 0x38, 0x7b, 0xec, 0xcd, 0x66, 0xaf, 0x98, 0x89, 0xc2, 0xd8, 0x86, 0xea, 0xae, 0x3b, 0x9e,
	0x24, 0x93, 0x3f, 0x09, 0x49, 0xe7, 0xdf, 0x6c, 0xea, 0xc5, 0x76, 0x63, 0x53, 0xde, 0xea, 0xae,
	0x63, 0x5d, 0x08, 0x07, 0x33, 0xf6, 0x34, 0x5e, 0x40, 0xed, 0x70, 0x42, 0xaf, 0x8f, 0xf3, 0x73,
	0x01, 0x96, 0x4d, 0x72, 0x62, 0x05, 0x94, 0xf8, 0x21, 0x7b, 0xd1, 0xf2, 0x36, 0xa0, 0xce, 0xd5,
	0x3e, 0xa6, 0x96, 0xe7, 0x76, 0xbd, 0x21, 0x11, 0xeb, 0x9c, 0xd1, 0x87, 0x59, 0xb6, 0xed, 0x60,
	0xcb, 0x16, 0x54, 0x73, 0x21, 0x4c, 0x87, 0x1e, 0x0e, 0x82, 0x73, 0xcf, 0x1f, 0x36, 0x8a, 0xcc,
	0x10, 0xcb, 0x2a, 0x45, 0xa5, 0x34, 0x45, 0x5f, 0x40, 0xb3, 0xeb, 0xb9, 0x5f, 0x5a, 0xbe, 0xa3,
	0x8b, 0x2c, 0x9c, 0xcd, 0xf7, 0x3d, 0x5f, 0x84, 0xc3, 0x05, 0xb4, 0x0e, 0xb7, 0xfa, 0xd6, 0x89,
	0x4b, 0x86, 0x69, 0xea, 0xd3, 0x6a, 0x63, 0x0d, 0x8a, 0x9d, 0xc1, 0xa9, 0x1e, 0xc6, 0xf8, 0xb5,
	0x00, 0x8b, 0x12, 0x51, 0xe1, 0x22, 0xfa, 0xc4, 0x1d, 0x4a, 0x39, 0x16, 0xcb, 0xe8, 0x21, 0xd4,
	0x84, 0x5b, 0x0f, 0x4f, 0x6d, 0x0f, 0x0f, 0xc5, 0x8c, 0x29, 0x6d, 0xe8, 0xd7, 0x09, 0x02, 0x6f,
	0x60, 0x61, 0x4a, 0x86, 0x5b, 0x98, 0x62, 0x46, 0x47, 0xc5, 0x4c, 0x69, 0x11, 0x82, 0x52, 0x1f,
	0xdb, 0x54, 0xf0, 0xc1, 0xbe, 0xc3, 0x28, 0xf7, 0xf6, 0x3b, 0xdd, 0xa0, 0x31, 0xdf, 0x2a, 0xae,
	0x57, 0x4c, 0x2e, 0x18, 0xbf, 0xcd, 0x01, 0xea, 0xf9, 0x64, 0xe0, 0x39, 0xe3, 0x2d, 0x32, 0xf0,
	0xa7, 0x63, 0xda, 0xb7, 0x3d, 0xca, 0x00, 0x6c, 0x8f, 0xb2, 0x40, 0x4b, 0x26, 0xfb, 0x46, 0x6d,
	0x58, 0xd9, 0x76, 0x99, 0x0b, 0x19, 0x8a, 0xb8, 0xf6, 0xc8, 0x34, 0x10, 0xa1, 0x6a, 0x6d, 0xe8,
	0x39, 0xac, 0xc5, 0x7a, 0x35, 0x46, 0x36, 0x94, 0x47, 0x9f, 0xe7, 0x82, 0x9e, 0x41, 0xa3, 0x87,
	0x7d, 0x6a, 0xe1, 0xa8, 0x54, 0xbb, 0xd3, 0xf1, 0x88, 0xf8, 0x47, 0xe4, 0x22, 0x5a, 0x5e, 0xa6,
	0x1d, 0xed, 0xc0, 0x3d, 0x61, 0x53, 0x81, 0x25, 0x88, 0x79, 0x06, 0x71, 0x99, 0x9b, 0xf1, 0x5d,
	0x01, 0x6e, 0xab, 0x34, 0x5d, 0x5e, 0xbc, 0xab, 0xb0, 0xf0, 0x1a, 0x07, 0xf4, 0x70, 0xcc, 0x18,
	0x9a, 0x37, 0x85, 0x84, 0x3e, 0x82, 0xf9, 0x90, 0xcf, 0x80, 0x9d, 0x6c, 0x8b, 0xed, 0x7b, 0x4a,
	0x69, 0xcd, 0xee, 0x85, 0xc9, 0xbd, 0x8d, 0x5f, 0x0a, 0xf1, 0x4e, 0x09, 0xbe, 0xfe, 0xd5, 0x9d,
	0xca, 0xe3, 0xb9, 0x98, 0xcf, 0xb3, 0xcc, 0x8e, 0xc0, 0x7e, 0xb7, 0xec, 0x48, 0xeb, 0x8f, 0xd8,
	0xf9, 0xa3, 0x00, 0x4b, 0xc2, 0x6a, 0x92, 0x33, 0x82, 0xed, 0x4c, 0x72, 0xf2, 0x16, 0x3a, 0x77,
	0xfd, 0x84, 0x2a, 0x5e, 0x2d, 0xa1, 0xbe, 0x85, 0x15, 0x25, 0xdc, 0xb7, 0x27, 0xec, 0x89, 0x4a,
	0xd8, 0x5d, 0x1d, 0x61, 0x09, 0x25, 0x11, 0x5f, 0x52, 0xdd, 0xf7, 0x88, 0xef, 0x4c, 0x28, 0xf9,
	0xaf, 0xee, 0xf3, 0xeb, 0x5e, 0xd0, 0xf4, 0x6e, 0x33, 0x5b, 0xda, 0x8b, 0x68, 0xa7, 0xbe, 0x82,
	0x3b, 0xc2, 0xd8, 0x1f, 0x61, 0x9f, 0x84, 0x37, 0x9c, 0x2b, 0xc5, 0x70, 0xe0, 0x0d, 0xa3, 0x3b,
	0x4b, 0xc9, 0x14, 0x12, 0x7a, 0x00, 0x55, 0xde, 0xc4, 0xa2, 0x71, 0x7c, 0x27, 0x54, 0xa5, 0xf1,
	0x43, 0x01, 0x9a, 0xf2, 0x9c, 0x5d, 0xcf, 0x19, 0x63, 0x3f, 0x5e, 0xfa, 0x43, 0xa8, 0x31, 0x4f,
	0xce, 0x53, 0xd8, 0x1f, 0x79, 0x3f, 0x4b, 0x69, 0x33, 0x83, 0x88, 0x1b, 0x6c, 0x02, 0x50, 0x94,
	0x1b, 0x6c, 0xac, 0x36, 0xfe, 0x9c, 0x09, 0x84, 0xf5, 0xf2, 0x28, 0x90, 0x75, 0xb8, 0xb5, 0x83,
	0x83, 0x11, 0x99, 0x89, 0x24, 0xad, 0xce, 0x0c, 0x65, 0x03, 0xea, 0x7c, 0x71, 0x56, 0xe0, 0xb9,
	0x26, 0x09, 0x26, 0x76, 0x54, 0xc1, 0x33, 0x7a, 0xf4, 0x08, 0x96, 0xe5, 0xf8, 0x44, 0x2c, 0x22,
	0x19, 0x75, 0x26, 0x63, 0x04, 0x75, 0x39, 0xfa, 0xcc, 0x0a, 0x7b, 0x0e, 0x6b, 0x22, 0x11, 0x19,
	0x83, 0xfc, 0x82, 0x91, 0xac, 0x89, 0x17, 0x5a, 0x9e, 0x8b, 0xf1, 0x0d, 0x2c, 0xcb, 0x33, 0xbd,
	0x7d, 0x92, 0x3e, 0x56, 0x93, 0xf4, 0x3d, 0x5d, 0x92, 0xc6, 0x8b, 0x89, 0x52, 0xf4, 0x6b, 0x58,
	0x35, 0x09, 0xb6, 0xa9, 0xe5, 0x90, 0x6b, 0x77, 0xc7, 0x4d, 0x35, 0x80, 0xec, 0x8b, 0xe7, 0xec,
	0xdc, 0xd7, 0xee, 0x3d, 0xff, 0x74, 0xee, 0x9f, 0xd8, 0x8d, 0x97, 0x4f, 0x7e, 0xd9, 0x29, 0xba,
	0x01, 0xf5, 0xf4, 0x49, 0x29, 0x36, 0x76, 0x46, 0x8f, 0x3e, 0x86, 0x3b, 0x19, 0x47, 0xa3, 0x48,
	0xce, 0x2c, 0xb3, 0xf1, 0x7d, 0x21, 0xa1, 0xe3, 0xda, 0x07, 0xd6, 0x53, 0x95, 0x8e, 0x96, 0x42,
	0x87, 0x66, 0xdd, 0x82, 0x96, 0xf6, 0x5f, 0x65, 0xa8, 0xed, 0xc7, 0x64, 0x85, 0x95, 0x86, 0xda,
	0x50, 0xee, 0x04, 0xa7, 0x87, 0xae, 0x6d, 0xb9, 0x04, 0x2d, 0xa9, 0x49, 0x65, 0xb9, 0x27, 0xcd,
	0xba, 0xa2, 0xea, 0x0c, 0x4e, 0x8d, 0x1b, 0xe8, 0x19, 0x54, 0x59, 0x84, 0xd4, 0xb7, 0xc6, 0xec,
	0x17, 0xf4, 0xb6, 0xe2, 0x14, 0xfd, 0x99, 0x6a, 0xc7, 0xbe, 0x80, 0xaa, 0xf2, 0x5b, 0x8a, 0xde,
	0x57, 0x9c, 0x74, 0xbf, 0xac, 0x5a, 0x9c, 0xa7, 0x70, 0xf3, 0x80, 0x9c, 0xf3, 0x3f, 0xca, 0x55,
	0xc5, 0x1e, 0xff, 0x69, 0x6a, 0xc7, 0xed, 0x40, 0x4d, 0xbd, 0xc9, 0x21, 0x23, 0xe7, 0x9a, 0x97,
	0x17, 0x41, 0x82, 0x24, 0xf6, 0x5c, 0x8f, 0xa4, 0xe6, 0x7e, 0x16, 0x27, 0xca, 0x75, 0x20, 0xc5,
	0x89, 0xee, 0x3a, 0x72, 0x49, 0x44, 0x62, 0xef, 0xf5, 0x11, 0xa9, 0xe9, 0xa7, 0x45, 0xda, 0x82,
	0x8a, 0x7c, 0xa4, 0xa0, 0x56, 0xe6, 0x69, 0x93, 0x87, 0xf2, 0x5a, 0x3d, 0x65, 0xc3, 0x8d, 0x41,
	0x0f, 0x32, 0x91, 0xa4, 0xfe, 0xa9, 0x45, 0x33, 0xd5, 0x93, 0x54, 0xb4, 0x3e, 0xf4, 0x61, 0x26,
	0xa0, 0xda, 0x1c, 0xaf, 0x86, 0xc9, 0xda, 0x43, 0x2e, 0xa6, 0xdc, 0xe7, 0xb4, 0x98, 0xaf, 0xe0,
	0x56, 0xea, 0xcc, 0x45, 0xf7, 0xb5, 0x05, 0x7a, 0x85, 0x1c, 0x93, 0xb0, 0xa2, 0x24, 0xd3, 0x63,
	0x5d, 0x21, 0xcb, 0x24, 0xac, 0x28, 0x3d, 0xee, 0xe7, 0x1d, 0x1c, 0x79, 0x58, 0x1d, 0xa8, 0xf4,
	0x09, 0x8d, 0xff, 0xb7, 0x51, 0xaa, 0x1b, 0xa5, 0xde, 0x51, 0xb4, 0x10, 0x9f, 0x00, 0xf4, 0x29,
	0xf6, 0xc5, 0xa3, 0x50, 0x33, 0x55, 0xc2, 0xd2, 0xa3, 0x87, 0x6e, 0x74, 0xfb, 0xf7, 0x39, 0x58,
	0x4a, 0x4e, 0xb2, 0x97, 0x98, 0x92, 0x73, 0x3c, 0x45, 0x07, 0x50, 0xed, 0x8e, 0xc8, 0xe0, 0x34,
	0x79, 0xf4, 0x51, 0x1b, 0x45, 0xfa, 0x71, 0xa9, 0xb9, 0xa6, 0xb1, 0xc7, 0xcf, 0x26, 0x61, 0x41,
	0xc1, 0x4b, 0x12, 0xb7, 0xad, 0xcb, 0xc0, 0x32, 0xbb, 0x12, 0x3b, 0x32, 0xa1, 0x37, 0x49, 0x1a,
	0x60, 0x96, 0xa7, 0x96, 0xa9, 0x4f, 0xa1, 0x62, 0x92, 0x01, 0xb1, 0xce, 0xc8, 0x67, 0x98, 0x0e,
	0x46, 0x48, 0x0d, 0x5a, 0x7d, 0x21, 0xd2, 0x92, 0x75, 0x1a, 0x02, 0x24, 0xef, 0x39, 0xe8, 0xf3,
	0x48, 0xe6, 0x8f, 0x2e, 0x28, 0xdd, 0x3f, 0x66, 0xde, 0x63, 0x9a, 0x6a, 0x41, 0x64, 0x3f, 0xdc,
	0x18, 0x37, 0xde, 0x2c, 0xb0, 0x67, 0xcb, 0xc7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x53, 0xb9,
	0x16, 0x9b, 0xcb, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MixMessageNodeClient is the client API for MixMessageNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixMessageNodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error)
	// Handles ServerMetrics
	ServerMetrics(ctx context.Context, in *ServerMetricsMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Init Round
	NewRound(ctx context.Context, in *InitRound, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Encrypt
	PrecompEncrypt(ctx context.Context, in *PrecompEncryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Reveal
	PrecompReveal(ctx context.Context, in *PrecompRevealMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Permute
	PrecompPermute(ctx context.Context, in *PrecompPermuteMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Share
	PrecompShare(ctx context.Context, in *PrecompShareMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Share Initialization
	PrecompShareInit(ctx context.Context, in *PrecompShareInitMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Share Comparison
	PrecompShareCompare(ctx context.Context, in *PrecompShareCompareMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Share Confirmation
	PrecompShareConfirm(ctx context.Context, in *PrecompShareConfirmMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Decrypt
	RealtimeDecrypt(ctx context.Context, in *RealtimeDecryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Encrypt
	RealtimeEncrypt(ctx context.Context, in *RealtimeEncryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Permute
	RealtimePermute(ctx context.Context, in *RealtimePermuteMessage, opts ...grpc.CallOption) (*Ack, error)
	// Set the public key
	SetPublicKey(ctx context.Context, in *PublicKeyMessage, opts ...grpc.CallOption) (*Ack, error)
	// Starts a new round with these messages (if len(msgs) == batch size)
	StartRound(ctx context.Context, in *InputMessages, opts ...grpc.CallOption) (*Ack, error)
}

type mixMessageNodeClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageNodeClient(cc *grpc.ClientConn) MixMessageNodeClient {
	return &mixMessageNodeClient{cc}
}

func (c *mixMessageNodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RoundtripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) ServerMetrics(ctx context.Context, in *ServerMetricsMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/ServerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) NewRound(ctx context.Context, in *InitRound, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/NewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompEncrypt(ctx context.Context, in *PrecompEncryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompReveal(ctx context.Context, in *PrecompRevealMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompReveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompPermute(ctx context.Context, in *PrecompPermuteMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompPermute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompShare(ctx context.Context, in *PrecompShareMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompShareInit(ctx context.Context, in *PrecompShareInitMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompShareInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompShareCompare(ctx context.Context, in *PrecompShareCompareMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompShareCompare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) PrecompShareConfirm(ctx context.Context, in *PrecompShareConfirmMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/PrecompShareConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RealtimeDecrypt(ctx context.Context, in *RealtimeDecryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RealtimeDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RealtimeEncrypt(ctx context.Context, in *RealtimeEncryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RealtimeEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RealtimePermute(ctx context.Context, in *RealtimePermuteMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RealtimePermute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) SetPublicKey(ctx context.Context, in *PublicKeyMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/SetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) StartRound(ctx context.Context, in *InputMessages, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixMessageNodeServer is the server API for MixMessageNode service.
type MixMessageNodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(context.Context, *TimePing) (*Ack, error)
	// Handles ServerMetrics
	ServerMetrics(context.Context, *ServerMetricsMessage) (*Ack, error)
	// Handles Init Round
	NewRound(context.Context, *InitRound) (*Ack, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(context.Context, *PrecompDecryptMessage) (*Ack, error)
	// Handles Precomp Encrypt
	PrecompEncrypt(context.Context, *PrecompEncryptMessage) (*Ack, error)
	// Handles Precomp Reveal
	PrecompReveal(context.Context, *PrecompRevealMessage) (*Ack, error)
	// Handles Precomp Permute
	PrecompPermute(context.Context, *PrecompPermuteMessage) (*Ack, error)
	// Handles Precomp Share
	PrecompShare(context.Context, *PrecompShareMessage) (*Ack, error)
	// Handles Precomp Share Initialization
	PrecompShareInit(context.Context, *PrecompShareInitMessage) (*Ack, error)
	// Handles Precomp Share Comparison
	PrecompShareCompare(context.Context, *PrecompShareCompareMessage) (*Ack, error)
	// Handles Precomp Share Confirmation
	PrecompShareConfirm(context.Context, *PrecompShareConfirmMessage) (*Ack, error)
	// Handles Realtime Decrypt
	RealtimeDecrypt(context.Context, *RealtimeDecryptMessage) (*Ack, error)
	// Handles Realtime Encrypt
	RealtimeEncrypt(context.Context, *RealtimeEncryptMessage) (*Ack, error)
	// Handles Realtime Permute
	RealtimePermute(context.Context, *RealtimePermuteMessage) (*Ack, error)
	// Set the public key
	SetPublicKey(context.Context, *PublicKeyMessage) (*Ack, error)
	// Starts a new round with these messages (if len(msgs) == batch size)
	StartRound(context.Context, *InputMessages) (*Ack, error)
}

func RegisterMixMessageNodeServer(s *grpc.Server, srv MixMessageNodeServer) {
	s.RegisterService(&_MixMessageNode_serviceDesc, srv)
}

func _MixMessageNode_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RoundtripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RoundtripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RoundtripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RoundtripPing(ctx, req.(*TimePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_ServerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetricsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).ServerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/ServerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).ServerMetrics(ctx, req.(*ServerMetricsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_NewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).NewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/NewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).NewRound(ctx, req.(*InitRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompDecryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompDecrypt(ctx, req.(*PrecompDecryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompEncryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompEncrypt(ctx, req.(*PrecompEncryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompReveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompRevealMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompReveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompReveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompReveal(ctx, req.(*PrecompRevealMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompPermute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompPermuteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompPermute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompPermute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompPermute(ctx, req.(*PrecompPermuteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompShareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompShare(ctx, req.(*PrecompShareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompShareInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompShareInitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompShareInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompShareInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompShareInit(ctx, req.(*PrecompShareInitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompShareCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompShareCompareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompShareCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompShareCompare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompShareCompare(ctx, req.(*PrecompShareCompareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_PrecompShareConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompShareConfirmMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).PrecompShareConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/PrecompShareConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).PrecompShareConfirm(ctx, req.(*PrecompShareConfirmMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RealtimeDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeDecryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RealtimeDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RealtimeDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RealtimeDecrypt(ctx, req.(*RealtimeDecryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RealtimeEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeEncryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RealtimeEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RealtimeEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RealtimeEncrypt(ctx, req.(*RealtimeEncryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RealtimePermute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimePermuteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RealtimePermute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RealtimePermute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RealtimePermute(ctx, req.(*RealtimePermuteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_SetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).SetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/SetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).SetPublicKey(ctx, req.(*PublicKeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).StartRound(ctx, req.(*InputMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageNode",
	HandlerType: (*MixMessageNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _MixMessageNode_AskOnline_Handler,
		},
		{
			MethodName: "RoundtripPing",
			Handler:    _MixMessageNode_RoundtripPing_Handler,
		},
		{
			MethodName: "ServerMetrics",
			Handler:    _MixMessageNode_ServerMetrics_Handler,
		},
		{
			MethodName: "NewRound",
			Handler:    _MixMessageNode_NewRound_Handler,
		},
		{
			MethodName: "PrecompDecrypt",
			Handler:    _MixMessageNode_PrecompDecrypt_Handler,
		},
		{
			MethodName: "PrecompEncrypt",
			Handler:    _MixMessageNode_PrecompEncrypt_Handler,
		},
		{
			MethodName: "PrecompReveal",
			Handler:    _MixMessageNode_PrecompReveal_Handler,
		},
		{
			MethodName: "PrecompPermute",
			Handler:    _MixMessageNode_PrecompPermute_Handler,
		},
		{
			MethodName: "PrecompShare",
			Handler:    _MixMessageNode_PrecompShare_Handler,
		},
		{
			MethodName: "PrecompShareInit",
			Handler:    _MixMessageNode_PrecompShareInit_Handler,
		},
		{
			MethodName: "PrecompShareCompare",
			Handler:    _MixMessageNode_PrecompShareCompare_Handler,
		},
		{
			MethodName: "PrecompShareConfirm",
			Handler:    _MixMessageNode_PrecompShareConfirm_Handler,
		},
		{
			MethodName: "RealtimeDecrypt",
			Handler:    _MixMessageNode_RealtimeDecrypt_Handler,
		},
		{
			MethodName: "RealtimeEncrypt",
			Handler:    _MixMessageNode_RealtimeEncrypt_Handler,
		},
		{
			MethodName: "RealtimePermute",
			Handler:    _MixMessageNode_RealtimePermute_Handler,
		},
		{
			MethodName: "SetPublicKey",
			Handler:    _MixMessageNode_SetPublicKey_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _MixMessageNode_StartRound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// MixMessageGatewayClient is the client API for MixMessageGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixMessageGatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*ClientMessages, error)
	// Request a CmixMessage from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*CmixMessage, error)
	// Put a message on the cMix Gateway
	PutMessage(ctx context.Context, in *CmixMessage, opts ...grpc.CallOption) (*Ack, error)
	// Receives a batch of messages from the server
	ReceiveBatch(ctx context.Context, in *OutputMessages, opts ...grpc.CallOption) (*Ack, error)
}

type mixMessageGatewayClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageGatewayClient(cc *grpc.ClientConn) MixMessageGatewayClient {
	return &mixMessageGatewayClient{cc}
}

func (c *mixMessageGatewayClient) CheckMessages(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*ClientMessages, error) {
	out := new(ClientMessages)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) GetMessage(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*CmixMessage, error) {
	out := new(CmixMessage)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) PutMessage(ctx context.Context, in *CmixMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) ReceiveBatch(ctx context.Context, in *OutputMessages, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/ReceiveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixMessageGatewayServer is the server API for MixMessageGateway service.
type MixMessageGatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientPollMessage) (*ClientMessages, error)
	// Request a CmixMessage from the gateway for the given message information
	GetMessage(context.Context, *ClientPollMessage) (*CmixMessage, error)
	// Put a message on the cMix Gateway
	PutMessage(context.Context, *CmixMessage) (*Ack, error)
	// Receives a batch of messages from the server
	ReceiveBatch(context.Context, *OutputMessages) (*Ack, error)
}

func RegisterMixMessageGatewayServer(s *grpc.Server, srv MixMessageGatewayServer) {
	s.RegisterService(&_MixMessageGateway_serviceDesc, srv)
}

func _MixMessageGateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPollMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, req.(*ClientPollMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPollMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, req.(*ClientPollMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, req.(*CmixMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_ReceiveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/ReceiveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, req.(*OutputMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageGateway",
	HandlerType: (*MixMessageGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _MixMessageGateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MixMessageGateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _MixMessageGateway_PutMessage_Handler,
		},
		{
			MethodName: "ReceiveBatch",
			Handler:    _MixMessageGateway_ReceiveBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Handles reception of client data for user registration
	RegisterUser(ctx context.Context, in *RegisterUserMessage, opts ...grpc.CallOption) (*ConfirmRegisterUserMessage, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *RegisterUserMessage, opts ...grpc.CallOption) (*ConfirmRegisterUserMessage, error) {
	out := new(ConfirmRegisterUserMessage)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Handles reception of client data for user registration
	RegisterUser(context.Context, *RegisterUserMessage) (*ConfirmRegisterUserMessage, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*RegisterUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
