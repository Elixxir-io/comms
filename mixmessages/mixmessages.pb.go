// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message asking if server is online
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{0}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (dst *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(dst, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// The request message asking server to add their time
type TimePing struct {
	Times                []int64  `protobuf:"varint,1,rep,packed,name=Times,proto3" json:"Times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimePing) Reset()         { *m = TimePing{} }
func (m *TimePing) String() string { return proto.CompactTextString(m) }
func (*TimePing) ProtoMessage()    {}
func (*TimePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{1}
}
func (m *TimePing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePing.Unmarshal(m, b)
}
func (m *TimePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePing.Marshal(b, m, deterministic)
}
func (dst *TimePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePing.Merge(dst, src)
}
func (m *TimePing) XXX_Size() int {
	return xxx_messageInfo_TimePing.Size(m)
}
func (m *TimePing) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePing.DiscardUnknown(m)
}

var xxx_messageInfo_TimePing proto.InternalMessageInfo

func (m *TimePing) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

// The message containing the server metrics from all visited nodes
type ServerMetricsMessage struct {
	MemUsage             []uint32 `protobuf:"varint,1,rep,packed,name=MemUsage,proto3" json:"MemUsage,omitempty"`
	ThreadUsage          []uint32 `protobuf:"varint,2,rep,packed,name=ThreadUsage,proto3" json:"ThreadUsage,omitempty"`
	CpuUsage             []uint32 `protobuf:"varint,3,rep,packed,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`
	UpSince              []int64  `protobuf:"varint,4,rep,packed,name=UpSince,proto3" json:"UpSince,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMetricsMessage) Reset()         { *m = ServerMetricsMessage{} }
func (m *ServerMetricsMessage) String() string { return proto.CompactTextString(m) }
func (*ServerMetricsMessage) ProtoMessage()    {}
func (*ServerMetricsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{2}
}
func (m *ServerMetricsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMetricsMessage.Unmarshal(m, b)
}
func (m *ServerMetricsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMetricsMessage.Marshal(b, m, deterministic)
}
func (dst *ServerMetricsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetricsMessage.Merge(dst, src)
}
func (m *ServerMetricsMessage) XXX_Size() int {
	return xxx_messageInfo_ServerMetricsMessage.Size(m)
}
func (m *ServerMetricsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetricsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetricsMessage proto.InternalMessageInfo

func (m *ServerMetricsMessage) GetMemUsage() []uint32 {
	if m != nil {
		return m.MemUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetThreadUsage() []uint32 {
	if m != nil {
		return m.ThreadUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetCpuUsage() []uint32 {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *ServerMetricsMessage) GetUpSince() []int64 {
	if m != nil {
		return m.UpSince
	}
	return nil
}

// The message for Init Round
type RoundIDMessage struct {
	RoundID              uint64   `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundIDMessage) Reset()         { *m = RoundIDMessage{} }
func (m *RoundIDMessage) String() string { return proto.CompactTextString(m) }
func (*RoundIDMessage) ProtoMessage()    {}
func (*RoundIDMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{3}
}
func (m *RoundIDMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundIDMessage.Unmarshal(m, b)
}
func (m *RoundIDMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundIDMessage.Marshal(b, m, deterministic)
}
func (dst *RoundIDMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundIDMessage.Merge(dst, src)
}
func (m *RoundIDMessage) XXX_Size() int {
	return xxx_messageInfo_RoundIDMessage.Size(m)
}
func (m *RoundIDMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundIDMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RoundIDMessage proto.InternalMessageInfo

func (m *RoundIDMessage) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{4}
}
func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (dst *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(dst, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

// The message for clients to poll new CMIX messages
type ClientPollMessage struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MessageID            string   `protobuf:"bytes,2,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientPollMessage) Reset()         { *m = ClientPollMessage{} }
func (m *ClientPollMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPollMessage) ProtoMessage()    {}
func (*ClientPollMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{5}
}
func (m *ClientPollMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientPollMessage.Unmarshal(m, b)
}
func (m *ClientPollMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientPollMessage.Marshal(b, m, deterministic)
}
func (dst *ClientPollMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPollMessage.Merge(dst, src)
}
func (m *ClientPollMessage) XXX_Size() int {
	return xxx_messageInfo_ClientPollMessage.Size(m)
}
func (m *ClientPollMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPollMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPollMessage proto.InternalMessageInfo

func (m *ClientPollMessage) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientPollMessage) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type ClientMessages struct {
	MessageIDs           []string `protobuf:"bytes,1,rep,name=MessageIDs,proto3" json:"MessageIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessages) Reset()         { *m = ClientMessages{} }
func (m *ClientMessages) String() string { return proto.CompactTextString(m) }
func (*ClientMessages) ProtoMessage()    {}
func (*ClientMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{6}
}
func (m *ClientMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessages.Unmarshal(m, b)
}
func (m *ClientMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessages.Marshal(b, m, deterministic)
}
func (dst *ClientMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessages.Merge(dst, src)
}
func (m *ClientMessages) XXX_Size() int {
	return xxx_messageInfo_ClientMessages.Size(m)
}
func (m *ClientMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessages proto.InternalMessageInfo

func (m *ClientMessages) GetMessageIDs() []string {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// Input messages are a list of messages run as a batch
type InputMessages struct {
	Messages             []*CmixBatch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InputMessages) Reset()         { *m = InputMessages{} }
func (m *InputMessages) String() string { return proto.CompactTextString(m) }
func (*InputMessages) ProtoMessage()    {}
func (*InputMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{7}
}
func (m *InputMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputMessages.Unmarshal(m, b)
}
func (m *InputMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputMessages.Marshal(b, m, deterministic)
}
func (dst *InputMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputMessages.Merge(dst, src)
}
func (m *InputMessages) XXX_Size() int {
	return xxx_messageInfo_InputMessages.Size(m)
}
func (m *InputMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_InputMessages.DiscardUnknown(m)
}

var xxx_messageInfo_InputMessages proto.InternalMessageInfo

func (m *InputMessages) GetMessages() []*CmixBatch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Output messages are a list of messages run as a batch
type OutputMessages struct {
	Messages             []*CmixBatch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OutputMessages) Reset()         { *m = OutputMessages{} }
func (m *OutputMessages) String() string { return proto.CompactTextString(m) }
func (*OutputMessages) ProtoMessage()    {}
func (*OutputMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{8}
}
func (m *OutputMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputMessages.Unmarshal(m, b)
}
func (m *OutputMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputMessages.Marshal(b, m, deterministic)
}
func (dst *OutputMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputMessages.Merge(dst, src)
}
func (m *OutputMessages) XXX_Size() int {
	return xxx_messageInfo_OutputMessages.Size(m)
}
func (m *OutputMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputMessages.DiscardUnknown(m)
}

var xxx_messageInfo_OutputMessages proto.InternalMessageInfo

func (m *OutputMessages) GetMessages() []*CmixBatch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Client -> RegistrationServer message to initialize registration process
type RegisterUserMessage struct {
	RegistrationCode string `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	// Client Public Key
	Y                    []byte   `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
	P                    []byte   `protobuf:"bytes,3,opt,name=P,proto3" json:"P,omitempty"`
	Q                    []byte   `protobuf:"bytes,4,opt,name=Q,proto3" json:"Q,omitempty"`
	G                    []byte   `protobuf:"bytes,5,opt,name=G,proto3" json:"G,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserMessage) Reset()         { *m = RegisterUserMessage{} }
func (m *RegisterUserMessage) String() string { return proto.CompactTextString(m) }
func (*RegisterUserMessage) ProtoMessage()    {}
func (*RegisterUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{9}
}
func (m *RegisterUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterUserMessage.Unmarshal(m, b)
}
func (m *RegisterUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterUserMessage.Marshal(b, m, deterministic)
}
func (dst *RegisterUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserMessage.Merge(dst, src)
}
func (m *RegisterUserMessage) XXX_Size() int {
	return xxx_messageInfo_RegisterUserMessage.Size(m)
}
func (m *RegisterUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserMessage proto.InternalMessageInfo

func (m *RegisterUserMessage) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *RegisterUserMessage) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *RegisterUserMessage) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RegisterUserMessage) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RegisterUserMessage) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

// RegistrationServer -> Client response to RegisterUserMessage
type ConfirmRegisterUserMessage struct {
	// RegistrationServer-Signed Client Public Key
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmRegisterUserMessage) Reset()         { *m = ConfirmRegisterUserMessage{} }
func (m *ConfirmRegisterUserMessage) String() string { return proto.CompactTextString(m) }
func (*ConfirmRegisterUserMessage) ProtoMessage()    {}
func (*ConfirmRegisterUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{10}
}
func (m *ConfirmRegisterUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Unmarshal(m, b)
}
func (m *ConfirmRegisterUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Marshal(b, m, deterministic)
}
func (dst *ConfirmRegisterUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmRegisterUserMessage.Merge(dst, src)
}
func (m *ConfirmRegisterUserMessage) XXX_Size() int {
	return xxx_messageInfo_ConfirmRegisterUserMessage.Size(m)
}
func (m *ConfirmRegisterUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmRegisterUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmRegisterUserMessage proto.InternalMessageInfo

func (m *ConfirmRegisterUserMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ConfirmRegisterUserMessage) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *ConfirmRegisterUserMessage) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *ConfirmRegisterUserMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Client -> Gateway -> Server message to request nonce
type RequestNonceMessage struct {
	Salt []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	// Client Public Key
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
	P []byte `protobuf:"bytes,3,opt,name=P,proto3" json:"P,omitempty"`
	Q []byte `protobuf:"bytes,4,opt,name=Q,proto3" json:"Q,omitempty"`
	G []byte `protobuf:"bytes,5,opt,name=G,proto3" json:"G,omitempty"`
	// RegistrationServer-Signed Client Public Key
	Hash                 []byte   `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestNonceMessage) Reset()         { *m = RequestNonceMessage{} }
func (m *RequestNonceMessage) String() string { return proto.CompactTextString(m) }
func (*RequestNonceMessage) ProtoMessage()    {}
func (*RequestNonceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{11}
}
func (m *RequestNonceMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestNonceMessage.Unmarshal(m, b)
}
func (m *RequestNonceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestNonceMessage.Marshal(b, m, deterministic)
}
func (dst *RequestNonceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNonceMessage.Merge(dst, src)
}
func (m *RequestNonceMessage) XXX_Size() int {
	return xxx_messageInfo_RequestNonceMessage.Size(m)
}
func (m *RequestNonceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNonceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNonceMessage proto.InternalMessageInfo

func (m *RequestNonceMessage) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *RequestNonceMessage) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *RequestNonceMessage) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RequestNonceMessage) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RequestNonceMessage) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *RequestNonceMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RequestNonceMessage) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RequestNonceMessage) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Server -> Gateway -> Client response to RequestNonceMessage
type NonceMessage struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NonceMessage) Reset()         { *m = NonceMessage{} }
func (m *NonceMessage) String() string { return proto.CompactTextString(m) }
func (*NonceMessage) ProtoMessage()    {}
func (*NonceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{12}
}
func (m *NonceMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NonceMessage.Unmarshal(m, b)
}
func (m *NonceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NonceMessage.Marshal(b, m, deterministic)
}
func (dst *NonceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceMessage.Merge(dst, src)
}
func (m *NonceMessage) XXX_Size() int {
	return xxx_messageInfo_NonceMessage.Size(m)
}
func (m *NonceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NonceMessage proto.InternalMessageInfo

func (m *NonceMessage) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *NonceMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Client -> Gateway -> Server message to confirm nonce
type ConfirmNonceMessage struct {
	// Client-Signed Nonce
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmNonceMessage) Reset()         { *m = ConfirmNonceMessage{} }
func (m *ConfirmNonceMessage) String() string { return proto.CompactTextString(m) }
func (*ConfirmNonceMessage) ProtoMessage()    {}
func (*ConfirmNonceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{13}
}
func (m *ConfirmNonceMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmNonceMessage.Unmarshal(m, b)
}
func (m *ConfirmNonceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmNonceMessage.Marshal(b, m, deterministic)
}
func (dst *ConfirmNonceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmNonceMessage.Merge(dst, src)
}
func (m *ConfirmNonceMessage) XXX_Size() int {
	return xxx_messageInfo_ConfirmNonceMessage.Size(m)
}
func (m *ConfirmNonceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmNonceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmNonceMessage proto.InternalMessageInfo

func (m *ConfirmNonceMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ConfirmNonceMessage) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *ConfirmNonceMessage) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Server -> Gateway -> Client response to ConfirmNonceMessage
type RegistrationConfirmation struct {
	// Server-Signed Client Public Key
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R    []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S    []byte `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	// Server Public Key
	Y                    []byte   `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
	P                    []byte   `protobuf:"bytes,5,opt,name=P,proto3" json:"P,omitempty"`
	Q                    []byte   `protobuf:"bytes,6,opt,name=Q,proto3" json:"Q,omitempty"`
	G                    []byte   `protobuf:"bytes,7,opt,name=G,proto3" json:"G,omitempty"`
	Error                string   `protobuf:"bytes,8,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{14}
}
func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (dst *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(dst, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RegistrationConfirmation) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RegistrationConfirmation) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RegistrationConfirmation) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *RegistrationConfirmation) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RegistrationConfirmation) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RegistrationConfirmation) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *RegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Generic Ack message containing an Error field
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{15}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CmixBatch struct {
	RoundID              uint64      `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	ForPhase             int32       `protobuf:"varint,2,opt,name=ForPhase,proto3" json:"ForPhase,omitempty"`
	Slots                []*CmixSlot `protobuf:"bytes,4,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CmixBatch) Reset()         { *m = CmixBatch{} }
func (m *CmixBatch) String() string { return proto.CompactTextString(m) }
func (*CmixBatch) ProtoMessage()    {}
func (*CmixBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{16}
}
func (m *CmixBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixBatch.Unmarshal(m, b)
}
func (m *CmixBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixBatch.Marshal(b, m, deterministic)
}
func (dst *CmixBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixBatch.Merge(dst, src)
}
func (m *CmixBatch) XXX_Size() int {
	return xxx_messageInfo_CmixBatch.Size(m)
}
func (m *CmixBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CmixBatch proto.InternalMessageInfo

func (m *CmixBatch) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *CmixBatch) GetForPhase() int32 {
	if m != nil {
		return m.ForPhase
	}
	return 0
}

func (m *CmixBatch) GetSlots() []*CmixSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type CmixSlot struct {
	// Precomputation fields
	EncryptedMessageKeys            []byte `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedAssociatedDataKeys     []byte `protobuf:"bytes,3,opt,name=EncryptedAssociatedDataKeys,proto3" json:"EncryptedAssociatedDataKeys,omitempty"`
	PartialMessageCypherText        []byte `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte `protobuf:"bytes,5,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	PartialRoundPublicCypherKey     []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	MessagePayload       []byte   `protobuf:"bytes,8,opt,name=MessagePayload,proto3" json:"MessagePayload,omitempty"`
	AssociatedData       []byte   `protobuf:"bytes,9,opt,name=AssociatedData,proto3" json:"AssociatedData,omitempty"`
	Salt                 []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmixSlot) Reset()         { *m = CmixSlot{} }
func (m *CmixSlot) String() string { return proto.CompactTextString(m) }
func (*CmixSlot) ProtoMessage()    {}
func (*CmixSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_mixmessages_279a5149a8d122ef, []int{17}
}
func (m *CmixSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmixSlot.Unmarshal(m, b)
}
func (m *CmixSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmixSlot.Marshal(b, m, deterministic)
}
func (dst *CmixSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmixSlot.Merge(dst, src)
}
func (m *CmixSlot) XXX_Size() int {
	return xxx_messageInfo_CmixSlot.Size(m)
}
func (m *CmixSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_CmixSlot.DiscardUnknown(m)
}

var xxx_messageInfo_CmixSlot proto.InternalMessageInfo

func (m *CmixSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *CmixSlot) GetEncryptedAssociatedDataKeys() []byte {
	if m != nil {
		return m.EncryptedAssociatedDataKeys
	}
	return nil
}

func (m *CmixSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *CmixSlot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

func (m *CmixSlot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *CmixSlot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *CmixSlot) GetMessagePayload() []byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

func (m *CmixSlot) GetAssociatedData() []byte {
	if m != nil {
		return m.AssociatedData
	}
	return nil
}

func (m *CmixSlot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *CmixSlot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

func init() {
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*TimePing)(nil), "mixmessages.TimePing")
	proto.RegisterType((*ServerMetricsMessage)(nil), "mixmessages.ServerMetricsMessage")
	proto.RegisterType((*RoundIDMessage)(nil), "mixmessages.RoundIDMessage")
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*ClientPollMessage)(nil), "mixmessages.ClientPollMessage")
	proto.RegisterType((*ClientMessages)(nil), "mixmessages.ClientMessages")
	proto.RegisterType((*InputMessages)(nil), "mixmessages.InputMessages")
	proto.RegisterType((*OutputMessages)(nil), "mixmessages.OutputMessages")
	proto.RegisterType((*RegisterUserMessage)(nil), "mixmessages.RegisterUserMessage")
	proto.RegisterType((*ConfirmRegisterUserMessage)(nil), "mixmessages.ConfirmRegisterUserMessage")
	proto.RegisterType((*RequestNonceMessage)(nil), "mixmessages.RequestNonceMessage")
	proto.RegisterType((*NonceMessage)(nil), "mixmessages.NonceMessage")
	proto.RegisterType((*ConfirmNonceMessage)(nil), "mixmessages.ConfirmNonceMessage")
	proto.RegisterType((*RegistrationConfirmation)(nil), "mixmessages.RegistrationConfirmation")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*CmixBatch)(nil), "mixmessages.CmixBatch")
	proto.RegisterType((*CmixSlot)(nil), "mixmessages.CmixSlot")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MixMessageNodeClient is the client API for MixMessageNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixMessageNodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error)
	// Handles ServerMetrics
	ServerMetrics(ctx context.Context, in *ServerMetricsMessage, opts ...grpc.CallOption) (*Ack, error)
	// Creates a new round with a certain ID
	NewRound(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// Starts a new round with these messages (if len(msgs) == batch size)
	StartRound(ctx context.Context, in *InputMessages, opts ...grpc.CallOption) (*Ack, error)
	// Runs a cMix phase on another node
	Phase(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// Handles Registration Nonce Communication
	RequestNonce(ctx context.Context, in *RequestNonceMessage, opts ...grpc.CallOption) (*NonceMessage, error)
	// Handles Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *ConfirmNonceMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type mixMessageNodeClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageNodeClient(cc *grpc.ClientConn) MixMessageNodeClient {
	return &mixMessageNodeClient{cc}
}

func (c *mixMessageNodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RoundtripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) ServerMetrics(ctx context.Context, in *ServerMetricsMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/ServerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) NewRound(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/NewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) StartRound(ctx context.Context, in *InputMessages, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) Phase(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/Phase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) GetRoundBufferInfo(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) RequestNonce(ctx context.Context, in *RequestNonceMessage, opts ...grpc.CallOption) (*NonceMessage, error) {
	out := new(NonceMessage)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageNodeClient) ConfirmNonce(ctx context.Context, in *ConfirmNonceMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageNode/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixMessageNodeServer is the server API for MixMessageNode service.
type MixMessageNodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(context.Context, *TimePing) (*Ack, error)
	// Handles ServerMetrics
	ServerMetrics(context.Context, *ServerMetricsMessage) (*Ack, error)
	// Creates a new round with a certain ID
	NewRound(context.Context, *CmixBatch) (*Ack, error)
	// Starts a new round with these messages (if len(msgs) == batch size)
	StartRound(context.Context, *InputMessages) (*Ack, error)
	// Runs a cMix phase on another node
	Phase(context.Context, *CmixBatch) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *Ping) (*RoundBufferInfo, error)
	// Handles Registration Nonce Communication
	RequestNonce(context.Context, *RequestNonceMessage) (*NonceMessage, error)
	// Handles Registration Nonce Confirmation
	ConfirmNonce(context.Context, *ConfirmNonceMessage) (*RegistrationConfirmation, error)
}

func RegisterMixMessageNodeServer(s *grpc.Server, srv MixMessageNodeServer) {
	s.RegisterService(&_MixMessageNode_serviceDesc, srv)
}

func _MixMessageNode_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RoundtripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RoundtripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RoundtripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RoundtripPing(ctx, req.(*TimePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_ServerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetricsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).ServerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/ServerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).ServerMetrics(ctx, req.(*ServerMetricsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_NewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).NewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/NewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).NewRound(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).StartRound(ctx, req.(*InputMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_Phase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).Phase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/Phase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).Phase(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).GetRoundBufferInfo(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).RequestNonce(ctx, req.(*RequestNonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageNode_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmNonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageNodeServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageNode/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageNodeServer).ConfirmNonce(ctx, req.(*ConfirmNonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageNode",
	HandlerType: (*MixMessageNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _MixMessageNode_AskOnline_Handler,
		},
		{
			MethodName: "RoundtripPing",
			Handler:    _MixMessageNode_RoundtripPing_Handler,
		},
		{
			MethodName: "ServerMetrics",
			Handler:    _MixMessageNode_ServerMetrics_Handler,
		},
		{
			MethodName: "NewRound",
			Handler:    _MixMessageNode_NewRound_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _MixMessageNode_StartRound_Handler,
		},
		{
			MethodName: "Phase",
			Handler:    _MixMessageNode_Phase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _MixMessageNode_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _MixMessageNode_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _MixMessageNode_ConfirmNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// MixMessageGatewayClient is the client API for MixMessageGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixMessageGatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*ClientMessages, error)
	// Request a CmixBatch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*CmixBatch, error)
	// Put a message on the cMix Gateway
	PutMessage(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error)
	// Receives a batch of messages from the server
	ReceiveBatch(ctx context.Context, in *OutputMessages, opts ...grpc.CallOption) (*Ack, error)
	// Pass-through for Registration Nonce Communication
	RequestNonce(ctx context.Context, in *RequestNonceMessage, opts ...grpc.CallOption) (*NonceMessage, error)
	// Pass-through for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *ConfirmNonceMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type mixMessageGatewayClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageGatewayClient(cc *grpc.ClientConn) MixMessageGatewayClient {
	return &mixMessageGatewayClient{cc}
}

func (c *mixMessageGatewayClient) CheckMessages(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*ClientMessages, error) {
	out := new(ClientMessages)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) GetMessage(ctx context.Context, in *ClientPollMessage, opts ...grpc.CallOption) (*CmixBatch, error) {
	out := new(CmixBatch)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) PutMessage(ctx context.Context, in *CmixBatch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) ReceiveBatch(ctx context.Context, in *OutputMessages, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/ReceiveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) RequestNonce(ctx context.Context, in *RequestNonceMessage, opts ...grpc.CallOption) (*NonceMessage, error) {
	out := new(NonceMessage)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageGatewayClient) ConfirmNonce(ctx context.Context, in *ConfirmNonceMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.MixMessageGateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixMessageGatewayServer is the server API for MixMessageGateway service.
type MixMessageGatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientPollMessage) (*ClientMessages, error)
	// Request a CmixBatch from the gateway for the given message information
	GetMessage(context.Context, *ClientPollMessage) (*CmixBatch, error)
	// Put a message on the cMix Gateway
	PutMessage(context.Context, *CmixBatch) (*Ack, error)
	// Receives a batch of messages from the server
	ReceiveBatch(context.Context, *OutputMessages) (*Ack, error)
	// Pass-through for Registration Nonce Communication
	RequestNonce(context.Context, *RequestNonceMessage) (*NonceMessage, error)
	// Pass-through for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *ConfirmNonceMessage) (*RegistrationConfirmation, error)
}

func RegisterMixMessageGatewayServer(s *grpc.Server, srv MixMessageGatewayServer) {
	s.RegisterService(&_MixMessageGateway_serviceDesc, srv)
}

func _MixMessageGateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPollMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).CheckMessages(ctx, req.(*ClientPollMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPollMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).GetMessage(ctx, req.(*ClientPollMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmixBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).PutMessage(ctx, req.(*CmixBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_ReceiveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/ReceiveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).ReceiveBatch(ctx, req.(*OutputMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).RequestNonce(ctx, req.(*RequestNonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageGateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmNonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageGatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageGateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageGatewayServer).ConfirmNonce(ctx, req.(*ConfirmNonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageGateway",
	HandlerType: (*MixMessageGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _MixMessageGateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MixMessageGateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _MixMessageGateway_PutMessage_Handler,
		},
		{
			MethodName: "ReceiveBatch",
			Handler:    _MixMessageGateway_ReceiveBatch_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _MixMessageGateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _MixMessageGateway_ConfirmNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client & RegistrationServer Communication
	RegisterUser(ctx context.Context, in *RegisterUserMessage, opts ...grpc.CallOption) (*ConfirmRegisterUserMessage, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *RegisterUserMessage, opts ...grpc.CallOption) (*ConfirmRegisterUserMessage, error) {
	out := new(ConfirmRegisterUserMessage)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client & RegistrationServer Communication
	RegisterUser(context.Context, *RegisterUserMessage) (*ConfirmRegisterUserMessage, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*RegisterUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_mixmessages_279a5149a8d122ef) }

var fileDescriptor_mixmessages_279a5149a8d122ef = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0xd6, 0x3f, 0xb1, 0x8f, 0x7f, 0x68, 0xa6, 0xa6, 0x5a, 0x9c, 0x0a, 0xcc, 0x48, 0x40,
	0x54, 0xa4, 0x0a, 0xb9, 0x12, 0x42, 0x01, 0x09, 0x5c, 0x27, 0x75, 0xad, 0xc8, 0xa9, 0xbb, 0x4e,
	0x2e, 0x22, 0xae, 0x36, 0xeb, 0x49, 0x3c, 0xb2, 0xbd, 0x6b, 0x66, 0xc6, 0x6d, 0xcc, 0x23, 0x70,
	0xc7, 0x1d, 0x8f, 0xc5, 0x13, 0x70, 0xc9, 0x73, 0xa0, 0xf9, 0xd9, 0xf5, 0x8e, 0xbd, 0x69, 0x15,
	0xb8, 0xe2, 0x6e, 0xbe, 0xf3, 0x37, 0xe7, 0x7c, 0x67, 0xe6, 0xcc, 0xc0, 0xfe, 0x82, 0xde, 0x2e,
	0x08, 0xe7, 0xfe, 0x0d, 0xe1, 0xcf, 0x96, 0x2c, 0x12, 0x11, 0xaa, 0xa6, 0x44, 0xb8, 0x04, 0x85,
	0x11, 0x0d, 0x6f, 0x70, 0x1b, 0xca, 0xe7, 0x74, 0x41, 0xe4, 0x1a, 0x35, 0xa1, 0x28, 0xd7, 0xdc,
	0x75, 0xda, 0xf9, 0xc3, 0xbc, 0xa7, 0x01, 0xfe, 0xcd, 0x81, 0xe6, 0x98, 0xb0, 0xb7, 0x84, 0x0d,
	0x89, 0x60, 0x34, 0xe0, 0x43, 0x1d, 0x03, 0xb5, 0xa0, 0x3c, 0x24, 0x8b, 0x0b, 0xb9, 0x56, 0x1e,
	0x75, 0x2f, 0xc1, 0xa8, 0x0d, 0xd5, 0xf3, 0x29, 0x23, 0xfe, 0x44, 0xab, 0x1f, 0x28, 0x75, 0x5a,
	0x24, 0xbd, 0x7b, 0xcb, 0x95, 0x56, 0xe7, 0xb5, 0x77, 0x8c, 0x91, 0x0b, 0x7b, 0x17, 0xcb, 0x31,
	0x0d, 0x03, 0xe2, 0x16, 0x54, 0x2a, 0x31, 0xc4, 0x4f, 0xa1, 0xe1, 0x45, 0xab, 0x70, 0x32, 0x38,
	0x8e, 0xb3, 0x70, 0x61, 0xcf, 0x48, 0x5c, 0xa7, 0xed, 0x1c, 0x16, 0xbc, 0x18, 0xe2, 0xef, 0xe1,
	0x23, 0xb5, 0x7c, 0xb1, 0xba, 0xbe, 0x26, 0x6c, 0x10, 0x5e, 0x47, 0xe8, 0xd0, 0x12, 0x8d, 0xe9,
	0xaf, 0x44, 0x39, 0xd5, 0xbd, 0x6d, 0x31, 0x1e, 0xc0, 0x7e, 0x6f, 0x4e, 0x49, 0x28, 0x46, 0xd1,
	0x7c, 0x1e, 0xef, 0xf5, 0x18, 0x4a, 0x17, 0x9c, 0x30, 0xb3, 0x55, 0xcd, 0x33, 0x08, 0x3d, 0x81,
	0x8a, 0x31, 0x19, 0x1c, 0xbb, 0x0f, 0xda, 0xce, 0x61, 0xc5, 0xdb, 0x08, 0xf0, 0x37, 0xd0, 0xd0,
	0xa1, 0x8c, 0x88, 0xa3, 0x4f, 0x01, 0x12, 0xb5, 0x66, 0xbb, 0xe2, 0xa5, 0x24, 0xb8, 0x07, 0xf5,
	0x41, 0xb8, 0x5c, 0x6d, 0x1c, 0x3a, 0x92, 0x6a, 0xbd, 0x56, 0xe6, 0xd5, 0xce, 0xe3, 0x67, 0xe9,
	0x06, 0xf7, 0x16, 0xf4, 0xf6, 0x85, 0x2f, 0x82, 0xa9, 0x97, 0xd8, 0xe1, 0x63, 0x68, 0xbc, 0x5e,
	0x89, 0xff, 0x1a, 0x65, 0x0d, 0x8f, 0x3c, 0x72, 0x43, 0xb9, 0x20, 0x4c, 0x16, 0x1b, 0x33, 0xf1,
	0x14, 0x1e, 0x6a, 0x31, 0xf3, 0x05, 0x8d, 0xc2, 0x5e, 0x34, 0xd1, 0x4c, 0x56, 0xbc, 0x1d, 0x39,
	0xaa, 0x81, 0x73, 0xa9, 0x58, 0xa9, 0x79, 0xce, 0xa5, 0x44, 0x23, 0x37, 0xaf, 0xd1, 0x48, 0xa2,
	0x37, 0x6e, 0x41, 0xa3, 0x37, 0x12, 0xf5, 0xdd, 0xa2, 0x46, 0x7d, 0x7c, 0x05, 0xad, 0x5e, 0x14,
	0x5e, 0x53, 0xb6, 0xc8, 0xca, 0x00, 0x41, 0xe1, 0x95, 0xcf, 0xa7, 0xa6, 0x13, 0x6a, 0x2d, 0xfd,
	0xbd, 0x78, 0x27, 0x4f, 0xa2, 0x71, 0xbc, 0xd3, 0x58, 0x1e, 0xee, 0x13, 0xc6, 0x22, 0xa6, 0x76,
	0xab, 0x78, 0x1a, 0xe0, 0xdf, 0x1d, 0x59, 0xdf, 0x2f, 0x2b, 0xc2, 0xc5, 0x59, 0x14, 0x06, 0x24,
	0x15, 0x7d, 0xec, 0xcf, 0x45, 0x1c, 0x5d, 0xae, 0xff, 0x6d, 0x1d, 0x49, 0xa6, 0xa5, 0xed, 0x4c,
	0xf7, 0xac, 0x4c, 0xcb, 0x26, 0x53, 0x7c, 0x04, 0x35, 0x2b, 0x97, 0x26, 0x14, 0x15, 0x36, 0xc9,
	0x68, 0xb0, 0xa9, 0xe7, 0x41, 0xba, 0x9e, 0x13, 0x78, 0x64, 0x38, 0xdb, 0x2e, 0xe7, 0x3e, 0x64,
	0xe1, 0x3f, 0x1c, 0x70, 0xed, 0x3e, 0xaa, 0x98, 0x6a, 0x7d, 0x6f, 0xe6, 0x15, 0x6f, 0x05, 0x8b,
	0xb7, 0xa2, 0xc5, 0x5b, 0xc9, 0xe2, 0x6d, 0x2f, 0xe6, 0x2d, 0xa9, 0xb0, 0x9c, 0xae, 0xf0, 0x00,
	0xf2, 0xdd, 0x60, 0xb6, 0x51, 0x3a, 0x69, 0x65, 0x08, 0x95, 0xe4, 0x10, 0xdf, 0x3d, 0x19, 0xe4,
	0xec, 0x79, 0x19, 0xb1, 0xd1, 0xd4, 0xe7, 0x44, 0x25, 0x5d, 0xf4, 0x12, 0x8c, 0xbe, 0x86, 0x22,
	0x9f, 0x47, 0x82, 0xab, 0xc9, 0x53, 0xed, 0x7c, 0xbc, 0x73, 0x43, 0xc6, 0xf3, 0x48, 0x78, 0xda,
	0x06, 0xff, 0x95, 0x87, 0x72, 0x2c, 0x43, 0x1d, 0x68, 0x9e, 0x84, 0x01, 0x5b, 0x2f, 0x05, 0x99,
	0x18, 0xe2, 0x4f, 0xc9, 0x9a, 0x1b, 0x5a, 0x32, 0x75, 0xe8, 0x27, 0x38, 0x48, 0xe4, 0x5d, 0xce,
	0xa3, 0x80, 0xfa, 0x82, 0x4c, 0x8e, 0x7d, 0xe1, 0x2b, 0x57, 0xcd, 0xe1, 0xfb, 0x4c, 0xd0, 0x11,
	0xb8, 0x23, 0x9f, 0x09, 0xea, 0xc7, 0x53, 0xaa, 0xb7, 0x5e, 0x4e, 0x09, 0x3b, 0x27, 0xb7, 0xc2,
	0x90, 0x7e, 0xa7, 0x1e, 0xbd, 0x82, 0xcf, 0x8c, 0xce, 0x0e, 0x9c, 0x0a, 0xa1, 0x3b, 0xf5, 0x21,
	0x33, 0x59, 0x87, 0x31, 0x51, 0x1c, 0x8f, 0x56, 0x57, 0x73, 0x1a, 0x68, 0xfd, 0x29, 0x59, 0x9b,
	0x0e, 0xbf, 0xcf, 0x44, 0xf6, 0x64, 0x4c, 0xc2, 0x89, 0x9a, 0xae, 0xfa, 0x08, 0x24, 0x18, 0x7d,
	0x09, 0x0d, 0x93, 0xfc, 0xc8, 0x5f, 0xcf, 0x23, 0x7f, 0x62, 0x2e, 0xcb, 0x96, 0x54, 0xda, 0xd9,
	0x19, 0xba, 0x15, 0x6d, 0x67, 0x4b, 0x93, 0xdb, 0x0d, 0xa9, 0xdb, 0xdd, 0x84, 0xe2, 0xe9, 0xb0,
	0xdb, 0xe3, 0x6e, 0xb5, 0x9d, 0x97, 0xb7, 0x4c, 0x81, 0xce, 0xdf, 0x05, 0x68, 0x0c, 0xe9, 0xad,
	0xd9, 0xe7, 0x4c, 0x8e, 0xb3, 0x0e, 0x54, 0xba, 0x7c, 0xf6, 0x3a, 0x9c, 0xd3, 0x90, 0xa0, 0x7d,
	0xeb, 0x78, 0xc8, 0x57, 0xb4, 0xf5, 0xd0, 0x12, 0x75, 0x83, 0x19, 0xce, 0xa1, 0x23, 0xa8, 0xab,
	0xa2, 0x05, 0xa3, 0x4b, 0xf5, 0xd4, 0xda, 0xc7, 0x2a, 0x7e, 0x81, 0x33, 0x7d, 0x5f, 0x42, 0xdd,
	0x7a, 0x7e, 0xd1, 0xe7, 0x96, 0x51, 0xd6, 0xd3, 0x9c, 0x19, 0xe7, 0x5b, 0x28, 0x9f, 0x91, 0x77,
	0x2a, 0x0d, 0x74, 0xc7, 0xdc, 0xcf, 0xf4, 0xfb, 0x01, 0x60, 0x2c, 0x7c, 0x26, 0xb4, 0x67, 0xcb,
	0xb2, 0xb0, 0x5e, 0xa9, 0x4c, 0xef, 0xe7, 0x50, 0xd4, 0xf7, 0xea, 0x3e, 0x5b, 0xf6, 0x01, 0xf5,
	0x89, 0xd8, 0x7e, 0xbc, 0x33, 0xb8, 0x7e, 0x62, 0x89, 0xb6, 0x1c, 0x70, 0x0e, 0x0d, 0xa1, 0x96,
	0x9e, 0xee, 0xa8, 0x6d, 0xdb, 0xef, 0x0e, 0xfe, 0xd6, 0x27, 0x96, 0x45, 0x5a, 0x85, 0x73, 0xe8,
	0x12, 0x6a, 0xe9, 0xe9, 0xba, 0x15, 0x2e, 0x63, 0xf0, 0xb6, 0xbe, 0xd8, 0xda, 0x30, 0x7b, 0xa4,
	0xe2, 0x5c, 0xe7, 0xcf, 0x3c, 0xec, 0x6f, 0x0e, 0x5a, 0xdf, 0x17, 0xe4, 0x9d, 0xbf, 0x46, 0x67,
	0x50, 0xef, 0x4d, 0x49, 0x30, 0xdb, 0xfc, 0x1c, 0xec, 0x1d, 0xb7, 0x7f, 0x28, 0xad, 0x83, 0x0c,
	0x7d, 0xf2, 0x96, 0xcb, 0xb3, 0x04, 0x7d, 0x12, 0x0b, 0x3e, 0x18, 0xec, 0x8e, 0x96, 0xe1, 0x1c,
	0xfa, 0x0e, 0x60, 0x94, 0x34, 0xfe, 0x5e, 0xad, 0xfd, 0x51, 0x76, 0x24, 0x20, 0xf4, 0x2d, 0xd1,
	0x43, 0xda, 0x4e, 0xd8, 0xfe, 0xb0, 0x64, 0x06, 0xf8, 0xff, 0xb4, 0x74, 0x26, 0x33, 0xdd, 0x68,
	0xd1, 0xcf, 0x31, 0xd6, 0x1f, 0x99, 0x9d, 0xcc, 0x77, 0xfe, 0x38, 0xad, 0xaf, 0xb2, 0x92, 0xc9,
	0x30, 0xc4, 0xb9, 0xab, 0x92, 0xfa, 0xe3, 0x3f, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x08,
	0x71, 0xb7, 0xf8, 0x0b, 0x00, 0x00,
}
