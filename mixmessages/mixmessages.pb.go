// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (m *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(m, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

//
type RoundPublicKey struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Key                  []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoundPublicKey) Reset()         { *m = RoundPublicKey{} }
func (m *RoundPublicKey) String() string { return proto.CompactTextString(m) }
func (*RoundPublicKey) ProtoMessage()    {}
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *RoundPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundPublicKey.Unmarshal(m, b)
}
func (m *RoundPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundPublicKey.Marshal(b, m, deterministic)
}
func (m *RoundPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundPublicKey.Merge(m, src)
}
func (m *RoundPublicKey) XXX_Size() int {
	return xxx_messageInfo_RoundPublicKey.Size(m)
}
func (m *RoundPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_RoundPublicKey proto.InternalMessageInfo

func (m *RoundPublicKey) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *RoundPublicKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

//
type RoundMetrics struct {
	RoundMetricJSON      string   `protobuf:"bytes,1,opt,name=RoundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundMetrics) Reset()         { *m = RoundMetrics{} }
func (m *RoundMetrics) String() string { return proto.CompactTextString(m) }
func (*RoundMetrics) ProtoMessage()    {}
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *RoundMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundMetrics.Unmarshal(m, b)
}
func (m *RoundMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundMetrics.Marshal(b, m, deterministic)
}
func (m *RoundMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundMetrics.Merge(m, src)
}
func (m *RoundMetrics) XXX_Size() int {
	return xxx_messageInfo_RoundMetrics.Size(m)
}
func (m *RoundMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_RoundMetrics proto.InternalMessageInfo

func (m *RoundMetrics) GetRoundMetricJSON() string {
	if m != nil {
		return m.RoundMetricJSON
	}
	return ""
}

// Contains the complete set of messages/slots for a round
type Batch struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	Slots                []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Batch) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *Batch) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Used as part of header for streaming post phase
type BatchInfo struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize            uint32     `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchInfo) Reset()         { *m = BatchInfo{} }
func (m *BatchInfo) String() string { return proto.CompactTextString(m) }
func (*BatchInfo) ProtoMessage()    {}
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *BatchInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInfo.Unmarshal(m, b)
}
func (m *BatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInfo.Marshal(b, m, deterministic)
}
func (m *BatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInfo.Merge(m, src)
}
func (m *BatchInfo) XXX_Size() int {
	return xxx_messageInfo_BatchInfo.Size(m)
}
func (m *BatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInfo proto.InternalMessageInfo

func (m *BatchInfo) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *BatchInfo) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *BatchInfo) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// Used for collecting metrics on a round trip of the system
type RoundTripPing struct {
	Payload              *any.Any   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Round                *RoundInfo `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoundTripPing) Reset()         { *m = RoundTripPing{} }
func (m *RoundTripPing) String() string { return proto.CompactTextString(m) }
func (*RoundTripPing) ProtoMessage()    {}
func (*RoundTripPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *RoundTripPing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundTripPing.Unmarshal(m, b)
}
func (m *RoundTripPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundTripPing.Marshal(b, m, deterministic)
}
func (m *RoundTripPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundTripPing.Merge(m, src)
}
func (m *RoundTripPing) XXX_Size() int {
	return xxx_messageInfo_RoundTripPing.Size(m)
}
func (m *RoundTripPing) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundTripPing.DiscardUnknown(m)
}

var xxx_messageInfo_RoundTripPing proto.InternalMessageInfo

func (m *RoundTripPing) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *RoundTripPing) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

// Unified Gateway->Server polling message
type ServerPoll struct {
	Full                 *NDFHash `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial              *NDFHash `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate           uint64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
	GatewayVersion       string   `protobuf:"bytes,5,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	GatewayPort          uint32   `protobuf:"varint,6,opt,name=gatewayPort,proto3" json:"gatewayPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerPoll) Reset()         { *m = ServerPoll{} }
func (m *ServerPoll) String() string { return proto.CompactTextString(m) }
func (*ServerPoll) ProtoMessage()    {}
func (*ServerPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *ServerPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerPoll.Unmarshal(m, b)
}
func (m *ServerPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerPoll.Marshal(b, m, deterministic)
}
func (m *ServerPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPoll.Merge(m, src)
}
func (m *ServerPoll) XXX_Size() int {
	return xxx_messageInfo_ServerPoll.Size(m)
}
func (m *ServerPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPoll.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPoll proto.InternalMessageInfo

func (m *ServerPoll) GetFull() *NDFHash {
	if m != nil {
		return m.Full
	}
	return nil
}

func (m *ServerPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *ServerPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *ServerPoll) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ServerPoll) GetGatewayVersion() string {
	if m != nil {
		return m.GatewayVersion
	}
	return ""
}

func (m *ServerPoll) GetGatewayPort() uint32 {
	if m != nil {
		return m.GatewayPort
	}
	return 0
}

// Unified Gateway->Server polling response
type ServerPollResponse struct {
	Id                   []byte       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FullNDF              *NDF         `protobuf:"bytes,2,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`
	PartialNDF           *NDF         `protobuf:"bytes,3,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	Updates              []*RoundInfo `protobuf:"bytes,4,rep,name=Updates,proto3" json:"Updates,omitempty"`
	BatchRequest         *RoundInfo   `protobuf:"bytes,5,opt,name=BatchRequest,proto3" json:"BatchRequest,omitempty"`
	Slots                []*Slot      `protobuf:"bytes,6,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ServerPollResponse) Reset()         { *m = ServerPollResponse{} }
func (m *ServerPollResponse) String() string { return proto.CompactTextString(m) }
func (*ServerPollResponse) ProtoMessage()    {}
func (*ServerPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *ServerPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerPollResponse.Unmarshal(m, b)
}
func (m *ServerPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerPollResponse.Marshal(b, m, deterministic)
}
func (m *ServerPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPollResponse.Merge(m, src)
}
func (m *ServerPollResponse) XXX_Size() int {
	return xxx_messageInfo_ServerPollResponse.Size(m)
}
func (m *ServerPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPollResponse proto.InternalMessageInfo

func (m *ServerPollResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServerPollResponse) GetFullNDF() *NDF {
	if m != nil {
		return m.FullNDF
	}
	return nil
}

func (m *ServerPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *ServerPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ServerPollResponse) GetBatchRequest() *RoundInfo {
	if m != nil {
		return m.BatchRequest
	}
	return nil
}

func (m *ServerPollResponse) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// ClientRequest message for clients to poll new CMIX messages
type ClientRequest struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LastMessageID        string   `protobuf:"bytes,2,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientRequest) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *IDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDList.Unmarshal(m, b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return xxx_messageInfo_IDList.Size(m)
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func (m *IDList) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Represents a single encrypted message in a batch
type Slot struct {
	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	PayloadA             []byte   `protobuf:"bytes,8,opt,name=PayloadA,proto3" json:"PayloadA,omitempty"`
	PayloadB             []byte   `protobuf:"bytes,9,opt,name=PayloadB,proto3" json:"PayloadB,omitempty"`
	Salt                 []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Slot) GetEncryptedPayloadAKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadAKeys
	}
	return nil
}

func (m *Slot) GetEncryptedPayloadBKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadBKeys
	}
	return nil
}

func (m *Slot) GetPartialPayloadACypherText() []byte {
	if m != nil {
		return m.PartialPayloadACypherText
	}
	return nil
}

func (m *Slot) GetPartialPayloadBCypherText() []byte {
	if m != nil {
		return m.PartialPayloadBCypherText
	}
	return nil
}

func (m *Slot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *Slot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *Slot) GetPayloadA() []byte {
	if m != nil {
		return m.PayloadA
	}
	return nil
}

func (m *Slot) GetPayloadB() []byte {
	if m != nil {
		return m.PayloadB
	}
	return nil
}

func (m *Slot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Slot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

// Unified Client->Gateway polling message
type GatewayPoll struct {
	Partial              *NDFHash `protobuf:"bytes,1,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate           uint64   `protobuf:"varint,2,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	LastMessageID        string   `protobuf:"bytes,3,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayPoll) Reset()         { *m = GatewayPoll{} }
func (m *GatewayPoll) String() string { return proto.CompactTextString(m) }
func (*GatewayPoll) ProtoMessage()    {}
func (*GatewayPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *GatewayPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayPoll.Unmarshal(m, b)
}
func (m *GatewayPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayPoll.Marshal(b, m, deterministic)
}
func (m *GatewayPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPoll.Merge(m, src)
}
func (m *GatewayPoll) XXX_Size() int {
	return xxx_messageInfo_GatewayPoll.Size(m)
}
func (m *GatewayPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPoll.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPoll proto.InternalMessageInfo

func (m *GatewayPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *GatewayPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *GatewayPoll) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

// Unified Client->Gateway polling response
type GatewayPollResponse struct {
	PartialNDF           *NDF         `protobuf:"bytes,1,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	LastRound            *RoundInfo   `protobuf:"bytes,2,opt,name=LastRound,proto3" json:"LastRound,omitempty"`
	Updates              []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`
	NewMessageIDs        []string     `protobuf:"bytes,4,rep,name=NewMessageIDs,proto3" json:"NewMessageIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GatewayPollResponse) Reset()         { *m = GatewayPollResponse{} }
func (m *GatewayPollResponse) String() string { return proto.CompactTextString(m) }
func (*GatewayPollResponse) ProtoMessage()    {}
func (*GatewayPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *GatewayPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayPollResponse.Unmarshal(m, b)
}
func (m *GatewayPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayPollResponse.Marshal(b, m, deterministic)
}
func (m *GatewayPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPollResponse.Merge(m, src)
}
func (m *GatewayPollResponse) XXX_Size() int {
	return xxx_messageInfo_GatewayPollResponse.Size(m)
}
func (m *GatewayPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPollResponse proto.InternalMessageInfo

func (m *GatewayPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *GatewayPollResponse) GetLastRound() *RoundInfo {
	if m != nil {
		return m.LastRound
	}
	return nil
}

func (m *GatewayPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *GatewayPollResponse) GetNewMessageIDs() []string {
	if m != nil {
		return m.NewMessageIDs
	}
	return nil
}

// Server -> Permissioning message for whether a node has been registered
type RegisteredNodeConfirmation struct {
	IsRegistered         bool     `protobuf:"varint,1,opt,name=IsRegistered,proto3" json:"IsRegistered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredNodeConfirmation) Reset()         { *m = RegisteredNodeConfirmation{} }
func (m *RegisteredNodeConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodeConfirmation) ProtoMessage()    {}
func (*RegisteredNodeConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *RegisteredNodeConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredNodeConfirmation.Unmarshal(m, b)
}
func (m *RegisteredNodeConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredNodeConfirmation.Marshal(b, m, deterministic)
}
func (m *RegisteredNodeConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodeConfirmation.Merge(m, src)
}
func (m *RegisteredNodeConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegisteredNodeConfirmation.Size(m)
}
func (m *RegisteredNodeConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodeConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodeConfirmation proto.InternalMessageInfo

func (m *RegisteredNodeConfirmation) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type RegisteredNodeCheck struct {
	RegCode              string   `protobuf:"bytes,1,opt,name=RegCode,proto3" json:"RegCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredNodeCheck) Reset()         { *m = RegisteredNodeCheck{} }
func (m *RegisteredNodeCheck) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodeCheck) ProtoMessage()    {}
func (*RegisteredNodeCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *RegisteredNodeCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredNodeCheck.Unmarshal(m, b)
}
func (m *RegisteredNodeCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredNodeCheck.Marshal(b, m, deterministic)
}
func (m *RegisteredNodeCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodeCheck.Merge(m, src)
}
func (m *RegisteredNodeCheck) XXX_Size() int {
	return xxx_messageInfo_RegisteredNodeCheck.Size(m)
}
func (m *RegisteredNodeCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodeCheck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodeCheck proto.InternalMessageInfo

func (m *RegisteredNodeCheck) GetRegCode() string {
	if m != nil {
		return m.RegCode
	}
	return ""
}

//The ndf Hash used to compare ndf on permissioning and client
type NDFHash struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NDFHash) Reset()         { *m = NDFHash{} }
func (m *NDFHash) String() string { return proto.CompactTextString(m) }
func (*NDFHash) ProtoMessage()    {}
func (*NDFHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *NDFHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NDFHash.Unmarshal(m, b)
}
func (m *NDFHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NDFHash.Marshal(b, m, deterministic)
}
func (m *NDFHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NDFHash.Merge(m, src)
}
func (m *NDFHash) XXX_Size() int {
	return xxx_messageInfo_NDFHash.Size(m)
}
func (m *NDFHash) XXX_DiscardUnknown() {
	xxx_messageInfo_NDFHash.DiscardUnknown(m)
}

var xxx_messageInfo_NDFHash proto.InternalMessageInfo

func (m *NDFHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// The Network Definition File is defined as a
// JSON structure in primitives/ndf. Can be provided in a
// "complete" and "incomplete" format. An incomplete
// NDF is provided to level 4 (ie clients) to protect the inner levels
type NDF struct {
	Ndf                  []byte        `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
	Signature            *RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NDF) Reset()         { *m = NDF{} }
func (m *NDF) String() string { return proto.CompactTextString(m) }
func (*NDF) ProtoMessage()    {}
func (*NDF) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *NDF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NDF.Unmarshal(m, b)
}
func (m *NDF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NDF.Marshal(b, m, deterministic)
}
func (m *NDF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NDF.Merge(m, src)
}
func (m *NDF) XXX_Size() int {
	return xxx_messageInfo_NDF.Size(m)
}
func (m *NDF) XXX_DiscardUnknown() {
	xxx_messageInfo_NDF.DiscardUnknown(m)
}

var xxx_messageInfo_NDF proto.InternalMessageInfo

func (m *NDF) GetNdf() []byte {
	if m != nil {
		return m.Ndf
	}
	return nil
}

func (m *NDF) GetSignature() *RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// NodeRegistration contains information to register a node.
// Note: this includes the desired server and gateway addresses.
// The registration server is free to ignore these addresses and
// derive the address from the network connection.
type NodeRegistration struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ServerTlsCert        string   `protobuf:"bytes,2,opt,name=ServerTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	ServerAddress        string   `protobuf:"bytes,3,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	ServerPort           uint32   `protobuf:"varint,4,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	GatewayTlsCert       string   `protobuf:"bytes,5,opt,name=GatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	GatewayAddress       string   `protobuf:"bytes,6,opt,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	GatewayPort          uint32   `protobuf:"varint,7,opt,name=GatewayPort,proto3" json:"GatewayPort,omitempty"`
	RegistrationCode     string   `protobuf:"bytes,8,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRegistration) Reset()         { *m = NodeRegistration{} }
func (m *NodeRegistration) String() string { return proto.CompactTextString(m) }
func (*NodeRegistration) ProtoMessage()    {}
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *NodeRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRegistration.Unmarshal(m, b)
}
func (m *NodeRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRegistration.Marshal(b, m, deterministic)
}
func (m *NodeRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRegistration.Merge(m, src)
}
func (m *NodeRegistration) XXX_Size() int {
	return xxx_messageInfo_NodeRegistration.Size(m)
}
func (m *NodeRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRegistration proto.InternalMessageInfo

func (m *NodeRegistration) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *NodeRegistration) GetServerTlsCert() string {
	if m != nil {
		return m.ServerTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *NodeRegistration) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *NodeRegistration) GetGatewayTlsCert() string {
	if m != nil {
		return m.GatewayTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *NodeRegistration) GetGatewayPort() uint32 {
	if m != nil {
		return m.GatewayPort
	}
	return 0
}

func (m *NodeRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

// RSASignature is a digital signature for the RSA algorithm
type RSASignature struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RSASignature) Reset()         { *m = RSASignature{} }
func (m *RSASignature) String() string { return proto.CompactTextString(m) }
func (*RSASignature) ProtoMessage()    {}
func (*RSASignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *RSASignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RSASignature.Unmarshal(m, b)
}
func (m *RSASignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RSASignature.Marshal(b, m, deterministic)
}
func (m *RSASignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSASignature.Merge(m, src)
}
func (m *RSASignature) XXX_Size() int {
	return xxx_messageInfo_RSASignature.Size(m)
}
func (m *RSASignature) XXX_DiscardUnknown() {
	xxx_messageInfo_RSASignature.DiscardUnknown(m)
}

var xxx_messageInfo_RSASignature proto.InternalMessageInfo

func (m *RSASignature) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *RSASignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// UserRegistration message to initialize registration process
type UserRegistration struct {
	RegistrationCode     string   `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	ClientRSAPubKey      string   `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRegistration) Reset()         { *m = UserRegistration{} }
func (m *UserRegistration) String() string { return proto.CompactTextString(m) }
func (*UserRegistration) ProtoMessage()    {}
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{19}
}

func (m *UserRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistration.Unmarshal(m, b)
}
func (m *UserRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistration.Marshal(b, m, deterministic)
}
func (m *UserRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistration.Merge(m, src)
}
func (m *UserRegistration) XXX_Size() int {
	return xxx_messageInfo_UserRegistration.Size(m)
}
func (m *UserRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistration proto.InternalMessageInfo

func (m *UserRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *UserRegistration) GetClientRSAPubKey() string {
	if m != nil {
		return m.ClientRSAPubKey
	}
	return ""
}

// UserRegistrationConfirmation to confirm registration with users
type UserRegistrationConfirmation struct {
	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer *RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistrationConfirmation) Reset()         { *m = UserRegistrationConfirmation{} }
func (m *UserRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*UserRegistrationConfirmation) ProtoMessage()    {}
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{20}
}

func (m *UserRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistrationConfirmation.Unmarshal(m, b)
}
func (m *UserRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *UserRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistrationConfirmation.Merge(m, src)
}
func (m *UserRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_UserRegistrationConfirmation.Size(m)
}
func (m *UserRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistrationConfirmation proto.InternalMessageInfo

func (m *UserRegistrationConfirmation) GetClientSignedByServer() *RSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *UserRegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// ClientVersion contains a version string for the client
type ClientVersion struct {
	Version              string   `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientVersion) Reset()         { *m = ClientVersion{} }
func (m *ClientVersion) String() string { return proto.CompactTextString(m) }
func (*ClientVersion) ProtoMessage()    {}
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{21}
}

func (m *ClientVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientVersion.Unmarshal(m, b)
}
func (m *ClientVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientVersion.Marshal(b, m, deterministic)
}
func (m *ClientVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersion.Merge(m, src)
}
func (m *ClientVersion) XXX_Size() int {
	return xxx_messageInfo_ClientVersion.Size(m)
}
func (m *ClientVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersion proto.InternalMessageInfo

func (m *ClientVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// NonceRequest message to request nonce from client to server
type NonceRequest struct {
	Salt                 []byte        `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ClientRSAPubKey      string        `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
	ClientSignedByServer *RSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	ClientDHPubKey       []byte        `protobuf:"bytes,4,opt,name=ClientDHPubKey,proto3" json:"ClientDHPubKey,omitempty"`
	RequestSignature     *RSASignature `protobuf:"bytes,5,opt,name=RequestSignature,proto3" json:"RequestSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NonceRequest) Reset()         { *m = NonceRequest{} }
func (m *NonceRequest) String() string { return proto.CompactTextString(m) }
func (*NonceRequest) ProtoMessage()    {}
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{22}
}

func (m *NonceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NonceRequest.Unmarshal(m, b)
}
func (m *NonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NonceRequest.Marshal(b, m, deterministic)
}
func (m *NonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceRequest.Merge(m, src)
}
func (m *NonceRequest) XXX_Size() int {
	return xxx_messageInfo_NonceRequest.Size(m)
}
func (m *NonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NonceRequest proto.InternalMessageInfo

func (m *NonceRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *NonceRequest) GetClientRSAPubKey() string {
	if m != nil {
		return m.ClientRSAPubKey
	}
	return ""
}

func (m *NonceRequest) GetClientSignedByServer() *RSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *NonceRequest) GetClientDHPubKey() []byte {
	if m != nil {
		return m.ClientDHPubKey
	}
	return nil
}

func (m *NonceRequest) GetRequestSignature() *RSASignature {
	if m != nil {
		return m.RequestSignature
	}
	return nil
}

// Nonce message to reply to client from server
type Nonce struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	DHPubKey             []byte   `protobuf:"bytes,2,opt,name=DHPubKey,proto3" json:"DHPubKey,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{23}
}

func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Nonce) GetDHPubKey() []byte {
	if m != nil {
		return m.DHPubKey
	}
	return nil
}

func (m *Nonce) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// RequestRegistrationConfirmation returning proof of registration
type RequestRegistrationConfirmation struct {
	UserID               []byte        `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	NonceSignedByClient  *RSASignature `protobuf:"bytes,2,opt,name=NonceSignedByClient,proto3" json:"NonceSignedByClient,omitempty"`
	Error                string        `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RequestRegistrationConfirmation) Reset()         { *m = RequestRegistrationConfirmation{} }
func (m *RequestRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RequestRegistrationConfirmation) ProtoMessage()    {}
func (*RequestRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{24}
}

func (m *RequestRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestRegistrationConfirmation.Unmarshal(m, b)
}
func (m *RequestRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RequestRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegistrationConfirmation.Merge(m, src)
}
func (m *RequestRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RequestRegistrationConfirmation.Size(m)
}
func (m *RequestRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegistrationConfirmation proto.InternalMessageInfo

func (m *RequestRegistrationConfirmation) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *RequestRegistrationConfirmation) GetNonceSignedByClient() *RSASignature {
	if m != nil {
		return m.NonceSignedByClient
	}
	return nil
}

func (m *RequestRegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// RegistrationConfirmation returning proof of registration
type RegistrationConfirmation struct {
	ClientSignedByServer *RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{25}
}

func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(m, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetClientSignedByServer() *RSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *RegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Unified Server->Permissioning polling message
type PermissioningPoll struct {
	Full                 *NDFHash    `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial              *NDFHash    `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate           uint64      `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Activity             uint32      `protobuf:"varint,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Error                *RoundError `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
	GatewayAddress       string      `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
	ServerPort           uint32      `protobuf:"varint,7,opt,name=serverPort,proto3" json:"serverPort,omitempty"`
	ServerVersion        string      `protobuf:"bytes,8,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	GatewayVersion       string      `protobuf:"bytes,9,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PermissioningPoll) Reset()         { *m = PermissioningPoll{} }
func (m *PermissioningPoll) String() string { return proto.CompactTextString(m) }
func (*PermissioningPoll) ProtoMessage()    {}
func (*PermissioningPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{26}
}

func (m *PermissioningPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissioningPoll.Unmarshal(m, b)
}
func (m *PermissioningPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissioningPoll.Marshal(b, m, deterministic)
}
func (m *PermissioningPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissioningPoll.Merge(m, src)
}
func (m *PermissioningPoll) XXX_Size() int {
	return xxx_messageInfo_PermissioningPoll.Size(m)
}
func (m *PermissioningPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissioningPoll.DiscardUnknown(m)
}

var xxx_messageInfo_PermissioningPoll proto.InternalMessageInfo

func (m *PermissioningPoll) GetFull() *NDFHash {
	if m != nil {
		return m.Full
	}
	return nil
}

func (m *PermissioningPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *PermissioningPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *PermissioningPoll) GetActivity() uint32 {
	if m != nil {
		return m.Activity
	}
	return 0
}

func (m *PermissioningPoll) GetError() *RoundError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PermissioningPoll) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *PermissioningPoll) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *PermissioningPoll) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *PermissioningPoll) GetGatewayVersion() string {
	if m != nil {
		return m.GatewayVersion
	}
	return ""
}

// Unified Server->Permissioning polling response
type PermissionPollResponse struct {
	FullNDF              *NDF         `protobuf:"bytes,1,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`
	PartialNDF           *NDF         `protobuf:"bytes,2,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	Updates              []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PermissionPollResponse) Reset()         { *m = PermissionPollResponse{} }
func (m *PermissionPollResponse) String() string { return proto.CompactTextString(m) }
func (*PermissionPollResponse) ProtoMessage()    {}
func (*PermissionPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{27}
}

func (m *PermissionPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionPollResponse.Unmarshal(m, b)
}
func (m *PermissionPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionPollResponse.Marshal(b, m, deterministic)
}
func (m *PermissionPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionPollResponse.Merge(m, src)
}
func (m *PermissionPollResponse) XXX_Size() int {
	return xxx_messageInfo_PermissionPollResponse.Size(m)
}
func (m *PermissionPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionPollResponse proto.InternalMessageInfo

func (m *PermissionPollResponse) GetFullNDF() *NDF {
	if m != nil {
		return m.FullNDF
	}
	return nil
}

func (m *PermissionPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *PermissionPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

// Registration token to be associated with the client
type NotificationToken struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationToken) Reset()         { *m = NotificationToken{} }
func (m *NotificationToken) String() string { return proto.CompactTextString(m) }
func (*NotificationToken) ProtoMessage()    {}
func (*NotificationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{28}
}

func (m *NotificationToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationToken.Unmarshal(m, b)
}
func (m *NotificationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationToken.Marshal(b, m, deterministic)
}
func (m *NotificationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationToken.Merge(m, src)
}
func (m *NotificationToken) XXX_Size() int {
	return xxx_messageInfo_NotificationToken.Size(m)
}
func (m *NotificationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationToken.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationToken proto.InternalMessageInfo

func (m *NotificationToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

// The list of user IDS for notification polling
type UserIdList struct {
	IDs                  [][]byte `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserIdList) Reset()         { *m = UserIdList{} }
func (m *UserIdList) String() string { return proto.CompactTextString(m) }
func (*UserIdList) ProtoMessage()    {}
func (*UserIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{29}
}

func (m *UserIdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserIdList.Unmarshal(m, b)
}
func (m *UserIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserIdList.Marshal(b, m, deterministic)
}
func (m *UserIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdList.Merge(m, src)
}
func (m *UserIdList) XXX_Size() int {
	return xxx_messageInfo_UserIdList.Size(m)
}
func (m *UserIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdList.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdList proto.InternalMessageInfo

func (m *UserIdList) GetIDs() [][]byte {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Generic response message providing an error message from remote servers
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{30}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Empty message for requesting action from any type of server
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{31}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// Wrapper for authenticated messages that also ensure integrity
type AuthenticatedMessage struct {
	ID                   []byte    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Signature            []byte    `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Token                []byte    `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Client               *ClientID `protobuf:"bytes,4,opt,name=Client,proto3" json:"Client,omitempty"`
	Message              *any.Any  `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AuthenticatedMessage) Reset()         { *m = AuthenticatedMessage{} }
func (m *AuthenticatedMessage) String() string { return proto.CompactTextString(m) }
func (*AuthenticatedMessage) ProtoMessage()    {}
func (*AuthenticatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{32}
}

func (m *AuthenticatedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticatedMessage.Unmarshal(m, b)
}
func (m *AuthenticatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticatedMessage.Marshal(b, m, deterministic)
}
func (m *AuthenticatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticatedMessage.Merge(m, src)
}
func (m *AuthenticatedMessage) XXX_Size() int {
	return xxx_messageInfo_AuthenticatedMessage.Size(m)
}
func (m *AuthenticatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticatedMessage proto.InternalMessageInfo

func (m *AuthenticatedMessage) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *AuthenticatedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AuthenticatedMessage) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *AuthenticatedMessage) GetClient() *ClientID {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *AuthenticatedMessage) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

// Message used for assembly of Client IDs in the system
type ClientID struct {
	Salt                 []byte   `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	PublicKey            string   `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientID) Reset()         { *m = ClientID{} }
func (m *ClientID) String() string { return proto.CompactTextString(m) }
func (*ClientID) ProtoMessage()    {}
func (*ClientID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{33}
}

func (m *ClientID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientID.Unmarshal(m, b)
}
func (m *ClientID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientID.Marshal(b, m, deterministic)
}
func (m *ClientID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientID.Merge(m, src)
}
func (m *ClientID) XXX_Size() int {
	return xxx_messageInfo_ClientID.Size(m)
}
func (m *ClientID) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientID.DiscardUnknown(m)
}

var xxx_messageInfo_ClientID proto.InternalMessageInfo

func (m *ClientID) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *ClientID) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// Provides a token to establish reverse identity to any type of client
type AssignToken struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignToken) Reset()         { *m = AssignToken{} }
func (m *AssignToken) String() string { return proto.CompactTextString(m) }
func (*AssignToken) ProtoMessage()    {}
func (*AssignToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{34}
}

func (m *AssignToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignToken.Unmarshal(m, b)
}
func (m *AssignToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignToken.Marshal(b, m, deterministic)
}
func (m *AssignToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignToken.Merge(m, src)
}
func (m *AssignToken) XXX_Size() int {
	return xxx_messageInfo_AssignToken.Size(m)
}
func (m *AssignToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignToken.DiscardUnknown(m)
}

var xxx_messageInfo_AssignToken proto.InternalMessageInfo

func (m *AssignToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

// Describes a round
type RoundInfo struct {
	ID                   uint64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateID             uint64        `protobuf:"varint,2,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	State                uint32        `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
	BatchSize            uint32        `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Topology             [][]byte      `protobuf:"bytes,5,rep,name=Topology,proto3" json:"Topology,omitempty"`
	Timestamps           []uint64      `protobuf:"varint,6,rep,packed,name=Timestamps,proto3" json:"Timestamps,omitempty"`
	Errors               []*RoundError `protobuf:"bytes,7,rep,name=Errors,proto3" json:"Errors,omitempty"`
	Signature            *RSASignature `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{35}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RoundInfo) GetUpdateID() uint64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *RoundInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RoundInfo) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *RoundInfo) GetTopology() [][]byte {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *RoundInfo) GetTimestamps() []uint64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *RoundInfo) GetErrors() []*RoundError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *RoundInfo) GetSignature() *RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// RoundError will be used to describe a round error
// Passed along to gateways (level 2) and clients (level 3)
type RoundError struct {
	Id                   uint64        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	NodeId               []byte        `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Error                string        `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Signature            *RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RoundError) Reset()         { *m = RoundError{} }
func (m *RoundError) String() string { return proto.CompactTextString(m) }
func (*RoundError) ProtoMessage()    {}
func (*RoundError) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{36}
}

func (m *RoundError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundError.Unmarshal(m, b)
}
func (m *RoundError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundError.Marshal(b, m, deterministic)
}
func (m *RoundError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundError.Merge(m, src)
}
func (m *RoundError) XXX_Size() int {
	return xxx_messageInfo_RoundError.Size(m)
}
func (m *RoundError) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundError.DiscardUnknown(m)
}

var xxx_messageInfo_RoundError proto.InternalMessageInfo

func (m *RoundError) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoundError) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RoundError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RoundError) GetSignature() *RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*RoundPublicKey)(nil), "mixmessages.RoundPublicKey")
	proto.RegisterType((*RoundMetrics)(nil), "mixmessages.RoundMetrics")
	proto.RegisterType((*Batch)(nil), "mixmessages.Batch")
	proto.RegisterType((*BatchInfo)(nil), "mixmessages.BatchInfo")
	proto.RegisterType((*RoundTripPing)(nil), "mixmessages.RoundTripPing")
	proto.RegisterType((*ServerPoll)(nil), "mixmessages.ServerPoll")
	proto.RegisterType((*ServerPollResponse)(nil), "mixmessages.ServerPollResponse")
	proto.RegisterType((*ClientRequest)(nil), "mixmessages.ClientRequest")
	proto.RegisterType((*IDList)(nil), "mixmessages.IDList")
	proto.RegisterType((*Slot)(nil), "mixmessages.Slot")
	proto.RegisterType((*GatewayPoll)(nil), "mixmessages.GatewayPoll")
	proto.RegisterType((*GatewayPollResponse)(nil), "mixmessages.GatewayPollResponse")
	proto.RegisterType((*RegisteredNodeConfirmation)(nil), "mixmessages.RegisteredNodeConfirmation")
	proto.RegisterType((*RegisteredNodeCheck)(nil), "mixmessages.RegisteredNodeCheck")
	proto.RegisterType((*NDFHash)(nil), "mixmessages.NDFHash")
	proto.RegisterType((*NDF)(nil), "mixmessages.NDF")
	proto.RegisterType((*NodeRegistration)(nil), "mixmessages.NodeRegistration")
	proto.RegisterType((*RSASignature)(nil), "mixmessages.RSASignature")
	proto.RegisterType((*UserRegistration)(nil), "mixmessages.UserRegistration")
	proto.RegisterType((*UserRegistrationConfirmation)(nil), "mixmessages.UserRegistrationConfirmation")
	proto.RegisterType((*ClientVersion)(nil), "mixmessages.ClientVersion")
	proto.RegisterType((*NonceRequest)(nil), "mixmessages.NonceRequest")
	proto.RegisterType((*Nonce)(nil), "mixmessages.Nonce")
	proto.RegisterType((*RequestRegistrationConfirmation)(nil), "mixmessages.RequestRegistrationConfirmation")
	proto.RegisterType((*RegistrationConfirmation)(nil), "mixmessages.RegistrationConfirmation")
	proto.RegisterType((*PermissioningPoll)(nil), "mixmessages.PermissioningPoll")
	proto.RegisterType((*PermissionPollResponse)(nil), "mixmessages.PermissionPollResponse")
	proto.RegisterType((*NotificationToken)(nil), "mixmessages.NotificationToken")
	proto.RegisterType((*UserIdList)(nil), "mixmessages.UserIdList")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*AuthenticatedMessage)(nil), "mixmessages.AuthenticatedMessage")
	proto.RegisterType((*ClientID)(nil), "mixmessages.ClientID")
	proto.RegisterType((*AssignToken)(nil), "mixmessages.AssignToken")
	proto.RegisterType((*RoundInfo)(nil), "mixmessages.RoundInfo")
	proto.RegisterType((*RoundError)(nil), "mixmessages.RoundError")
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5) }

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 2082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6e, 0x23, 0xc7,
	0x11, 0xe6, 0x90, 0x14, 0x29, 0x96, 0x28, 0xad, 0xd4, 0x92, 0xe5, 0x11, 0xad, 0xb5, 0x95, 0xb6,
	0x63, 0x6b, 0x0d, 0x5b, 0x6b, 0xc8, 0x06, 0x12, 0x38, 0x36, 0xb2, 0xa4, 0xb8, 0x92, 0xb9, 0x5a,
	0x71, 0x99, 0xa1, 0x36, 0x01, 0x72, 0xca, 0x2c, 0xa7, 0x45, 0x0d, 0x34, 0x9c, 0x61, 0xa6, 0x9b,
	0xde, 0x65, 0x10, 0x20, 0x07, 0x23, 0x97, 0xdc, 0x02, 0xe4, 0x12, 0x20, 0x0f, 0x90, 0x83, 0x5f,
	0xc0, 0xf7, 0xbc, 0x42, 0x5e, 0x21, 0xc7, 0xe4, 0x15, 0x82, 0xfe, 0x19, 0x4e, 0x37, 0x39, 0xd4,
	0x52, 0x84, 0x81, 0x3d, 0xcd, 0x74, 0x75, 0x55, 0x75, 0x75, 0xd5, 0x57, 0xd5, 0xd5, 0x0d, 0x5b,
	0x03, 0xff, 0xd5, 0x80, 0x50, 0xea, 0xf6, 0x09, 0x3d, 0x1a, 0xc6, 0x11, 0x8b, 0xd0, 0x9a, 0x46,
	0xaa, 0xed, 0xf5, 0xa3, 0xa8, 0x1f, 0x90, 0x87, 0x62, 0xea, 0xc5, 0xe8, 0xea, 0xa1, 0x1b, 0x8e,
	0x25, 0x1f, 0xfe, 0x05, 0xdc, 0x73, 0xa2, 0x51, 0xe8, 0x35, 0x46, 0x57, 0x57, 0x24, 0x6e, 0x85,
	0x57, 0x11, 0x3a, 0x34, 0x48, 0x5d, 0xff, 0x0f, 0xc4, 0xb6, 0x0e, 0xac, 0xc3, 0x75, 0x67, 0x9a,
	0x8c, 0x3b, 0xb0, 0x21, 0x48, 0x9d, 0xd1, 0x8b, 0xc0, 0xef, 0x9d, 0x93, 0x31, 0xfa, 0x04, 0x56,
	0x04, 0x45, 0x48, 0xac, 0x1d, 0xef, 0x1e, 0xe9, 0x96, 0x89, 0x19, 0xbe, 0x84, 0x23, 0x99, 0xd0,
	0x26, 0x14, 0xce, 0xc9, 0xd8, 0xce, 0x1f, 0x58, 0x87, 0x55, 0x87, 0xff, 0xe2, 0x9f, 0x43, 0x55,
	0x4c, 0x5d, 0x10, 0x16, 0xfb, 0x3d, 0x3a, 0xb1, 0x45, 0x8e, 0x9f, 0x74, 0x9f, 0xb5, 0x85, 0xe6,
	0x8a, 0x33, 0x4d, 0xc6, 0x7f, 0x84, 0x95, 0x86, 0xcb, 0x7a, 0xd7, 0x77, 0x34, 0x61, 0x1f, 0x2a,
	0xa7, 0x71, 0x34, 0xe8, 0x5c, 0xbb, 0x94, 0x08, 0x43, 0x56, 0x9c, 0x94, 0x80, 0x3e, 0x82, 0x15,
	0x1a, 0x44, 0x8c, 0xda, 0x85, 0x83, 0xc2, 0xe1, 0xda, 0xf1, 0x96, 0xa1, 0xab, 0x1b, 0x44, 0xcc,
	0x91, 0xf3, 0x78, 0x04, 0x15, 0xb1, 0xba, 0x70, 0xe0, 0x8f, 0x69, 0xc1, 0xbe, 0x52, 0x2c, 0xc2,
	0x50, 0x10, 0x61, 0x48, 0x09, 0x78, 0x00, 0xeb, 0x42, 0xc9, 0x65, 0xec, 0x0f, 0x3b, 0x7e, 0xd8,
	0x47, 0x47, 0x50, 0xee, 0xb8, 0xe3, 0x20, 0x72, 0x93, 0xc5, 0x77, 0x8e, 0x64, 0xec, 0x8f, 0x92,
	0xd8, 0x1f, 0xd5, 0xc3, 0xb1, 0x93, 0x30, 0xa5, 0xa6, 0xe6, 0x17, 0x30, 0x15, 0xff, 0xc7, 0x02,
	0xe8, 0x92, 0xf8, 0x5b, 0x12, 0x77, 0xa2, 0x20, 0x40, 0x87, 0x50, 0x3c, 0x1d, 0x05, 0xc1, 0x64,
	0x25, 0x5d, 0xb6, 0xdd, 0x3c, 0xfd, 0xc6, 0xa5, 0xd7, 0x8e, 0xe0, 0x90, 0x66, 0xc5, 0xcc, 0x77,
	0x03, 0xb5, 0x50, 0x36, 0x73, 0xc2, 0x84, 0xde, 0x05, 0x78, 0xea, 0x52, 0xf6, 0x7c, 0xe8, 0xb9,
	0x4c, 0x6e, 0xbb, 0xe8, 0x68, 0x14, 0xb4, 0x03, 0x2b, 0x8f, 0xe3, 0x38, 0x8a, 0xed, 0xa2, 0x00,
	0x83, 0x1c, 0xa0, 0x0f, 0x61, 0xa3, 0xef, 0x32, 0xf2, 0xd2, 0x1d, 0xff, 0x9a, 0xc4, 0xd4, 0x8f,
	0x42, 0x7b, 0x45, 0x4c, 0x4f, 0x51, 0xd1, 0x01, 0xac, 0x29, 0x4a, 0x27, 0x8a, 0x99, 0x5d, 0x12,
	0x5e, 0xd5, 0x49, 0xf8, 0xef, 0x79, 0x40, 0xe9, 0x46, 0x1d, 0x42, 0x87, 0x51, 0x48, 0x09, 0xda,
	0x80, 0x7c, 0x4b, 0x3a, 0xb6, 0xea, 0xe4, 0x5b, 0x1e, 0xfa, 0x18, 0xca, 0x7c, 0x7b, 0xed, 0xe6,
	0xa9, 0xda, 0xd6, 0xe6, 0xf4, 0xb6, 0x9c, 0x84, 0x01, 0x7d, 0x06, 0xa0, 0x76, 0xc7, 0xd9, 0x0b,
	0x73, 0xd8, 0x35, 0x1e, 0xf4, 0x19, 0x94, 0xe5, 0x76, 0xa9, 0x5d, 0x14, 0xf0, 0x9b, 0x17, 0x9d,
	0x84, 0x0d, 0x7d, 0x09, 0x55, 0x81, 0x0d, 0x87, 0xfc, 0x7e, 0x44, 0x28, 0x13, 0xdb, 0x9f, 0x2f,
	0x66, 0xf0, 0xa6, 0x50, 0x2f, 0xbd, 0x06, 0xea, 0x17, 0xb0, 0x7e, 0x12, 0xf8, 0x24, 0x64, 0x89,
	0xe4, 0x2e, 0x94, 0x9e, 0x53, 0x12, 0xb7, 0x9a, 0xca, 0x33, 0x6a, 0x84, 0x3e, 0x80, 0x75, 0x1e,
	0xb2, 0x0b, 0xa9, 0xa4, 0xd5, 0x14, 0x3e, 0xaa, 0x38, 0x26, 0x11, 0xd7, 0xa0, 0xd4, 0x6a, 0x3e,
	0xf5, 0x29, 0xe3, 0xd5, 0xa0, 0xd5, 0xa4, 0xb6, 0x75, 0x50, 0x38, 0xac, 0x38, 0xfc, 0x17, 0xff,
	0xab, 0x00, 0x45, 0xbe, 0x34, 0x8f, 0x77, 0x2b, 0xf4, 0xc8, 0x2b, 0x55, 0x88, 0xe4, 0x00, 0x7d,
	0x01, 0x6f, 0x3d, 0x0e, 0x7b, 0xf1, 0x78, 0xc8, 0x88, 0xa7, 0x00, 0x5d, 0x3f, 0x27, 0x63, 0xaa,
	0x0a, 0x4a, 0xf6, 0x64, 0x96, 0x54, 0x43, 0x48, 0x15, 0xb2, 0xa5, 0xc4, 0x24, 0xfa, 0x0a, 0xf6,
	0x54, 0x68, 0x12, 0x65, 0x27, 0xe3, 0xe1, 0x35, 0x89, 0x2f, 0xc9, 0x2b, 0x26, 0x50, 0x58, 0x75,
	0xe6, 0x33, 0xcc, 0x4a, 0x37, 0x34, 0xe9, 0x95, 0x2c, 0x69, 0x8d, 0x01, 0x3d, 0x82, 0x77, 0xd4,
	0xa4, 0x56, 0x6d, 0xe5, 0x3c, 0x2f, 0x9f, 0x25, 0x21, 0x7f, 0x1b, 0x0b, 0xaa, 0xc1, 0x6a, 0x97,
	0x84, 0x9e, 0x08, 0x52, 0x59, 0xb0, 0x4f, 0xc6, 0x7c, 0x2e, 0xb1, 0xd8, 0x5e, 0x95, 0x73, 0xc9,
	0x58, 0x9b, 0x6b, 0xd8, 0x15, 0x63, 0xae, 0x81, 0x10, 0x14, 0xbb, 0x6e, 0xc0, 0x6c, 0x10, 0x74,
	0xf1, 0xcf, 0xe3, 0x74, 0x7e, 0x51, 0x3f, 0xa1, 0xf6, 0xda, 0x41, 0xe1, 0xb0, 0xea, 0xc8, 0x01,
	0xfe, 0xce, 0x82, 0xb5, 0xb3, 0x24, 0xbb, 0xcc, 0x6a, 0x60, 0xdd, 0xbd, 0x1a, 0xe4, 0x67, 0xaa,
	0xc1, 0x0c, 0xd0, 0x0a, 0x59, 0x40, 0xfb, 0xb7, 0x05, 0xdb, 0x9a, 0x15, 0x93, 0xa4, 0x36, 0x13,
	0xd3, 0x5a, 0x20, 0x31, 0xbf, 0x80, 0x0a, 0x57, 0xbd, 0x48, 0xe1, 0x4c, 0x19, 0xf5, 0x74, 0x2e,
	0x2c, 0x96, 0xce, 0x1f, 0xc0, 0x7a, 0x9b, 0xbc, 0x9c, 0xec, 0x40, 0x96, 0x81, 0x8a, 0x63, 0x12,
	0xf1, 0x23, 0xa8, 0x39, 0xa4, 0xef, 0x53, 0x46, 0x62, 0xe2, 0xb5, 0x23, 0x8f, 0x9c, 0x44, 0xe1,
	0x95, 0x1f, 0x0f, 0x5c, 0xc6, 0x6b, 0x1d, 0x86, 0x6a, 0x8b, 0xa6, 0xf3, 0x62, 0x7f, 0xab, 0x8e,
	0x41, 0xc3, 0x0f, 0x61, 0x7b, 0x4a, 0xc3, 0x35, 0xe9, 0xdd, 0x20, 0x1b, 0xca, 0x0e, 0xe9, 0x9f,
	0x44, 0x1e, 0x51, 0x67, 0x6e, 0x32, 0xc4, 0xf7, 0xa1, 0xac, 0x82, 0xc4, 0x51, 0xc0, 0xbf, 0x2a,
	0xf5, 0xc5, 0x3f, 0xee, 0x40, 0x81, 0xbb, 0x69, 0x13, 0x0a, 0x6d, 0xef, 0x4a, 0xcd, 0xf0, 0x5f,
	0xf4, 0x33, 0xa8, 0x74, 0xfd, 0x7e, 0xe8, 0xb2, 0x51, 0x4c, 0x94, 0xe3, 0xf6, 0x4c, 0x27, 0x74,
	0xeb, 0x13, 0x06, 0x27, 0xe5, 0xc5, 0xdf, 0xe7, 0x61, 0x93, 0x1b, 0x26, 0xcd, 0x8c, 0xe5, 0xd6,
	0x78, 0x35, 0x6e, 0x4e, 0xaa, 0xb1, 0xa8, 0x37, 0xb2, 0x66, 0x5f, 0x06, 0xf4, 0x84, 0xc4, 0x2c,
	0xa9, 0x37, 0x06, 0x31, 0xe5, 0xaa, 0x7b, 0x5e, 0x4c, 0x28, 0x4d, 0xc0, 0x62, 0x10, 0x39, 0xe4,
	0x92, 0xfa, 0x1f, 0xcb, 0xfc, 0x5e, 0x77, 0x34, 0x0a, 0x3f, 0x6a, 0x14, 0x96, 0x92, 0xc5, 0xd4,
	0x51, 0x63, 0x52, 0x35, 0xbe, 0x64, 0xb9, 0x92, 0xc1, 0x97, 0xac, 0x77, 0xa0, 0x65, 0x48, 0xcc,
	0x44, 0x8e, 0xae, 0x3b, 0x3a, 0x09, 0x7d, 0x0c, 0x9b, 0xfa, 0xee, 0x45, 0x58, 0x56, 0x85, 0xae,
	0x19, 0x3a, 0x6e, 0x40, 0x55, 0xf7, 0x24, 0x4f, 0xcb, 0x76, 0x14, 0xf6, 0x88, 0x72, 0x96, 0x1c,
	0xf0, 0xd6, 0xc2, 0x8c, 0x46, 0x55, 0x77, 0xf9, 0x35, 0x6c, 0xf2, 0x3a, 0x6e, 0x78, 0x3c, 0xcb,
	0x06, 0x2b, 0xdb, 0x06, 0xde, 0xb9, 0xa9, 0x63, 0xa2, 0x5b, 0xef, 0x8c, 0x5e, 0x24, 0x7d, 0x5e,
	0xc5, 0x99, 0x26, 0xf3, 0xf2, 0xb0, 0x3f, 0xbd, 0x94, 0x81, 0xe1, 0x0b, 0xd8, 0x91, 0x32, 0xdc,
	0x3a, 0xe2, 0x35, 0xc6, 0x32, 0x10, 0x2a, 0x57, 0x6f, 0x41, 0x50, 0xa6, 0x58, 0xda, 0x3c, 0xe4,
	0xb5, 0xe6, 0x01, 0x3f, 0x48, 0x8e, 0xb5, 0xa4, 0x4b, 0xb0, 0xa1, 0x9c, 0xb4, 0x11, 0x0a, 0xfe,
	0x6a, 0x88, 0xff, 0x92, 0x87, 0xaa, 0x70, 0x61, 0x72, 0x02, 0x26, 0xa5, 0xd0, 0xd2, 0x4a, 0xe1,
	0xc2, 0xfb, 0x9f, 0xbb, 0xbd, 0xc2, 0x72, 0xdb, 0xfb, 0x10, 0x36, 0x24, 0xbd, 0xf9, 0x8d, 0x5a,
	0x57, 0x1e, 0x4f, 0x53, 0x54, 0xf4, 0x98, 0x07, 0x53, 0xd8, 0x9f, 0xa2, 0x60, 0xe5, 0x75, 0x4b,
	0xce, 0x88, 0xe0, 0x67, 0x0a, 0x5b, 0x73, 0x40, 0x56, 0x83, 0xd5, 0x89, 0x1d, 0x12, 0x63, 0x93,
	0x71, 0x1a, 0x88, 0x82, 0x1e, 0x88, 0x7f, 0x58, 0xf0, 0x9e, 0x5a, 0x65, 0x2e, 0x22, 0x76, 0xa1,
	0x34, 0x32, 0x5a, 0x0e, 0x39, 0x42, 0xe7, 0xb0, 0x2d, 0x96, 0x4d, 0x5c, 0x22, 0xb7, 0xfc, 0xfa,
	0x52, 0x93, 0x25, 0x35, 0xc7, 0xbc, 0x3f, 0x81, 0xfd, 0x66, 0x81, 0xfa, 0xdf, 0x3c, 0x6c, 0x75,
	0x48, 0x3c, 0xf0, 0x29, 0x07, 0xa3, 0x1f, 0xf6, 0xdf, 0x70, 0x2f, 0x5e, 0x83, 0xd5, 0x7a, 0x8f,
	0xf9, 0xdf, 0xfa, 0x6c, 0xac, 0x0a, 0xe5, 0x64, 0x8c, 0x3e, 0x4d, 0x76, 0x20, 0x81, 0xf5, 0xf6,
	0xec, 0x89, 0x27, 0xa6, 0x67, 0x1b, 0xf8, 0xa9, 0x6a, 0x69, 0x52, 0xb9, 0x49, 0x34, 0xad, 0xce,
	0xb2, 0x58, 0x6a, 0x14, 0x5e, 0xe3, 0xe5, 0x28, 0x49, 0x60, 0x59, 0x28, 0x4d, 0x62, 0xc6, 0x75,
	0xa1, 0x92, 0x75, 0x5d, 0xc0, 0xff, 0xb4, 0x60, 0x37, 0x75, 0xb8, 0xd1, 0x3b, 0x68, 0x17, 0x00,
	0xeb, 0x6e, 0x17, 0x80, 0xfc, 0xdd, 0x2e, 0x00, 0x8b, 0x75, 0x0c, 0xf8, 0x01, 0x6c, 0xb5, 0x23,
	0xe6, 0x5f, 0xf9, 0x3d, 0x01, 0xc8, 0xcb, 0xe8, 0x86, 0x84, 0x1c, 0x46, 0xe2, 0x27, 0x49, 0x4c,
	0x31, 0xc0, 0xef, 0x02, 0x88, 0x3e, 0xdd, 0x9b, 0xee, 0xbd, 0xab, 0xb2, 0xf7, 0x7e, 0x07, 0x0a,
	0xf5, 0xde, 0x4d, 0x8a, 0x41, 0x4b, 0xc7, 0x60, 0x09, 0x8a, 0xfc, 0xba, 0x89, 0x7f, 0xb0, 0x60,
	0xa7, 0x3e, 0x62, 0xd7, 0x24, 0x64, 0x7c, 0x49, 0xe2, 0xa9, 0xbe, 0x64, 0xe6, 0x6c, 0xbe, 0xf5,
	0xac, 0x49, 0x2d, 0x2c, 0x68, 0x16, 0xa2, 0x4f, 0xa1, 0xa4, 0xf2, 0xb7, 0x28, 0x9c, 0xf5, 0x96,
	0xb1, 0x7b, 0x39, 0xd5, 0x6a, 0x3a, 0x8a, 0x89, 0xe3, 0x5a, 0xad, 0xae, 0xd0, 0x36, 0xe7, 0xea,
	0xab, 0x98, 0xf0, 0x57, 0xb0, 0x9a, 0xe8, 0xc8, 0x2c, 0xe0, 0xfb, 0x50, 0x99, 0xbc, 0x6b, 0xa8,
	0x0c, 0x4c, 0x09, 0xf8, 0x7d, 0x58, 0xab, 0x53, 0xea, 0xf7, 0x6f, 0xf5, 0xf1, 0x5f, 0xf3, 0x50,
	0x99, 0x44, 0x49, 0xf3, 0x49, 0x51, 0xf8, 0xa4, 0x06, 0xab, 0x32, 0x6e, 0xea, 0x6a, 0x54, 0x74,
	0x26, 0x63, 0xae, 0xaf, 0xcb, 0x92, 0x7c, 0x5b, 0x77, 0xe4, 0xc0, 0x7c, 0x0c, 0x28, 0x4e, 0x3d,
	0x06, 0x70, 0x7d, 0x97, 0xd1, 0x30, 0x0a, 0xa2, 0xfe, 0xd8, 0x5e, 0x11, 0x81, 0x9c, 0x8c, 0x79,
	0xc6, 0x5c, 0xfa, 0x03, 0x42, 0x99, 0x3b, 0x18, 0xca, 0x2b, 0x5e, 0xd1, 0xd1, 0x28, 0xe8, 0x21,
	0x94, 0x44, 0x64, 0xa9, 0x5d, 0x16, 0x48, 0x9b, 0x9b, 0xa9, 0x8a, 0xcd, 0x6c, 0xe5, 0x56, 0xef,
	0xd0, 0xca, 0x7d, 0x67, 0x01, 0xa4, 0xfa, 0xb4, 0x2b, 0x75, 0x51, 0x5c, 0xa9, 0x77, 0xa1, 0xc4,
	0x1b, 0xbd, 0x96, 0xa7, 0x50, 0xa2, 0x46, 0xd9, 0xc5, 0xd8, 0xb4, 0xa2, 0xb8, 0xb8, 0x15, 0xc7,
	0xdf, 0x57, 0xa0, 0xc8, 0x35, 0xa3, 0x63, 0xa8, 0xd4, 0xe9, 0xcd, 0xb3, 0x30, 0xf0, 0x43, 0x82,
	0xcc, 0x4b, 0x2f, 0x47, 0x78, 0xcd, 0xcc, 0xd0, 0x7a, 0xef, 0x06, 0xe7, 0xd0, 0x19, 0x6c, 0x9c,
	0xc4, 0xc4, 0x65, 0xa4, 0x4d, 0x5e, 0xca, 0xde, 0xfe, 0x27, 0x26, 0x57, 0x46, 0x46, 0x64, 0x2a,
	0x7a, 0x0c, 0xd5, 0x4e, 0x44, 0x59, 0x9b, 0xbc, 0x94, 0x4f, 0x57, 0x4b, 0xaa, 0x39, 0x83, 0x8d,
	0x53, 0x3f, 0xf4, 0xe9, 0xb5, 0x43, 0xdc, 0x80, 0xf9, 0x03, 0xb2, 0xac, 0xa2, 0x06, 0x54, 0xb8,
	0x3d, 0xf2, 0xe5, 0x69, 0x49, 0x1d, 0x5f, 0xc2, 0xbd, 0x2e, 0x8b, 0x89, 0x3b, 0x48, 0x35, 0xcd,
	0xbe, 0x25, 0x64, 0x49, 0x1e, 0x5a, 0xe8, 0x37, 0x80, 0xce, 0x08, 0x9b, 0x7e, 0x8f, 0x5c, 0xc0,
	0x90, 0xfd, 0x59, 0xb8, 0xa6, 0x0a, 0x84, 0x87, 0xaa, 0xaa, 0xa5, 0x90, 0x5d, 0xc9, 0x02, 0x2a,
	0x91, 0x59, 0x9a, 0xb9, 0x18, 0xce, 0x21, 0x17, 0xb6, 0xd5, 0x89, 0x6f, 0x34, 0xc6, 0x0b, 0xe8,
	0xfb, 0xa9, 0x69, 0xe2, 0x9c, 0x16, 0x02, 0xe7, 0xd0, 0x39, 0x20, 0xee, 0xba, 0xa9, 0x87, 0xd5,
	0x25, 0xa3, 0xf1, 0x04, 0xb6, 0x44, 0x1c, 0x62, 0xd2, 0x8b, 0x06, 0x43, 0x87, 0xd0, 0x51, 0xc0,
	0x96, 0xd5, 0xf5, 0x14, 0xb6, 0xce, 0x08, 0x3b, 0x89, 0x06, 0xc3, 0x80, 0x30, 0xe2, 0x2d, 0x0c,
	0x59, 0xd3, 0x93, 0x42, 0x4c, 0x68, 0x83, 0x33, 0xc2, 0x2e, 0x88, 0x4b, 0xf9, 0x09, 0xb0, 0x80,
	0x9a, 0xbd, 0xd9, 0x18, 0xab, 0x57, 0x62, 0xa1, 0xad, 0x28, 0xda, 0xa0, 0x05, 0xf4, 0xbc, 0x67,
	0xa2, 0x71, 0xe6, 0x95, 0x4f, 0x7a, 0xad, 0x4b, 0x42, 0xcf, 0x7c, 0x5a, 0x5d, 0xd2, 0x6b, 0x27,
	0x46, 0xb9, 0x5b, 0x4e, 0xc9, 0xf1, 0x9f, 0x8b, 0x50, 0x56, 0x97, 0x41, 0xd4, 0x80, 0x75, 0x71,
	0x3f, 0x57, 0xfc, 0x14, 0xd5, 0x32, 0xce, 0x45, 0x85, 0xf6, 0xda, 0xb6, 0x31, 0x27, 0x1f, 0xda,
	0x70, 0x0e, 0x7d, 0xad, 0x9c, 0x2f, 0x0f, 0xeb, 0xdb, 0x14, 0xcc, 0xe6, 0x2e, 0xce, 0xa1, 0xcf,
	0x01, 0x3a, 0xa3, 0x89, 0xf8, 0x62, 0xe9, 0x8d, 0x7e, 0x39, 0x95, 0x83, 0x7b, 0xb3, 0x09, 0x96,
	0x2c, 0x9a, 0x9d, 0x7b, 0x04, 0xaa, 0x2a, 0x55, 0xa4, 0x82, 0x4f, 0xa6, 0x32, 0xea, 0xd6, 0x2b,
	0xc3, 0xe2, 0xf9, 0x77, 0x09, 0x3b, 0x1c, 0x0e, 0xa7, 0x51, 0xac, 0xb7, 0x52, 0x74, 0x91, 0xd0,
	0x99, 0xa7, 0x66, 0xda, 0x5e, 0xe1, 0x1c, 0x6a, 0x2a, 0x80, 0xda, 0x06, 0x8b, 0xf6, 0x1e, 0x55,
	0x3b, 0x98, 0x37, 0x93, 0x02, 0xf3, 0xf8, 0x7f, 0x05, 0xee, 0x44, 0xad, 0xf0, 0xfc, 0x36, 0x19,
	0x93, 0x98, 0x2f, 0x87, 0xee, 0xcf, 0x58, 0xa0, 0xb3, 0xd7, 0x1e, 0xdc, 0x3a, 0x3d, 0xe5, 0x88,
	0x27, 0xf0, 0x36, 0xcf, 0xf7, 0x51, 0x1c, 0x93, 0x90, 0x99, 0x77, 0xe3, 0x8c, 0x83, 0x32, 0x0b,
	0x44, 0x49, 0x07, 0x9d, 0x43, 0xf5, 0xd4, 0x4e, 0x71, 0xec, 0xde, 0x9f, 0x8a, 0xb0, 0xf9, 0xb4,
	0x93, 0x89, 0x9f, 0x47, 0x50, 0xe6, 0xde, 0x68, 0x7b, 0x57, 0x77, 0xcf, 0xa2, 0x76, 0xf3, 0x14,
	0xe7, 0x50, 0x67, 0xf1, 0x22, 0xf1, 0xbe, 0xb9, 0xc1, 0xcc, 0xee, 0x1f, 0xe7, 0xd0, 0xef, 0x60,
	0x4b, 0xe4, 0xa2, 0x11, 0x93, 0x83, 0x0c, 0xa4, 0x19, 0x2f, 0x6b, 0xb5, 0x8f, 0x6e, 0xe3, 0x30,
	0x82, 0x70, 0xfc, 0x83, 0x05, 0xf7, 0x74, 0x1c, 0x36, 0x22, 0x86, 0xba, 0x50, 0x7b, 0x1e, 0xc6,
	0x4a, 0x6a, 0x19, 0x9c, 0x66, 0xb9, 0xf7, 0x57, 0xc9, 0xbd, 0xf6, 0x47, 0x53, 0x79, 0xfc, 0x37,
	0x0b, 0xca, 0x67, 0x24, 0x24, 0xb1, 0xdf, 0xe3, 0x25, 0x55, 0x97, 0x93, 0x5d, 0xf3, 0x92, 0xa6,
	0x7e, 0x3d, 0xa9, 0x24, 0x52, 0x4d, 0x06, 0x1a, 0xcd, 0x34, 0xd3, 0x3a, 0x75, 0x9c, 0x7b, 0x51,
	0x12, 0xf7, 0x81, 0xcf, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x33, 0xf8, 0xf8, 0x36, 0x1d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Batch, error)
	//
	GetMeasure(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error)
	// Round trip ping comm
	SendRoundTripPing(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// Round error comm
	RoundError(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostNewBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostNewBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FinishRealtime(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/FinishRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPhase(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/mixmessages.Node/StreamPostPhase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPostPhaseClient{stream}
	return x, nil
}

type Node_StreamPostPhaseClient interface {
	Send(*Slot) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type nodeStreamPostPhaseClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPostPhaseClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestNonce(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmRegistration(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostRoundPublicKey(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostRoundPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPrecompResult(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPrecompResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCompletedBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetCompletedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMeasure(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error) {
	out := new(RoundMetrics)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error) {
	out := new(ServerPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendRoundTripPing(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SendRoundTripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RoundError(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RoundError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(context.Context, *AuthenticatedMessage) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(context.Context, *AuthenticatedMessage) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(Node_StreamPostPhaseServer) error
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *AuthenticatedMessage) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *AuthenticatedMessage) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *AuthenticatedMessage) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(context.Context, *AuthenticatedMessage) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(context.Context, *AuthenticatedMessage) (*Batch, error)
	//
	GetMeasure(context.Context, *AuthenticatedMessage) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(context.Context, *AuthenticatedMessage) (*ServerPollResponse, error)
	// Round trip ping comm
	SendRoundTripPing(context.Context, *AuthenticatedMessage) (*Ack, error)
	// Round error comm
	RoundError(context.Context, *AuthenticatedMessage) (*Ack, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AskOnline(ctx context.Context, req *Ping) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskOnline not implemented")
}
func (*UnimplementedNodeServer) CreateNewRound(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRound not implemented")
}
func (*UnimplementedNodeServer) PostNewBatch(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewBatch not implemented")
}
func (*UnimplementedNodeServer) FinishRealtime(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRealtime not implemented")
}
func (*UnimplementedNodeServer) PostPhase(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPhase not implemented")
}
func (*UnimplementedNodeServer) StreamPostPhase(srv Node_StreamPostPhaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostPhase not implemented")
}
func (*UnimplementedNodeServer) GetRoundBufferInfo(ctx context.Context, req *AuthenticatedMessage) (*RoundBufferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBufferInfo not implemented")
}
func (*UnimplementedNodeServer) RequestNonce(ctx context.Context, req *AuthenticatedMessage) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedNodeServer) ConfirmRegistration(ctx context.Context, req *AuthenticatedMessage) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegistration not implemented")
}
func (*UnimplementedNodeServer) PostRoundPublicKey(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRoundPublicKey not implemented")
}
func (*UnimplementedNodeServer) PostPrecompResult(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrecompResult not implemented")
}
func (*UnimplementedNodeServer) GetCompletedBatch(ctx context.Context, req *AuthenticatedMessage) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedBatch not implemented")
}
func (*UnimplementedNodeServer) GetMeasure(ctx context.Context, req *AuthenticatedMessage) (*RoundMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (*UnimplementedNodeServer) Poll(ctx context.Context, req *AuthenticatedMessage) (*ServerPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedNodeServer) SendRoundTripPing(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoundTripPing not implemented")
}
func (*UnimplementedNodeServer) RoundError(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundError not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostNewBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostNewBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostNewBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostNewBatch(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FinishRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FinishRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/FinishRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FinishRealtime(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPhase(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPostPhase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPostPhase(&nodeStreamPostPhaseServer{stream})
}

type Node_StreamPostPhaseServer interface {
	SendAndClose(*Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeStreamPostPhaseServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPostPhaseServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestNonce(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmRegistration(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostRoundPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostRoundPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostRoundPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostRoundPublicKey(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPrecompResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPrecompResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPrecompResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPrecompResult(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCompletedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCompletedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetCompletedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCompletedBatch(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMeasure(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Poll(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendRoundTripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendRoundTripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SendRoundTripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendRoundTripPing(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RoundError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RoundError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RoundError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RoundError(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "PostNewBatch",
			Handler:    _Node_PostNewBatch_Handler,
		},
		{
			MethodName: "FinishRealtime",
			Handler:    _Node_FinishRealtime_Handler,
		},
		{
			MethodName: "PostPhase",
			Handler:    _Node_PostPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Node_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _Node_ConfirmRegistration_Handler,
		},
		{
			MethodName: "PostRoundPublicKey",
			Handler:    _Node_PostRoundPublicKey_Handler,
		},
		{
			MethodName: "PostPrecompResult",
			Handler:    _Node_PostPrecompResult_Handler,
		},
		{
			MethodName: "GetCompletedBatch",
			Handler:    _Node_GetCompletedBatch_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Node_GetMeasure_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Node_Poll_Handler,
		},
		{
			MethodName: "SendRoundTripPing",
			Handler:    _Node_SendRoundTripPing_Handler,
		},
		{
			MethodName: "RoundError",
			Handler:    _Node_RoundError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPostPhase",
			Handler:       _Node_StreamPostPhase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// Notifications->Gateway request for users with pending notifications
	PollForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*UserIdList, error)
	// Client -> Gateway unified polling
	Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error) {
	out := new(Slot)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PollForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*UserIdList, error) {
	out := new(UserIdList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PollForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error) {
	out := new(GatewayPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientRequest) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(context.Context, *ClientRequest) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *Slot) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *RequestRegistrationConfirmation) (*RegistrationConfirmation, error)
	// Notifications->Gateway request for users with pending notifications
	PollForNotifications(context.Context, *AuthenticatedMessage) (*UserIdList, error)
	// Client -> Gateway unified polling
	Poll(context.Context, *GatewayPoll) (*GatewayPollResponse, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) CheckMessages(ctx context.Context, req *ClientRequest) (*IDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMessages not implemented")
}
func (*UnimplementedGatewayServer) GetMessage(ctx context.Context, req *ClientRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedGatewayServer) PutMessage(ctx context.Context, req *Slot) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedGatewayServer) RequestNonce(ctx context.Context, req *NonceRequest) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedGatewayServer) ConfirmNonce(ctx context.Context, req *RequestRegistrationConfirmation) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNonce not implemented")
}
func (*UnimplementedGatewayServer) PollForNotifications(ctx context.Context, req *AuthenticatedMessage) (*UserIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForNotifications not implemented")
}
func (*UnimplementedGatewayServer) Poll(ctx context.Context, req *GatewayPoll) (*GatewayPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CheckMessages(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistrationConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ConfirmNonce(ctx, req.(*RequestRegistrationConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PollForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PollForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PollForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PollForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Poll(ctx, req.(*GatewayPoll))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _Gateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Gateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Gateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _Gateway_ConfirmNonce_Handler,
		},
		{
			MethodName: "PollForNotifications",
			Handler:    _Gateway_PollForNotifications_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Gateway_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client uses this to register its user with the system
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
	// Client uses this to check if the version needs to be updated
	GetCurrentClientVersion(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*ClientVersion, error)
	// Node registration for the permissioning server
	RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetCurrentClientVersion(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*ClientVersion, error) {
	out := new(ClientVersion)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/GetCurrentClientVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) PollNdf(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/PollNdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error) {
	out := new(PermissionPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error) {
	out := new(RegisteredNodeConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/CheckRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client uses this to register its user with the system
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
	// Client uses this to check if the version needs to be updated
	GetCurrentClientVersion(context.Context, *Ping) (*ClientVersion, error)
	// Node registration for the permissioning server
	RegisterNode(context.Context, *NodeRegistration) (*Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(context.Context, *AuthenticatedMessage) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(context.Context, *AuthenticatedMessage) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(context.Context, *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) RegisterUser(ctx context.Context, req *UserRegistration) (*UserRegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedRegistrationServer) GetCurrentClientVersion(ctx context.Context, req *Ping) (*ClientVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentClientVersion not implemented")
}
func (*UnimplementedRegistrationServer) RegisterNode(ctx context.Context, req *NodeRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedRegistrationServer) PollNdf(ctx context.Context, req *AuthenticatedMessage) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollNdf not implemented")
}
func (*UnimplementedRegistrationServer) Poll(ctx context.Context, req *AuthenticatedMessage) (*PermissionPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedRegistrationServer) CheckRegistration(ctx context.Context, req *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegistration not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetCurrentClientVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetCurrentClientVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/GetCurrentClientVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetCurrentClientVersion(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterNode(ctx, req.(*NodeRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_PollNdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).PollNdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/PollNdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).PollNdf(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Poll(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CheckRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredNodeCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CheckRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/CheckRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CheckRegistration(ctx, req.(*RegisteredNodeCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
		{
			MethodName: "GetCurrentClientVersion",
			Handler:    _Registration_GetCurrentClientVersion_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Registration_RegisterNode_Handler,
		},
		{
			MethodName: "PollNdf",
			Handler:    _Registration_PollNdf_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Registration_Poll_Handler,
		},
		{
			MethodName: "CheckRegistration",
			Handler:    _Registration_CheckRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// NotificationBotClient is the client API for NotificationBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationBotClient interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
}

type notificationBotClient struct {
	cc *grpc.ClientConn
}

func NewNotificationBotClient(cc *grpc.ClientConn) NotificationBotClient {
	return &notificationBotClient{cc}
}

func (c *notificationBotClient) UnregisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/UnregisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) RegisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/RegisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationBotServer is the server API for NotificationBot service.
type NotificationBotServer interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error)
}

// UnimplementedNotificationBotServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationBotServer struct {
}

func (*UnimplementedNotificationBotServer) UnregisterForNotifications(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) RegisterForNotifications(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterForNotifications not implemented")
}

func RegisterNotificationBotServer(s *grpc.Server, srv NotificationBotServer) {
	s.RegisterService(&_NotificationBot_serviceDesc, srv)
}

func _NotificationBot_UnregisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/UnregisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_RegisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/RegisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.NotificationBot",
	HandlerType: (*NotificationBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnregisterForNotifications",
			Handler:    _NotificationBot_UnregisterForNotifications_Handler,
		},
		{
			MethodName: "RegisterForNotifications",
			Handler:    _NotificationBot_RegisterForNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// GenericClient is the client API for Generic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenericClient interface {
	// Authenticate a token with the server
	AuthenticateToken(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// Request a token from the server
	RequestToken(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*AssignToken, error)
}

type genericClient struct {
	cc *grpc.ClientConn
}

func NewGenericClient(cc *grpc.ClientConn) GenericClient {
	return &genericClient{cc}
}

func (c *genericClient) AuthenticateToken(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Generic/AuthenticateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) RequestToken(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*AssignToken, error) {
	out := new(AssignToken)
	err := c.cc.Invoke(ctx, "/mixmessages.Generic/RequestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericServer is the server API for Generic service.
type GenericServer interface {
	// Authenticate a token with the server
	AuthenticateToken(context.Context, *AuthenticatedMessage) (*Ack, error)
	// Request a token from the server
	RequestToken(context.Context, *Ping) (*AssignToken, error)
}

// UnimplementedGenericServer can be embedded to have forward compatible implementations.
type UnimplementedGenericServer struct {
}

func (*UnimplementedGenericServer) AuthenticateToken(ctx context.Context, req *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateToken not implemented")
}
func (*UnimplementedGenericServer) RequestToken(ctx context.Context, req *Ping) (*AssignToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}

func RegisterGenericServer(s *grpc.Server, srv GenericServer) {
	s.RegisterService(&_Generic_serviceDesc, srv)
}

func _Generic_AuthenticateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).AuthenticateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Generic/AuthenticateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).AuthenticateToken(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Generic/RequestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).RequestToken(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Generic",
	HandlerType: (*GenericServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateToken",
			Handler:    _Generic_AuthenticateToken_Handler,
		},
		{
			MethodName: "RequestToken",
			Handler:    _Generic_RequestToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
