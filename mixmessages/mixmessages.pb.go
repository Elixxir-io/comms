// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

/*
Package mixmessages is a generated protocol buffer package.

It is generated from these files:
	mixmessages.proto

It has these top-level messages:
	Ack
	Ping
	Pong
	PrecompDecryptSlot
	PrecompDecryptMessage
	ErrorMessage
	ErrorAck
*/
package mixmessages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Generic empty Ack message
type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message asking if server is online
type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The response message containing the online confirmation
type Pong struct {
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Message for individual Precomp Decrypt Slot
type PrecompDecryptSlot struct {
	Slot                         uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedMessageKeys         []byte `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedRecipientIDKeys     []byte `protobuf:"bytes,3,opt,name=EncryptedRecipientIDKeys,proto3" json:"EncryptedRecipientIDKeys,omitempty"`
	PartialMessageCypherText     []byte `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialRecipientIDCypherText []byte `protobuf:"bytes,5,opt,name=PartialRecipientIDCypherText,proto3" json:"PartialRecipientIDCypherText,omitempty"`
}

func (m *PrecompDecryptSlot) Reset()                    { *m = PrecompDecryptSlot{} }
func (m *PrecompDecryptSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompDecryptSlot) ProtoMessage()               {}
func (*PrecompDecryptSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrecompDecryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompDecryptSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetEncryptedRecipientIDKeys() []byte {
	if m != nil {
		return m.EncryptedRecipientIDKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialRecipientIDCypherText() []byte {
	if m != nil {
		return m.PartialRecipientIDCypherText
	}
	return nil
}

// Message for batch of Precomp Decrypt Slots
type PrecompDecryptMessage struct {
	RoundID string                `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompDecryptSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompDecryptMessage) Reset()                    { *m = PrecompDecryptMessage{} }
func (m *PrecompDecryptMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompDecryptMessage) ProtoMessage()               {}
func (*PrecompDecryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrecompDecryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompDecryptMessage) GetSlots() []*PrecompDecryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// ErrorMessage encodes an error message
type ErrorMessage struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *ErrorMessage) Reset()                    { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string            { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()               {}
func (*ErrorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ErrorAck returns the length of the received messages
type ErrorAck struct {
	MsgLen int32 `protobuf:"varint,1,opt,name=MsgLen" json:"MsgLen,omitempty"`
}

func (m *ErrorAck) Reset()                    { *m = ErrorAck{} }
func (m *ErrorAck) String() string            { return proto.CompactTextString(m) }
func (*ErrorAck) ProtoMessage()               {}
func (*ErrorAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ErrorAck) GetMsgLen() int32 {
	if m != nil {
		return m.MsgLen
	}
	return 0
}

func init() {
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*Pong)(nil), "mixmessages.Pong")
	proto.RegisterType((*PrecompDecryptSlot)(nil), "mixmessages.PrecompDecryptSlot")
	proto.RegisterType((*PrecompDecryptMessage)(nil), "mixmessages.PrecompDecryptMessage")
	proto.RegisterType((*ErrorMessage)(nil), "mixmessages.ErrorMessage")
	proto.RegisterType((*ErrorAck)(nil), "mixmessages.ErrorAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MixMessageService service

type MixMessageServiceClient interface {
	// Handles an error message
	NetworkError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*ErrorAck, error)
	// Handles an AskOnline message
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error)
}

type mixMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageServiceClient(cc *grpc.ClientConn) MixMessageServiceClient {
	return &mixMessageServiceClient{cc}
}

func (c *mixMessageServiceClient) NetworkError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*ErrorAck, error) {
	out := new(ErrorAck)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/NetworkError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/AskOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompDecrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MixMessageService service

type MixMessageServiceServer interface {
	// Handles an error message
	NetworkError(context.Context, *ErrorMessage) (*ErrorAck, error)
	// Handles an AskOnline message
	AskOnline(context.Context, *Ping) (*Pong, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(context.Context, *PrecompDecryptMessage) (*Ack, error)
}

func RegisterMixMessageServiceServer(s *grpc.Server, srv MixMessageServiceServer) {
	s.RegisterService(&_MixMessageService_serviceDesc, srv)
}

func _MixMessageService_NetworkError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).NetworkError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/NetworkError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).NetworkError(ctx, req.(*ErrorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompDecryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompDecrypt(ctx, req.(*PrecompDecryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageService",
	HandlerType: (*MixMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkError",
			Handler:    _MixMessageService_NetworkError_Handler,
		},
		{
			MethodName: "AskOnline",
			Handler:    _MixMessageService_AskOnline_Handler,
		},
		{
			MethodName: "PrecompDecrypt",
			Handler:    _MixMessageService_PrecompDecrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0xa5, 0xd0, 0xa2, 0x0c, 0xc4, 0xc8, 0x44, 0x4c, 0x25, 0x26, 0x92, 0x3d, 0xf5, 0xc4, 0x01,
	0xe2, 0xc5, 0x1b, 0x08, 0x89, 0x44, 0x51, 0x52, 0xfc, 0x01, 0x2c, 0x93, 0xb2, 0x29, 0xec, 0x36,
	0xdb, 0xaa, 0xf0, 0x27, 0x7e, 0x99, 0xdf, 0x63, 0xba, 0x14, 0xd3, 0x8a, 0x70, 0xea, 0xce, 0xbc,
	0xf7, 0xe6, 0xed, 0xbe, 0x0e, 0xd4, 0x57, 0x7c, 0xbd, 0xa2, 0x28, 0x9a, 0xf9, 0x14, 0xb5, 0x43,
	0x25, 0x63, 0x89, 0xd5, 0x4c, 0x8b, 0x59, 0x50, 0xea, 0x79, 0x01, 0x2b, 0x83, 0x39, 0xe1, 0xc2,
	0xd7, 0x5f, 0x29, 0x7c, 0xf6, 0x55, 0x04, 0x9c, 0x28, 0xf2, 0xe4, 0x2a, 0x1c, 0x90, 0xa7, 0x36,
	0x61, 0x3c, 0x5d, 0xca, 0x18, 0x11, 0xcc, 0xe4, 0x6b, 0x1b, 0x2d, 0xc3, 0x31, 0x5d, 0x7d, 0xc6,
	0x0e, 0x5c, 0x0c, 0x85, 0xa6, 0xd0, 0x7c, 0xbc, 0x1d, 0xfb, 0x48, 0x9b, 0xc8, 0x2e, 0xb6, 0x0c,
	0xa7, 0xe6, 0xfe, 0x8b, 0xe1, 0x1d, 0xd8, 0xbf, 0x7d, 0x97, 0x3c, 0x1e, 0x72, 0x12, 0xf1, 0x68,
	0xa0, 0x75, 0x25, 0xad, 0x3b, 0x88, 0x27, 0xda, 0xc9, 0x4c, 0xc5, 0x7c, 0xb6, 0x4c, 0x27, 0xde,
	0x6f, 0xc2, 0x05, 0xa9, 0x57, 0x5a, 0xc7, 0xb6, 0xb9, 0xd5, 0x1e, 0xc2, 0xb1, 0x0f, 0xd7, 0x29,
	0x96, 0x99, 0x9a, 0xd1, 0x5b, 0x5a, 0x7f, 0x94, 0xc3, 0x16, 0xd0, 0xc8, 0x27, 0x93, 0xda, 0xa0,
	0x0d, 0x27, 0xae, 0x7c, 0x17, 0xf3, 0xd1, 0x40, 0xe7, 0x53, 0x71, 0x77, 0x25, 0xde, 0x82, 0x95,
	0x44, 0x95, 0x64, 0x52, 0x72, 0xaa, 0x9d, 0x9b, 0x76, 0xf6, 0xa7, 0xec, 0xc7, 0xec, 0x6e, 0xd9,
	0xcc, 0x81, 0xda, 0x50, 0x29, 0xa9, 0x32, 0x06, 0xe9, 0x71, 0x67, 0x90, 0x96, 0x8c, 0xc1, 0xa9,
	0x66, 0xf6, 0xbc, 0x00, 0x2f, 0xa1, 0x3c, 0x8e, 0xfc, 0x27, 0x12, 0x9a, 0x64, 0xb9, 0x69, 0xd5,
	0xf9, 0x36, 0xa0, 0x3e, 0xe6, 0xeb, 0x54, 0x32, 0x25, 0xf5, 0xc1, 0x3d, 0xc2, 0x3e, 0xd4, 0x9e,
	0x29, 0xfe, 0x94, 0x2a, 0xd0, 0x03, 0xf0, 0x2a, 0x77, 0xb7, 0xac, 0x7d, 0xb3, 0xb1, 0x0f, 0x25,
	0xab, 0x53, 0xc0, 0x2e, 0x54, 0x7a, 0x51, 0xf0, 0x22, 0x96, 0x5c, 0x10, 0xd6, 0xf3, 0x8f, 0xe3,
	0xc2, 0x6f, 0xfe, 0x69, 0x25, 0xfb, 0x55, 0xc0, 0x07, 0x38, 0xcb, 0xbf, 0x1c, 0xd9, 0x91, 0x58,
	0x76, 0x77, 0x38, 0xcf, 0x71, 0xb4, 0xfd, 0x5b, 0x59, 0xaf, 0x75, 0xf7, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x48, 0xe0, 0xaa, 0x0f, 0xeb, 0x02, 0x00, 0x00,
}
