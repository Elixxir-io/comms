// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

/*
Package mixmessages is a generated protocol buffer package.

It is generated from these files:
	mixmessages.proto

It has these top-level messages:
	Ack
	Ping
	Pong
	PrecompDecryptSlot
	PrecompDecryptMessage
	PrecompEncryptSlot
	PrecompEncryptMessage
	PrecompGenerationSlot
	PrecompGenerationMessage
	PrecompRevealSlot
	PrecompRevealMessage
	PrecompPermuteSlot
	PrecompPermuteMessage
	PrecompShareSlot
	PrecompShareMessage
	RealtimeDecryptSlot
	RealtimeDecryptMessage
	RealtimeEncryptSlot
	RealtimeEncryptMessage
	RealtimePermuteSlot
	RealtimePermuteMessage
	RealtimeIdentifySlot
	RealtimeIdentifyMessage
	ErrorMessage
	ErrorAck
*/
package mixmessages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Generic empty Ack message
type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message asking if server is online
type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The response message containing the online confirmation
type Pong struct {
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Message for individual Precomp Decrypt Slot
type PrecompDecryptSlot struct {
	Slot                         uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedMessageKeys         []byte `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedRecipientIDKeys     []byte `protobuf:"bytes,3,opt,name=EncryptedRecipientIDKeys,proto3" json:"EncryptedRecipientIDKeys,omitempty"`
	PartialMessageCypherText     []byte `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialRecipientIDCypherText []byte `protobuf:"bytes,5,opt,name=PartialRecipientIDCypherText,proto3" json:"PartialRecipientIDCypherText,omitempty"`
}

func (m *PrecompDecryptSlot) Reset()                    { *m = PrecompDecryptSlot{} }
func (m *PrecompDecryptSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompDecryptSlot) ProtoMessage()               {}
func (*PrecompDecryptSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrecompDecryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompDecryptSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetEncryptedRecipientIDKeys() []byte {
	if m != nil {
		return m.EncryptedRecipientIDKeys
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompDecryptSlot) GetPartialRecipientIDCypherText() []byte {
	if m != nil {
		return m.PartialRecipientIDCypherText
	}
	return nil
}

// Message for batch of Precomp Decrypt Slots
type PrecompDecryptMessage struct {
	RoundID string                `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompDecryptSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompDecryptMessage) Reset()                    { *m = PrecompDecryptMessage{} }
func (m *PrecompDecryptMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompDecryptMessage) ProtoMessage()               {}
func (*PrecompDecryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrecompDecryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompDecryptMessage) GetSlots() []*PrecompDecryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Encrypt Slot
type PrecompEncryptSlot struct {
	Slot                     uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedMessageKeys     []byte `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	PartialMessageCypherText []byte `protobuf:"bytes,3,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
}

func (m *PrecompEncryptSlot) Reset()                    { *m = PrecompEncryptSlot{} }
func (m *PrecompEncryptSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompEncryptSlot) ProtoMessage()               {}
func (*PrecompEncryptSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PrecompEncryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompEncryptSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompEncryptSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

// Message for batch of Precomp Encrypt Slots
type PrecompEncryptMessage struct {
	RoundID string                `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompEncryptSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompEncryptMessage) Reset()                    { *m = PrecompEncryptMessage{} }
func (m *PrecompEncryptMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompEncryptMessage) ProtoMessage()               {}
func (*PrecompEncryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PrecompEncryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompEncryptMessage) GetSlots() []*PrecompEncryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Generation Slot
type PrecompGenerationSlot struct {
	Slot uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
}

func (m *PrecompGenerationSlot) Reset()                    { *m = PrecompGenerationSlot{} }
func (m *PrecompGenerationSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompGenerationSlot) ProtoMessage()               {}
func (*PrecompGenerationSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PrecompGenerationSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// Message for batch of Precomp Generation Slots
type PrecompGenerationMessage struct {
	RoundID string                   `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompGenerationSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompGenerationMessage) Reset()                    { *m = PrecompGenerationMessage{} }
func (m *PrecompGenerationMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompGenerationMessage) ProtoMessage()               {}
func (*PrecompGenerationMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PrecompGenerationMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompGenerationMessage) GetSlots() []*PrecompGenerationSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Reveal Slot
type PrecompRevealSlot struct {
	Slot                       uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	PartialMessageCypherText   []byte `protobuf:"bytes,2,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialRecipientCypherText []byte `protobuf:"bytes,3,opt,name=PartialRecipientCypherText,proto3" json:"PartialRecipientCypherText,omitempty"`
}

func (m *PrecompRevealSlot) Reset()                    { *m = PrecompRevealSlot{} }
func (m *PrecompRevealSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompRevealSlot) ProtoMessage()               {}
func (*PrecompRevealSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PrecompRevealSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompRevealSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompRevealSlot) GetPartialRecipientCypherText() []byte {
	if m != nil {
		return m.PartialRecipientCypherText
	}
	return nil
}

// Message for batch of Precomp Reveal Slots
type PrecompRevealMessage struct {
	RoundID string               `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompRevealSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompRevealMessage) Reset()                    { *m = PrecompRevealMessage{} }
func (m *PrecompRevealMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompRevealMessage) ProtoMessage()               {}
func (*PrecompRevealMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PrecompRevealMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompRevealMessage) GetSlots() []*PrecompRevealSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Permute Slot
type PrecompPermuteSlot struct {
	Slot                         uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedMessageKeys         []byte `protobuf:"bytes,2,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedRecipientIDKeys     []byte `protobuf:"bytes,3,opt,name=EncryptedRecipientIDKeys,proto3" json:"EncryptedRecipientIDKeys,omitempty"`
	PartialMessageCypherText     []byte `protobuf:"bytes,4,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialRecipientIDCypherText []byte `protobuf:"bytes,5,opt,name=PartialRecipientIDCypherText,proto3" json:"PartialRecipientIDCypherText,omitempty"`
}

func (m *PrecompPermuteSlot) Reset()                    { *m = PrecompPermuteSlot{} }
func (m *PrecompPermuteSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompPermuteSlot) ProtoMessage()               {}
func (*PrecompPermuteSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PrecompPermuteSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompPermuteSlot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *PrecompPermuteSlot) GetEncryptedRecipientIDKeys() []byte {
	if m != nil {
		return m.EncryptedRecipientIDKeys
	}
	return nil
}

func (m *PrecompPermuteSlot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *PrecompPermuteSlot) GetPartialRecipientIDCypherText() []byte {
	if m != nil {
		return m.PartialRecipientIDCypherText
	}
	return nil
}

// Message for batch of Precomp Permute Slots
type PrecompPermuteMessage struct {
	RoundID string                `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompPermuteSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompPermuteMessage) Reset()                    { *m = PrecompPermuteMessage{} }
func (m *PrecompPermuteMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompPermuteMessage) ProtoMessage()               {}
func (*PrecompPermuteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PrecompPermuteMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompPermuteMessage) GetSlots() []*PrecompPermuteSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Precomp Share Slot
type PrecompShareSlot struct {
	Slot                            uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	PartialRecipientPublicCypherKey []byte `protobuf:"bytes,2,opt,name=PartialRecipientPublicCypherKey,proto3" json:"PartialRecipientPublicCypherKey,omitempty"`
}

func (m *PrecompShareSlot) Reset()                    { *m = PrecompShareSlot{} }
func (m *PrecompShareSlot) String() string            { return proto.CompactTextString(m) }
func (*PrecompShareSlot) ProtoMessage()               {}
func (*PrecompShareSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PrecompShareSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PrecompShareSlot) GetPartialRecipientPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRecipientPublicCypherKey
	}
	return nil
}

// Message for batch of Precomp Share Slots
type PrecompShareMessage struct {
	RoundID string              `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*PrecompShareSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *PrecompShareMessage) Reset()                    { *m = PrecompShareMessage{} }
func (m *PrecompShareMessage) String() string            { return proto.CompactTextString(m) }
func (*PrecompShareMessage) ProtoMessage()               {}
func (*PrecompShareMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PrecompShareMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *PrecompShareMessage) GetSlots() []*PrecompShareSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Realtime Decrypt Slot
type RealtimeDecryptSlot struct {
	Slot                 uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	SenderID             uint64 `protobuf:"varint,2,opt,name=SenderID" json:"SenderID,omitempty"`
	EncryptedMessage     []byte `protobuf:"bytes,3,opt,name=EncryptedMessage,proto3" json:"EncryptedMessage,omitempty"`
	EncryptedRecipientID []byte `protobuf:"bytes,4,opt,name=EncryptedRecipientID,proto3" json:"EncryptedRecipientID,omitempty"`
}

func (m *RealtimeDecryptSlot) Reset()                    { *m = RealtimeDecryptSlot{} }
func (m *RealtimeDecryptSlot) String() string            { return proto.CompactTextString(m) }
func (*RealtimeDecryptSlot) ProtoMessage()               {}
func (*RealtimeDecryptSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RealtimeDecryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RealtimeDecryptSlot) GetSenderID() uint64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *RealtimeDecryptSlot) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

func (m *RealtimeDecryptSlot) GetEncryptedRecipientID() []byte {
	if m != nil {
		return m.EncryptedRecipientID
	}
	return nil
}

// Message for batch of Realtime Decrypt Slots
type RealtimeDecryptMessage struct {
	RoundID string                 `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*RealtimeDecryptSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *RealtimeDecryptMessage) Reset()                    { *m = RealtimeDecryptMessage{} }
func (m *RealtimeDecryptMessage) String() string            { return proto.CompactTextString(m) }
func (*RealtimeDecryptMessage) ProtoMessage()               {}
func (*RealtimeDecryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RealtimeDecryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimeDecryptMessage) GetSlots() []*RealtimeDecryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Realtime Encrypt Slot
type RealtimeEncryptSlot struct {
	Slot             uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	RecipientID      uint64 `protobuf:"varint,2,opt,name=RecipientID" json:"RecipientID,omitempty"`
	EncryptedMessage []byte `protobuf:"bytes,3,opt,name=EncryptedMessage,proto3" json:"EncryptedMessage,omitempty"`
}

func (m *RealtimeEncryptSlot) Reset()                    { *m = RealtimeEncryptSlot{} }
func (m *RealtimeEncryptSlot) String() string            { return proto.CompactTextString(m) }
func (*RealtimeEncryptSlot) ProtoMessage()               {}
func (*RealtimeEncryptSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RealtimeEncryptSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RealtimeEncryptSlot) GetRecipientID() uint64 {
	if m != nil {
		return m.RecipientID
	}
	return 0
}

func (m *RealtimeEncryptSlot) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

// Message for batch of Realtime Encrypt Slots
type RealtimeEncryptMessage struct {
	RoundID string                 `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*RealtimeEncryptSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *RealtimeEncryptMessage) Reset()                    { *m = RealtimeEncryptMessage{} }
func (m *RealtimeEncryptMessage) String() string            { return proto.CompactTextString(m) }
func (*RealtimeEncryptMessage) ProtoMessage()               {}
func (*RealtimeEncryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RealtimeEncryptMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimeEncryptMessage) GetSlots() []*RealtimeEncryptSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Realtime Permute Slot
type RealtimePermuteSlot struct {
	Slot                 uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedMessage     []byte `protobuf:"bytes,2,opt,name=EncryptedMessage,proto3" json:"EncryptedMessage,omitempty"`
	EncryptedRecipientID []byte `protobuf:"bytes,3,opt,name=EncryptedRecipientID,proto3" json:"EncryptedRecipientID,omitempty"`
}

func (m *RealtimePermuteSlot) Reset()                    { *m = RealtimePermuteSlot{} }
func (m *RealtimePermuteSlot) String() string            { return proto.CompactTextString(m) }
func (*RealtimePermuteSlot) ProtoMessage()               {}
func (*RealtimePermuteSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RealtimePermuteSlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RealtimePermuteSlot) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

func (m *RealtimePermuteSlot) GetEncryptedRecipientID() []byte {
	if m != nil {
		return m.EncryptedRecipientID
	}
	return nil
}

// Message for batch of Realtime Permute Slots
type RealtimePermuteMessage struct {
	RoundID string                 `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*RealtimePermuteSlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *RealtimePermuteMessage) Reset()                    { *m = RealtimePermuteMessage{} }
func (m *RealtimePermuteMessage) String() string            { return proto.CompactTextString(m) }
func (*RealtimePermuteMessage) ProtoMessage()               {}
func (*RealtimePermuteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RealtimePermuteMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimePermuteMessage) GetSlots() []*RealtimePermuteSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Message for individual Realtime Identify Slot
type RealtimeIdentifySlot struct {
	Slot                 uint64 `protobuf:"varint,1,opt,name=Slot" json:"Slot,omitempty"`
	EncryptedRecipientID []byte `protobuf:"bytes,2,opt,name=EncryptedRecipientID,proto3" json:"EncryptedRecipientID,omitempty"`
}

func (m *RealtimeIdentifySlot) Reset()                    { *m = RealtimeIdentifySlot{} }
func (m *RealtimeIdentifySlot) String() string            { return proto.CompactTextString(m) }
func (*RealtimeIdentifySlot) ProtoMessage()               {}
func (*RealtimeIdentifySlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RealtimeIdentifySlot) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RealtimeIdentifySlot) GetEncryptedRecipientID() []byte {
	if m != nil {
		return m.EncryptedRecipientID
	}
	return nil
}

// Message for batch of Realtime Identify Slots
type RealtimeIdentifyMessage struct {
	RoundID string                  `protobuf:"bytes,1,opt,name=RoundID" json:"RoundID,omitempty"`
	Slots   []*RealtimeIdentifySlot `protobuf:"bytes,2,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *RealtimeIdentifyMessage) Reset()                    { *m = RealtimeIdentifyMessage{} }
func (m *RealtimeIdentifyMessage) String() string            { return proto.CompactTextString(m) }
func (*RealtimeIdentifyMessage) ProtoMessage()               {}
func (*RealtimeIdentifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RealtimeIdentifyMessage) GetRoundID() string {
	if m != nil {
		return m.RoundID
	}
	return ""
}

func (m *RealtimeIdentifyMessage) GetSlots() []*RealtimeIdentifySlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// ErrorMessage encodes an error message
type ErrorMessage struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *ErrorMessage) Reset()                    { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string            { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()               {}
func (*ErrorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ErrorAck returns the length of the received messages
type ErrorAck struct {
	MsgLen int32 `protobuf:"varint,1,opt,name=MsgLen" json:"MsgLen,omitempty"`
}

func (m *ErrorAck) Reset()                    { *m = ErrorAck{} }
func (m *ErrorAck) String() string            { return proto.CompactTextString(m) }
func (*ErrorAck) ProtoMessage()               {}
func (*ErrorAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ErrorAck) GetMsgLen() int32 {
	if m != nil {
		return m.MsgLen
	}
	return 0
}

func init() {
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*Pong)(nil), "mixmessages.Pong")
	proto.RegisterType((*PrecompDecryptSlot)(nil), "mixmessages.PrecompDecryptSlot")
	proto.RegisterType((*PrecompDecryptMessage)(nil), "mixmessages.PrecompDecryptMessage")
	proto.RegisterType((*PrecompEncryptSlot)(nil), "mixmessages.PrecompEncryptSlot")
	proto.RegisterType((*PrecompEncryptMessage)(nil), "mixmessages.PrecompEncryptMessage")
	proto.RegisterType((*PrecompGenerationSlot)(nil), "mixmessages.PrecompGenerationSlot")
	proto.RegisterType((*PrecompGenerationMessage)(nil), "mixmessages.PrecompGenerationMessage")
	proto.RegisterType((*PrecompRevealSlot)(nil), "mixmessages.PrecompRevealSlot")
	proto.RegisterType((*PrecompRevealMessage)(nil), "mixmessages.PrecompRevealMessage")
	proto.RegisterType((*PrecompPermuteSlot)(nil), "mixmessages.PrecompPermuteSlot")
	proto.RegisterType((*PrecompPermuteMessage)(nil), "mixmessages.PrecompPermuteMessage")
	proto.RegisterType((*PrecompShareSlot)(nil), "mixmessages.PrecompShareSlot")
	proto.RegisterType((*PrecompShareMessage)(nil), "mixmessages.PrecompShareMessage")
	proto.RegisterType((*RealtimeDecryptSlot)(nil), "mixmessages.RealtimeDecryptSlot")
	proto.RegisterType((*RealtimeDecryptMessage)(nil), "mixmessages.RealtimeDecryptMessage")
	proto.RegisterType((*RealtimeEncryptSlot)(nil), "mixmessages.RealtimeEncryptSlot")
	proto.RegisterType((*RealtimeEncryptMessage)(nil), "mixmessages.RealtimeEncryptMessage")
	proto.RegisterType((*RealtimePermuteSlot)(nil), "mixmessages.RealtimePermuteSlot")
	proto.RegisterType((*RealtimePermuteMessage)(nil), "mixmessages.RealtimePermuteMessage")
	proto.RegisterType((*RealtimeIdentifySlot)(nil), "mixmessages.RealtimeIdentifySlot")
	proto.RegisterType((*RealtimeIdentifyMessage)(nil), "mixmessages.RealtimeIdentifyMessage")
	proto.RegisterType((*ErrorMessage)(nil), "mixmessages.ErrorMessage")
	proto.RegisterType((*ErrorAck)(nil), "mixmessages.ErrorAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MixMessageService service

type MixMessageServiceClient interface {
	// Handles an error message
	NetworkError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*ErrorAck, error)
	// Handles an AskOnline message
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Encrypt
	PrecompEncrypt(ctx context.Context, in *PrecompEncryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Generation
	PrecompGeneration(ctx context.Context, in *PrecompGenerationMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Reveal
	PrecompReveal(ctx context.Context, in *PrecompRevealMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Permute
	PrecompPermute(ctx context.Context, in *PrecompPermuteMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Precomp Share
	PrecompShare(ctx context.Context, in *PrecompShareMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Decrypt
	RealtimeDecrypt(ctx context.Context, in *RealtimeDecryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Encrypt
	RealtimeEncrypt(ctx context.Context, in *RealtimeEncryptMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Permute
	RealtimePermute(ctx context.Context, in *RealtimePermuteMessage, opts ...grpc.CallOption) (*Ack, error)
	// Handles Realtime Identify
	RealtimeIdentify(ctx context.Context, in *RealtimeIdentifyMessage, opts ...grpc.CallOption) (*Ack, error)
}

type mixMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMixMessageServiceClient(cc *grpc.ClientConn) MixMessageServiceClient {
	return &mixMessageServiceClient{cc}
}

func (c *mixMessageServiceClient) NetworkError(ctx context.Context, in *ErrorMessage, opts ...grpc.CallOption) (*ErrorAck, error) {
	out := new(ErrorAck)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/NetworkError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/AskOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompDecrypt(ctx context.Context, in *PrecompDecryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompDecrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompEncrypt(ctx context.Context, in *PrecompEncryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompEncrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompGeneration(ctx context.Context, in *PrecompGenerationMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompGeneration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompReveal(ctx context.Context, in *PrecompRevealMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompReveal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompPermute(ctx context.Context, in *PrecompPermuteMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompPermute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) PrecompShare(ctx context.Context, in *PrecompShareMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/PrecompShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) RealtimeDecrypt(ctx context.Context, in *RealtimeDecryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/RealtimeDecrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) RealtimeEncrypt(ctx context.Context, in *RealtimeEncryptMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/RealtimeEncrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) RealtimePermute(ctx context.Context, in *RealtimePermuteMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/RealtimePermute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixMessageServiceClient) RealtimeIdentify(ctx context.Context, in *RealtimeIdentifyMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/mixmessages.MixMessageService/RealtimeIdentify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MixMessageService service

type MixMessageServiceServer interface {
	// Handles an error message
	NetworkError(context.Context, *ErrorMessage) (*ErrorAck, error)
	// Handles an AskOnline message
	AskOnline(context.Context, *Ping) (*Pong, error)
	// Handles Precomp Decrypt
	PrecompDecrypt(context.Context, *PrecompDecryptMessage) (*Ack, error)
	// Handles Precomp Encrypt
	PrecompEncrypt(context.Context, *PrecompEncryptMessage) (*Ack, error)
	// Handles Precomp Generation
	PrecompGeneration(context.Context, *PrecompGenerationMessage) (*Ack, error)
	// Handles Precomp Reveal
	PrecompReveal(context.Context, *PrecompRevealMessage) (*Ack, error)
	// Handles Precomp Permute
	PrecompPermute(context.Context, *PrecompPermuteMessage) (*Ack, error)
	// Handles Precomp Share
	PrecompShare(context.Context, *PrecompShareMessage) (*Ack, error)
	// Handles Realtime Decrypt
	RealtimeDecrypt(context.Context, *RealtimeDecryptMessage) (*Ack, error)
	// Handles Realtime Encrypt
	RealtimeEncrypt(context.Context, *RealtimeEncryptMessage) (*Ack, error)
	// Handles Realtime Permute
	RealtimePermute(context.Context, *RealtimePermuteMessage) (*Ack, error)
	// Handles Realtime Identify
	RealtimeIdentify(context.Context, *RealtimeIdentifyMessage) (*Ack, error)
}

func RegisterMixMessageServiceServer(s *grpc.Server, srv MixMessageServiceServer) {
	s.RegisterService(&_MixMessageService_serviceDesc, srv)
}

func _MixMessageService_NetworkError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).NetworkError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/NetworkError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).NetworkError(ctx, req.(*ErrorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompDecryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompDecrypt(ctx, req.(*PrecompDecryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompEncryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompEncrypt(ctx, req.(*PrecompEncryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompGenerationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompGeneration(ctx, req.(*PrecompGenerationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompReveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompRevealMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompReveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompReveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompReveal(ctx, req.(*PrecompRevealMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompPermute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompPermuteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompPermute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompPermute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompPermute(ctx, req.(*PrecompPermuteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_PrecompShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecompShareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).PrecompShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/PrecompShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).PrecompShare(ctx, req.(*PrecompShareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_RealtimeDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeDecryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).RealtimeDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/RealtimeDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).RealtimeDecrypt(ctx, req.(*RealtimeDecryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_RealtimeEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeEncryptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).RealtimeEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/RealtimeEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).RealtimeEncrypt(ctx, req.(*RealtimeEncryptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_RealtimePermute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimePermuteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).RealtimePermute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/RealtimePermute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).RealtimePermute(ctx, req.(*RealtimePermuteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixMessageService_RealtimeIdentify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeIdentifyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixMessageServiceServer).RealtimeIdentify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.MixMessageService/RealtimeIdentify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixMessageServiceServer).RealtimeIdentify(ctx, req.(*RealtimeIdentifyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MixMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.MixMessageService",
	HandlerType: (*MixMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkError",
			Handler:    _MixMessageService_NetworkError_Handler,
		},
		{
			MethodName: "AskOnline",
			Handler:    _MixMessageService_AskOnline_Handler,
		},
		{
			MethodName: "PrecompDecrypt",
			Handler:    _MixMessageService_PrecompDecrypt_Handler,
		},
		{
			MethodName: "PrecompEncrypt",
			Handler:    _MixMessageService_PrecompEncrypt_Handler,
		},
		{
			MethodName: "PrecompGeneration",
			Handler:    _MixMessageService_PrecompGeneration_Handler,
		},
		{
			MethodName: "PrecompReveal",
			Handler:    _MixMessageService_PrecompReveal_Handler,
		},
		{
			MethodName: "PrecompPermute",
			Handler:    _MixMessageService_PrecompPermute_Handler,
		},
		{
			MethodName: "PrecompShare",
			Handler:    _MixMessageService_PrecompShare_Handler,
		},
		{
			MethodName: "RealtimeDecrypt",
			Handler:    _MixMessageService_RealtimeDecrypt_Handler,
		},
		{
			MethodName: "RealtimeEncrypt",
			Handler:    _MixMessageService_RealtimeEncrypt_Handler,
		},
		{
			MethodName: "RealtimePermute",
			Handler:    _MixMessageService_RealtimePermute_Handler,
		},
		{
			MethodName: "RealtimeIdentify",
			Handler:    _MixMessageService_RealtimeIdentify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x8d, 0x9f, 0x37, 0x99, 0xf8, 0xde, 0x6b, 0x33, 0x8f, 0xba, 0x46, 0xdb, 0x38, 0x4a, 0x0b,
	0x18, 0x2d, 0x90, 0x45, 0xd2, 0x17, 0xba, 0x28, 0x90, 0xd4, 0x69, 0xe3, 0xe6, 0x51, 0x43, 0xee,
	0xba, 0x80, 0x63, 0x4f, 0x1c, 0xd5, 0x32, 0x65, 0xd0, 0xca, 0xc3, 0x9f, 0xd0, 0x3f, 0xc8, 0xbe,
	0xe8, 0x4f, 0x76, 0x55, 0x58, 0xa6, 0x64, 0x52, 0xa6, 0x28, 0x05, 0xc8, 0xb2, 0x2b, 0x47, 0xe4,
	0xf0, 0x70, 0xce, 0x39, 0xc3, 0x21, 0x03, 0xa5, 0x81, 0x75, 0x33, 0xc0, 0xd1, 0xa8, 0xdd, 0xc3,
	0xd1, 0xf6, 0x90, 0x39, 0xae, 0x43, 0x96, 0x85, 0x21, 0x23, 0x07, 0x99, 0xbd, 0x4e, 0xdf, 0xc8,
	0x43, 0xb6, 0x69, 0xd1, 0x9e, 0xf7, 0xeb, 0xd0, 0x9e, 0x71, 0x9b, 0x06, 0xd2, 0x64, 0xd8, 0x71,
	0x06, 0xc3, 0x3a, 0x76, 0xd8, 0x78, 0xe8, 0xb6, 0x6c, 0xc7, 0x25, 0x04, 0xb2, 0x93, 0xdf, 0x72,
	0xaa, 0x9a, 0xaa, 0x65, 0x4d, 0xef, 0x6f, 0xb2, 0x03, 0xab, 0x07, 0xd4, 0x0b, 0xc1, 0xee, 0xc9,
	0x14, 0xf6, 0x08, 0xc7, 0xa3, 0x72, 0xba, 0x9a, 0xaa, 0x15, 0x4c, 0xe5, 0x1c, 0x79, 0x07, 0xe5,
	0x60, 0xdc, 0xc4, 0x8e, 0x35, 0xb4, 0x90, 0xba, 0x8d, 0xba, 0xb7, 0x2e, 0xe3, 0xad, 0x8b, 0x9c,
	0x9f, 0xac, 0x6d, 0xb6, 0x99, 0x6b, 0xb5, 0x6d, 0x8e, 0xf8, 0x61, 0x3c, 0xbc, 0x40, 0xf6, 0x15,
	0x6f, 0xdc, 0x72, 0x76, 0xba, 0x36, 0x6a, 0x9e, 0xec, 0xc3, 0x23, 0x3e, 0x27, 0xa0, 0x0a, 0xeb,
	0x73, 0xde, 0x7a, 0x6d, 0x8c, 0x71, 0x01, 0x6b, 0xb2, 0x32, 0x7c, 0x1b, 0x52, 0x86, 0x7f, 0x4c,
	0xe7, 0x92, 0x76, 0x1b, 0x75, 0x4f, 0x9f, 0x25, 0xd3, 0xff, 0x24, 0xaf, 0x20, 0x37, 0x91, 0x6a,
	0xa2, 0x49, 0xa6, 0xb6, 0xbc, 0xb3, 0xb1, 0x2d, 0x9a, 0x32, 0x2f, 0xb3, 0x39, 0x8d, 0x36, 0x6e,
	0x53, 0x81, 0x09, 0x5c, 0x8d, 0xfb, 0x36, 0x21, 0x52, 0xc8, 0x8c, 0x5e, 0x48, 0x41, 0x04, 0x0e,
	0x7d, 0x3f, 0x22, 0x08, 0x34, 0x7d, 0x11, 0x5e, 0x04, 0x3b, 0x7d, 0x42, 0x8a, 0xac, 0xed, 0x5a,
	0x0e, 0x8d, 0x92, 0xc1, 0xa0, 0x50, 0x9e, 0x0b, 0x8e, 0xcf, 0xec, 0xad, 0x9c, 0x99, 0xa1, 0xca,
	0x4c, 0xde, 0xdc, 0x4f, 0xee, 0x67, 0x0a, 0x4a, 0x3c, 0xc0, 0xc4, 0x2b, 0x6c, 0xdb, 0x91, 0x06,
	0xe9, 0xc4, 0x4e, 0xc7, 0x54, 0xed, 0x7b, 0xa8, 0x84, 0x2b, 0x72, 0xce, 0x2a, 0x4d, 0x84, 0x71,
	0x0e, 0xab, 0x52, 0x92, 0xf1, 0x8a, 0xbc, 0x94, 0x15, 0x79, 0xa2, 0x52, 0x64, 0x46, 0x38, 0xa8,
	0xd7, 0x59, 0xd3, 0x68, 0x22, 0x1b, 0x5c, 0xba, 0xf8, 0xb7, 0x69, 0xcc, 0x9d, 0x17, 0xae, 0xcc,
	0xfd, 0x9c, 0x17, 0x41, 0x66, 0xdf, 0x84, 0x21, 0x14, 0xf9, 0x64, 0xeb, 0xa2, 0xcd, 0xa2, 0x1d,
	0x38, 0x84, 0x8d, 0x70, 0xc6, 0xcd, 0xcb, 0x33, 0xdb, 0xea, 0x4c, 0xb3, 0x3e, 0xc2, 0x31, 0x37,
	0x23, 0x2e, 0xcc, 0xe8, 0xc2, 0x8a, 0xb8, 0x63, 0x3c, 0xb3, 0x5d, 0x99, 0xd9, 0x63, 0x15, 0xb3,
	0x20, 0x79, 0x9f, 0xd7, 0xaf, 0x14, 0xac, 0x98, 0xd8, 0xb6, 0x5d, 0x6b, 0x80, 0x71, 0x57, 0x52,
	0x05, 0x16, 0x5b, 0x48, 0xbb, 0xc8, 0x1a, 0x75, 0x8f, 0x44, 0xd6, 0x0c, 0xbe, 0xc9, 0x73, 0x28,
	0x86, 0xab, 0x8b, 0x57, 0xcf, 0xdc, 0xb8, 0x54, 0xa5, 0x82, 0xaf, 0xbc, 0x62, 0x94, 0x73, 0xc6,
	0x77, 0x58, 0x0f, 0xa5, 0x19, 0x2f, 0xc8, 0x6b, 0x59, 0x90, 0xaa, 0x24, 0x88, 0x82, 0xb4, 0xaf,
	0xc9, 0xf5, 0x4c, 0x92, 0xb8, 0x0b, 0xa2, 0x0a, 0xcb, 0x22, 0x83, 0xa9, 0x2a, 0xe2, 0xd0, 0x5d,
	0x84, 0x11, 0x49, 0x26, 0xee, 0xff, 0x89, 0x48, 0x2a, 0x2e, 0x80, 0x1f, 0x82, 0xf1, 0x71, 0x6d,
	0x45, 0xc5, 0x21, 0x7d, 0x47, 0x73, 0x33, 0xc9, 0xcc, 0x4d, 0x7c, 0x8e, 0x13, 0xf1, 0x56, 0x1c,
	0xe4, 0x6f, 0xb0, 0xea, 0xcf, 0x36, 0xba, 0x48, 0x5d, 0xeb, 0x7c, 0x9c, 0xa8, 0x9d, 0x86, 0x6d,
	0x8e, 0xe2, 0x62, 0xc3, 0x83, 0x30, 0x7e, 0x3c, 0x99, 0x37, 0x32, 0x99, 0x4d, 0x25, 0x19, 0x31,
	0x5d, 0x9f, 0x4d, 0x0d, 0x0a, 0x07, 0x8c, 0x39, 0x4c, 0xd8, 0xc2, 0x37, 0x88, 0x6f, 0xe1, 0xd7,
	0x96, 0x01, 0x8b, 0x5e, 0xe4, 0x5e, 0xa7, 0x4f, 0xd6, 0x21, 0x7f, 0x32, 0xea, 0x1d, 0x23, 0xf5,
	0x82, 0x72, 0x26, 0xff, 0xda, 0xf9, 0x9d, 0x87, 0xd2, 0x89, 0x75, 0xc3, 0x97, 0xb4, 0x90, 0x5d,
	0x59, 0x1d, 0x24, 0xfb, 0x50, 0x38, 0x45, 0xf7, 0xda, 0x61, 0x7d, 0x0f, 0x80, 0x3c, 0x94, 0xb2,
	0x13, 0xb7, 0xaf, 0xac, 0xcd, 0x4f, 0x4d, 0x9e, 0xc1, 0x0b, 0x64, 0x17, 0x96, 0xf6, 0x46, 0xfd,
	0x2f, 0xd4, 0xb6, 0x28, 0x92, 0x92, 0xdc, 0x99, 0x2c, 0xda, 0xab, 0x84, 0x86, 0x26, 0x6f, 0xe5,
	0x05, 0x72, 0x08, 0xff, 0xc9, 0xaf, 0x38, 0x62, 0x68, 0x9e, 0x78, 0x7e, 0x0e, 0x45, 0x29, 0x66,
	0xba, 0xfd, 0x0c, 0x89, 0x7b, 0xa6, 0x46, 0x92, 0x0f, 0x9d, 0x12, 0xe9, 0x34, 0x78, 0x99, 0xcc,
	0x9e, 0x2e, 0xe4, 0x99, 0xfe, 0x69, 0xa3, 0xc3, 0xfb, 0x08, 0xff, 0x4a, 0x17, 0x3f, 0xd9, 0x8c,
	0x7e, 0x14, 0x24, 0x63, 0xc8, 0x6b, 0x5e, 0xcd, 0x50, 0x3e, 0x5e, 0x4a, 0xa4, 0x3a, 0x14, 0xc4,
	0xcb, 0x82, 0x54, 0x23, 0xef, 0x11, 0x1d, 0xca, 0x67, 0xf8, 0x3f, 0xd4, 0x61, 0xc9, 0x96, 0xae,
	0xff, 0x26, 0xc4, 0xf2, 0xed, 0xdb, 0xd2, 0xb5, 0xb9, 0x84, 0x58, 0xbe, 0x50, 0x5b, 0xba, 0xd6,
	0xa1, 0xc3, 0x3a, 0x86, 0x62, 0xf8, 0x6c, 0x92, 0xa7, 0xda, 0xa3, 0xab, 0x41, 0x3b, 0xcb, 0x7b,
	0xff, 0x46, 0xee, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x72, 0xfa, 0xa9, 0xda, 0x5b, 0x0e, 0x00,
	0x00,
}
