// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	messages "gitlab.com/xx_network/comms/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientKeyRequest struct {
	// Salt used to generate the Client ID
	Salt []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	// NOTE: The following entry becomes a pointer to the blockchain that denotes
	// where to find the users public key. The node can then read the blockchain
	// and verify that the registration was done properly there.
	ClientTransmissionConfirmation *SignedRegistrationConfirmation `protobuf:"bytes,2,opt,name=ClientTransmissionConfirmation,proto3" json:"ClientTransmissionConfirmation,omitempty"`
	// the timestamp of this request,
	RequestTimestamp int64 `protobuf:"varint,3,opt,name=RequestTimestamp,proto3" json:"RequestTimestamp,omitempty"`
	// timestamp of registration, tied to ClientRegistrationConfirmation
	RegistrationTimestamp int64 `protobuf:"varint,4,opt,name=RegistrationTimestamp,proto3" json:"RegistrationTimestamp,omitempty"`
	// The public key of the client for the purposes of creating the diffie helman sesskey
	ClientDHPubKey       []byte   `protobuf:"bytes,5,opt,name=ClientDHPubKey,proto3" json:"ClientDHPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientKeyRequest) Reset()         { *m = ClientKeyRequest{} }
func (m *ClientKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ClientKeyRequest) ProtoMessage()    {}
func (*ClientKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *ClientKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientKeyRequest.Unmarshal(m, b)
}
func (m *ClientKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientKeyRequest.Marshal(b, m, deterministic)
}
func (m *ClientKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientKeyRequest.Merge(m, src)
}
func (m *ClientKeyRequest) XXX_Size() int {
	return xxx_messageInfo_ClientKeyRequest.Size(m)
}
func (m *ClientKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientKeyRequest proto.InternalMessageInfo

func (m *ClientKeyRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *ClientKeyRequest) GetClientTransmissionConfirmation() *SignedRegistrationConfirmation {
	if m != nil {
		return m.ClientTransmissionConfirmation
	}
	return nil
}

func (m *ClientKeyRequest) GetRequestTimestamp() int64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *ClientKeyRequest) GetRegistrationTimestamp() int64 {
	if m != nil {
		return m.RegistrationTimestamp
	}
	return 0
}

func (m *ClientKeyRequest) GetClientDHPubKey() []byte {
	if m != nil {
		return m.ClientDHPubKey
	}
	return nil
}

type SignedClientBatchKeyRequest struct {
	ClientKeyRequest          []byte                 `protobuf:"bytes,1,opt,name=ClientKeyRequest,proto3" json:"ClientKeyRequest,omitempty"`
	ClientKeyRequestSignature *messages.RSASignature `protobuf:"bytes,2,opt,name=ClientKeyRequestSignature,proto3" json:"ClientKeyRequestSignature,omitempty"`
	Targets                   [][]byte               `protobuf:"bytes,3,rep,name=Targets,proto3" json:"Targets,omitempty"`
	Timeout                   uint64                 `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *SignedClientBatchKeyRequest) Reset()         { *m = SignedClientBatchKeyRequest{} }
func (m *SignedClientBatchKeyRequest) String() string { return proto.CompactTextString(m) }
func (*SignedClientBatchKeyRequest) ProtoMessage()    {}
func (*SignedClientBatchKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *SignedClientBatchKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedClientBatchKeyRequest.Unmarshal(m, b)
}
func (m *SignedClientBatchKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedClientBatchKeyRequest.Marshal(b, m, deterministic)
}
func (m *SignedClientBatchKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedClientBatchKeyRequest.Merge(m, src)
}
func (m *SignedClientBatchKeyRequest) XXX_Size() int {
	return xxx_messageInfo_SignedClientBatchKeyRequest.Size(m)
}
func (m *SignedClientBatchKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedClientBatchKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedClientBatchKeyRequest proto.InternalMessageInfo

func (m *SignedClientBatchKeyRequest) GetClientKeyRequest() []byte {
	if m != nil {
		return m.ClientKeyRequest
	}
	return nil
}

func (m *SignedClientBatchKeyRequest) GetClientKeyRequestSignature() *messages.RSASignature {
	if m != nil {
		return m.ClientKeyRequestSignature
	}
	return nil
}

func (m *SignedClientBatchKeyRequest) GetTargets() [][]byte {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *SignedClientBatchKeyRequest) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type SignedClientKeyRequest struct {
	// Wire serialized format of the ClientKeyRequest Object (above)
	ClientKeyRequest []byte `protobuf:"bytes,1,opt,name=ClientKeyRequest,proto3" json:"ClientKeyRequest,omitempty"`
	// RSA signature signed by the client
	ClientKeyRequestSignature *messages.RSASignature `protobuf:"bytes,2,opt,name=ClientKeyRequestSignature,proto3" json:"ClientKeyRequestSignature,omitempty"`
	// Target Gateway/Node - used to proxy through an alternate gateway
	Target               []byte   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedClientKeyRequest) Reset()         { *m = SignedClientKeyRequest{} }
func (m *SignedClientKeyRequest) String() string { return proto.CompactTextString(m) }
func (*SignedClientKeyRequest) ProtoMessage()    {}
func (*SignedClientKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *SignedClientKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedClientKeyRequest.Unmarshal(m, b)
}
func (m *SignedClientKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedClientKeyRequest.Marshal(b, m, deterministic)
}
func (m *SignedClientKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedClientKeyRequest.Merge(m, src)
}
func (m *SignedClientKeyRequest) XXX_Size() int {
	return xxx_messageInfo_SignedClientKeyRequest.Size(m)
}
func (m *SignedClientKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedClientKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedClientKeyRequest proto.InternalMessageInfo

func (m *SignedClientKeyRequest) GetClientKeyRequest() []byte {
	if m != nil {
		return m.ClientKeyRequest
	}
	return nil
}

func (m *SignedClientKeyRequest) GetClientKeyRequestSignature() *messages.RSASignature {
	if m != nil {
		return m.ClientKeyRequestSignature
	}
	return nil
}

func (m *SignedClientKeyRequest) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type ClientKeyResponse struct {
	EncryptedClientKey     []byte   `protobuf:"bytes,1,opt,name=EncryptedClientKey,proto3" json:"EncryptedClientKey,omitempty"`
	EncryptedClientKeyHMAC []byte   `protobuf:"bytes,2,opt,name=EncryptedClientKeyHMAC,proto3" json:"EncryptedClientKeyHMAC,omitempty"`
	NodeDHPubKey           []byte   `protobuf:"bytes,3,opt,name=NodeDHPubKey,proto3" json:"NodeDHPubKey,omitempty"`
	KeyID                  []byte   `protobuf:"bytes,4,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	ValidUntil             uint64   `protobuf:"varint,5,opt,name=ValidUntil,proto3" json:"ValidUntil,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ClientKeyResponse) Reset()         { *m = ClientKeyResponse{} }
func (m *ClientKeyResponse) String() string { return proto.CompactTextString(m) }
func (*ClientKeyResponse) ProtoMessage()    {}
func (*ClientKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *ClientKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientKeyResponse.Unmarshal(m, b)
}
func (m *ClientKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientKeyResponse.Marshal(b, m, deterministic)
}
func (m *ClientKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientKeyResponse.Merge(m, src)
}
func (m *ClientKeyResponse) XXX_Size() int {
	return xxx_messageInfo_ClientKeyResponse.Size(m)
}
func (m *ClientKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientKeyResponse proto.InternalMessageInfo

func (m *ClientKeyResponse) GetEncryptedClientKey() []byte {
	if m != nil {
		return m.EncryptedClientKey
	}
	return nil
}

func (m *ClientKeyResponse) GetEncryptedClientKeyHMAC() []byte {
	if m != nil {
		return m.EncryptedClientKeyHMAC
	}
	return nil
}

func (m *ClientKeyResponse) GetNodeDHPubKey() []byte {
	if m != nil {
		return m.NodeDHPubKey
	}
	return nil
}

func (m *ClientKeyResponse) GetKeyID() []byte {
	if m != nil {
		return m.KeyID
	}
	return nil
}

func (m *ClientKeyResponse) GetValidUntil() uint64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

type SignedBatchKeyResponse struct {
	SignedKeys           []*SignedKeyResponse `protobuf:"bytes,1,rep,name=SignedKeys,proto3" json:"SignedKeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SignedBatchKeyResponse) Reset()         { *m = SignedBatchKeyResponse{} }
func (m *SignedBatchKeyResponse) String() string { return proto.CompactTextString(m) }
func (*SignedBatchKeyResponse) ProtoMessage()    {}
func (*SignedBatchKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *SignedBatchKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBatchKeyResponse.Unmarshal(m, b)
}
func (m *SignedBatchKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBatchKeyResponse.Marshal(b, m, deterministic)
}
func (m *SignedBatchKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBatchKeyResponse.Merge(m, src)
}
func (m *SignedBatchKeyResponse) XXX_Size() int {
	return xxx_messageInfo_SignedBatchKeyResponse.Size(m)
}
func (m *SignedBatchKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBatchKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBatchKeyResponse proto.InternalMessageInfo

func (m *SignedBatchKeyResponse) GetSignedKeys() []*SignedKeyResponse {
	if m != nil {
		return m.SignedKeys
	}
	return nil
}

type SignedKeyResponse struct {
	KeyResponse                []byte                 `protobuf:"bytes,1,opt,name=KeyResponse,proto3" json:"KeyResponse,omitempty"`
	KeyResponseSignedByGateway *messages.RSASignature `protobuf:"bytes,2,opt,name=KeyResponseSignedByGateway,proto3" json:"KeyResponseSignedByGateway,omitempty"`
	ClientGatewayKey           []byte                 `protobuf:"bytes,3,opt,name=ClientGatewayKey,proto3" json:"ClientGatewayKey,omitempty"`
	Error                      string                 `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *SignedKeyResponse) Reset()         { *m = SignedKeyResponse{} }
func (m *SignedKeyResponse) String() string { return proto.CompactTextString(m) }
func (*SignedKeyResponse) ProtoMessage()    {}
func (*SignedKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *SignedKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedKeyResponse.Unmarshal(m, b)
}
func (m *SignedKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedKeyResponse.Marshal(b, m, deterministic)
}
func (m *SignedKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedKeyResponse.Merge(m, src)
}
func (m *SignedKeyResponse) XXX_Size() int {
	return xxx_messageInfo_SignedKeyResponse.Size(m)
}
func (m *SignedKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignedKeyResponse proto.InternalMessageInfo

func (m *SignedKeyResponse) GetKeyResponse() []byte {
	if m != nil {
		return m.KeyResponse
	}
	return nil
}

func (m *SignedKeyResponse) GetKeyResponseSignedByGateway() *messages.RSASignature {
	if m != nil {
		return m.KeyResponseSignedByGateway
	}
	return nil
}

func (m *SignedKeyResponse) GetClientGatewayKey() []byte {
	if m != nil {
		return m.ClientGatewayKey
	}
	return nil
}

func (m *SignedKeyResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PostPrecompResult struct {
	RoundId              uint64   `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	NumSlots             uint32   `protobuf:"varint,2,opt,name=NumSlots,proto3" json:"NumSlots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostPrecompResult) Reset()         { *m = PostPrecompResult{} }
func (m *PostPrecompResult) String() string { return proto.CompactTextString(m) }
func (*PostPrecompResult) ProtoMessage()    {}
func (*PostPrecompResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *PostPrecompResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostPrecompResult.Unmarshal(m, b)
}
func (m *PostPrecompResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostPrecompResult.Marshal(b, m, deterministic)
}
func (m *PostPrecompResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPrecompResult.Merge(m, src)
}
func (m *PostPrecompResult) XXX_Size() int {
	return xxx_messageInfo_PostPrecompResult.Size(m)
}
func (m *PostPrecompResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPrecompResult.DiscardUnknown(m)
}

var xxx_messageInfo_PostPrecompResult proto.InternalMessageInfo

func (m *PostPrecompResult) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *PostPrecompResult) GetNumSlots() uint32 {
	if m != nil {
		return m.NumSlots
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (m *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(m, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

//
type RoundPublicKey struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Key                  []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoundPublicKey) Reset()         { *m = RoundPublicKey{} }
func (m *RoundPublicKey) String() string { return proto.CompactTextString(m) }
func (*RoundPublicKey) ProtoMessage()    {}
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *RoundPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundPublicKey.Unmarshal(m, b)
}
func (m *RoundPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundPublicKey.Marshal(b, m, deterministic)
}
func (m *RoundPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundPublicKey.Merge(m, src)
}
func (m *RoundPublicKey) XXX_Size() int {
	return xxx_messageInfo_RoundPublicKey.Size(m)
}
func (m *RoundPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_RoundPublicKey proto.InternalMessageInfo

func (m *RoundPublicKey) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *RoundPublicKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

//
type RoundMetrics struct {
	RoundMetricJSON      string   `protobuf:"bytes,1,opt,name=RoundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundMetrics) Reset()         { *m = RoundMetrics{} }
func (m *RoundMetrics) String() string { return proto.CompactTextString(m) }
func (*RoundMetrics) ProtoMessage()    {}
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *RoundMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundMetrics.Unmarshal(m, b)
}
func (m *RoundMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundMetrics.Marshal(b, m, deterministic)
}
func (m *RoundMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundMetrics.Merge(m, src)
}
func (m *RoundMetrics) XXX_Size() int {
	return xxx_messageInfo_RoundMetrics.Size(m)
}
func (m *RoundMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_RoundMetrics proto.InternalMessageInfo

func (m *RoundMetrics) GetRoundMetricJSON() string {
	if m != nil {
		return m.RoundMetricJSON
	}
	return ""
}

// Contains the complete set of messages/slots for a round
type Batch struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	Slots                []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Batch) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *Batch) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type CompletedBatch struct {
	RoundID              uint64   `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Slots                []*Slot  `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompletedBatch) Reset()         { *m = CompletedBatch{} }
func (m *CompletedBatch) String() string { return proto.CompactTextString(m) }
func (*CompletedBatch) ProtoMessage()    {}
func (*CompletedBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *CompletedBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompletedBatch.Unmarshal(m, b)
}
func (m *CompletedBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompletedBatch.Marshal(b, m, deterministic)
}
func (m *CompletedBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompletedBatch.Merge(m, src)
}
func (m *CompletedBatch) XXX_Size() int {
	return xxx_messageInfo_CompletedBatch.Size(m)
}
func (m *CompletedBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CompletedBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CompletedBatch proto.InternalMessageInfo

func (m *CompletedBatch) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *CompletedBatch) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Used as part of header for streaming slots
type BatchInfo struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize            uint32     `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchInfo) Reset()         { *m = BatchInfo{} }
func (m *BatchInfo) String() string { return proto.CompactTextString(m) }
func (*BatchInfo) ProtoMessage()    {}
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *BatchInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInfo.Unmarshal(m, b)
}
func (m *BatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInfo.Marshal(b, m, deterministic)
}
func (m *BatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInfo.Merge(m, src)
}
func (m *BatchInfo) XXX_Size() int {
	return xxx_messageInfo_BatchInfo.Size(m)
}
func (m *BatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInfo proto.InternalMessageInfo

func (m *BatchInfo) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *BatchInfo) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *BatchInfo) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// Used for collecting metrics on a round trip of the system
type RoundTripPing struct {
	Payload              *anypb.Any `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Round                *RoundInfo `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoundTripPing) Reset()         { *m = RoundTripPing{} }
func (m *RoundTripPing) String() string { return proto.CompactTextString(m) }
func (*RoundTripPing) ProtoMessage()    {}
func (*RoundTripPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *RoundTripPing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundTripPing.Unmarshal(m, b)
}
func (m *RoundTripPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundTripPing.Marshal(b, m, deterministic)
}
func (m *RoundTripPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundTripPing.Merge(m, src)
}
func (m *RoundTripPing) XXX_Size() int {
	return xxx_messageInfo_RoundTripPing.Size(m)
}
func (m *RoundTripPing) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundTripPing.DiscardUnknown(m)
}

var xxx_messageInfo_RoundTripPing proto.InternalMessageInfo

func (m *RoundTripPing) GetPayload() *anypb.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *RoundTripPing) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

// Unified Gateway->Server polling message
type ServerPoll struct {
	Full                 *NDFHash `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial              *NDFHash `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate           uint64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
	GatewayVersion       string   `protobuf:"bytes,5,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	GatewayAddress       string   `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerPoll) Reset()         { *m = ServerPoll{} }
func (m *ServerPoll) String() string { return proto.CompactTextString(m) }
func (*ServerPoll) ProtoMessage()    {}
func (*ServerPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *ServerPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerPoll.Unmarshal(m, b)
}
func (m *ServerPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerPoll.Marshal(b, m, deterministic)
}
func (m *ServerPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPoll.Merge(m, src)
}
func (m *ServerPoll) XXX_Size() int {
	return xxx_messageInfo_ServerPoll.Size(m)
}
func (m *ServerPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPoll.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPoll proto.InternalMessageInfo

func (m *ServerPoll) GetFull() *NDFHash {
	if m != nil {
		return m.Full
	}
	return nil
}

func (m *ServerPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *ServerPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *ServerPoll) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ServerPoll) GetGatewayVersion() string {
	if m != nil {
		return m.GatewayVersion
	}
	return ""
}

func (m *ServerPoll) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

// Unified Gateway->Server polling response
type ServerPollResponse struct {
	Id                     []byte       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FullNDF                *NDF         `protobuf:"bytes,2,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`
	PartialNDF             *NDF         `protobuf:"bytes,3,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	Updates                []*RoundInfo `protobuf:"bytes,4,rep,name=Updates,proto3" json:"Updates,omitempty"`
	BatchRequest           *RoundInfo   `protobuf:"bytes,5,opt,name=BatchRequest,proto3" json:"BatchRequest,omitempty"`
	Batch                  *BatchReady  `protobuf:"bytes,6,opt,name=Batch,proto3" json:"Batch,omitempty"`
	EarliestClientRound    uint64       `protobuf:"varint,7,opt,name=EarliestClientRound,proto3" json:"EarliestClientRound,omitempty"`
	EarliestGatewayRound   uint64       `protobuf:"varint,8,opt,name=EarliestGatewayRound,proto3" json:"EarliestGatewayRound,omitempty"`
	EarliestRoundTimestamp int64        `protobuf:"varint,9,opt,name=EarliestRoundTimestamp,proto3" json:"EarliestRoundTimestamp,omitempty"`
	EarliestRoundErr       string       `protobuf:"bytes,10,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_unrecognized       []byte       `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *ServerPollResponse) Reset()         { *m = ServerPollResponse{} }
func (m *ServerPollResponse) String() string { return proto.CompactTextString(m) }
func (*ServerPollResponse) ProtoMessage()    {}
func (*ServerPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *ServerPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerPollResponse.Unmarshal(m, b)
}
func (m *ServerPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerPollResponse.Marshal(b, m, deterministic)
}
func (m *ServerPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPollResponse.Merge(m, src)
}
func (m *ServerPollResponse) XXX_Size() int {
	return xxx_messageInfo_ServerPollResponse.Size(m)
}
func (m *ServerPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPollResponse proto.InternalMessageInfo

func (m *ServerPollResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServerPollResponse) GetFullNDF() *NDF {
	if m != nil {
		return m.FullNDF
	}
	return nil
}

func (m *ServerPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *ServerPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ServerPollResponse) GetBatchRequest() *RoundInfo {
	if m != nil {
		return m.BatchRequest
	}
	return nil
}

func (m *ServerPollResponse) GetBatch() *BatchReady {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *ServerPollResponse) GetEarliestClientRound() uint64 {
	if m != nil {
		return m.EarliestClientRound
	}
	return 0
}

func (m *ServerPollResponse) GetEarliestGatewayRound() uint64 {
	if m != nil {
		return m.EarliestGatewayRound
	}
	return 0
}

func (m *ServerPollResponse) GetEarliestRoundTimestamp() int64 {
	if m != nil {
		return m.EarliestRoundTimestamp
	}
	return 0
}

func (m *ServerPollResponse) GetEarliestRoundErr() string {
	if m != nil {
		return m.EarliestRoundErr
	}
	return ""
}

type BatchReady struct {
	RoundId              uint64   `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchReady) Reset()         { *m = BatchReady{} }
func (m *BatchReady) String() string { return proto.CompactTextString(m) }
func (*BatchReady) ProtoMessage()    {}
func (*BatchReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *BatchReady) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchReady.Unmarshal(m, b)
}
func (m *BatchReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchReady.Marshal(b, m, deterministic)
}
func (m *BatchReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchReady.Merge(m, src)
}
func (m *BatchReady) XXX_Size() int {
	return xxx_messageInfo_BatchReady.Size(m)
}
func (m *BatchReady) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchReady.DiscardUnknown(m)
}

var xxx_messageInfo_BatchReady proto.InternalMessageInfo

func (m *BatchReady) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

// Used as part of Share phase for generation
// of a multi-party Diffie-Helman key
// Node <-> Node message
type SharePiece struct {
	Piece                []byte                 `protobuf:"bytes,1,opt,name=Piece,proto3" json:"Piece,omitempty"`
	Participants         [][]byte               `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	RoundID              uint64                 `protobuf:"varint,3,opt,name=roundID,proto3" json:"roundID,omitempty"`
	Signature            *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SharePiece) Reset()         { *m = SharePiece{} }
func (m *SharePiece) String() string { return proto.CompactTextString(m) }
func (*SharePiece) ProtoMessage()    {}
func (*SharePiece) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *SharePiece) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharePiece.Unmarshal(m, b)
}
func (m *SharePiece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharePiece.Marshal(b, m, deterministic)
}
func (m *SharePiece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharePiece.Merge(m, src)
}
func (m *SharePiece) XXX_Size() int {
	return xxx_messageInfo_SharePiece.Size(m)
}
func (m *SharePiece) XXX_DiscardUnknown() {
	xxx_messageInfo_SharePiece.DiscardUnknown(m)
}

var xxx_messageInfo_SharePiece proto.InternalMessageInfo

func (m *SharePiece) GetPiece() []byte {
	if m != nil {
		return m.Piece
	}
	return nil
}

func (m *SharePiece) GetParticipants() [][]byte {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *SharePiece) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *SharePiece) GetSignature() *messages.RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// StreamChunk represents a part of a response, to be streamed in chunks
// for bandwidth efficiency.
type StreamChunk struct {
	Datum                []byte   `protobuf:"bytes,1,opt,name=Datum,proto3" json:"Datum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamChunk) Reset()         { *m = StreamChunk{} }
func (m *StreamChunk) String() string { return proto.CompactTextString(m) }
func (*StreamChunk) ProtoMessage()    {}
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *StreamChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamChunk.Unmarshal(m, b)
}
func (m *StreamChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamChunk.Marshal(b, m, deterministic)
}
func (m *StreamChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChunk.Merge(m, src)
}
func (m *StreamChunk) XXX_Size() int {
	return xxx_messageInfo_StreamChunk.Size(m)
}
func (m *StreamChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChunk.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChunk proto.InternalMessageInfo

func (m *StreamChunk) GetDatum() []byte {
	if m != nil {
		return m.Datum
	}
	return nil
}

// Client -> Gateway request for information about historical rounds
type HistoricalRounds struct {
	Rounds               []uint64 `protobuf:"varint,1,rep,packed,name=rounds,proto3" json:"rounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalRounds) Reset()         { *m = HistoricalRounds{} }
func (m *HistoricalRounds) String() string { return proto.CompactTextString(m) }
func (*HistoricalRounds) ProtoMessage()    {}
func (*HistoricalRounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{19}
}

func (m *HistoricalRounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalRounds.Unmarshal(m, b)
}
func (m *HistoricalRounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalRounds.Marshal(b, m, deterministic)
}
func (m *HistoricalRounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRounds.Merge(m, src)
}
func (m *HistoricalRounds) XXX_Size() int {
	return xxx_messageInfo_HistoricalRounds.Size(m)
}
func (m *HistoricalRounds) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRounds.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRounds proto.InternalMessageInfo

func (m *HistoricalRounds) GetRounds() []uint64 {
	if m != nil {
		return m.Rounds
	}
	return nil
}

// Gateway's response to client's request for previous (historical) rounds
type HistoricalRoundsResponse struct {
	Rounds               []*RoundInfo `protobuf:"bytes,1,rep,name=Rounds,proto3" json:"Rounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HistoricalRoundsResponse) Reset()         { *m = HistoricalRoundsResponse{} }
func (m *HistoricalRoundsResponse) String() string { return proto.CompactTextString(m) }
func (*HistoricalRoundsResponse) ProtoMessage()    {}
func (*HistoricalRoundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{20}
}

func (m *HistoricalRoundsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalRoundsResponse.Unmarshal(m, b)
}
func (m *HistoricalRoundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalRoundsResponse.Marshal(b, m, deterministic)
}
func (m *HistoricalRoundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRoundsResponse.Merge(m, src)
}
func (m *HistoricalRoundsResponse) XXX_Size() int {
	return xxx_messageInfo_HistoricalRoundsResponse.Size(m)
}
func (m *HistoricalRoundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRoundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRoundsResponse proto.InternalMessageInfo

func (m *HistoricalRoundsResponse) GetRounds() []*RoundInfo {
	if m != nil {
		return m.Rounds
	}
	return nil
}

// Client -> Gateway request for available messages
// The query will be a request for all messages
// available in a round.
type GetMessages struct {
	ClientID             []byte   `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target               []byte   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMessages) Reset()         { *m = GetMessages{} }
func (m *GetMessages) String() string { return proto.CompactTextString(m) }
func (*GetMessages) ProtoMessage()    {}
func (*GetMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{21}
}

func (m *GetMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMessages.Unmarshal(m, b)
}
func (m *GetMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMessages.Marshal(b, m, deterministic)
}
func (m *GetMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessages.Merge(m, src)
}
func (m *GetMessages) XXX_Size() int {
	return xxx_messageInfo_GetMessages.Size(m)
}
func (m *GetMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessages.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessages proto.InternalMessageInfo

func (m *GetMessages) GetClientID() []byte {
	if m != nil {
		return m.ClientID
	}
	return nil
}

func (m *GetMessages) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *GetMessages) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

// Gateway response to a GetMessages request
type GetMessagesResponse struct {
	Messages             []*Slot  `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	HasRound             bool     `protobuf:"varint,2,opt,name=HasRound,proto3" json:"HasRound,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMessagesResponse) Reset()         { *m = GetMessagesResponse{} }
func (m *GetMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*GetMessagesResponse) ProtoMessage()    {}
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{22}
}

func (m *GetMessagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMessagesResponse.Unmarshal(m, b)
}
func (m *GetMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMessagesResponse.Marshal(b, m, deterministic)
}
func (m *GetMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessagesResponse.Merge(m, src)
}
func (m *GetMessagesResponse) XXX_Size() int {
	return xxx_messageInfo_GetMessagesResponse.Size(m)
}
func (m *GetMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessagesResponse proto.InternalMessageInfo

func (m *GetMessagesResponse) GetMessages() []*Slot {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *GetMessagesResponse) GetHasRound() bool {
	if m != nil {
		return m.HasRound
	}
	return false
}

// Gateway -> Gateway message sharing within a team
type RoundMessages struct {
	RoundId              uint64   `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	Messages             []*Slot  `protobuf:"bytes,2,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundMessages) Reset()         { *m = RoundMessages{} }
func (m *RoundMessages) String() string { return proto.CompactTextString(m) }
func (*RoundMessages) ProtoMessage()    {}
func (*RoundMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{23}
}

func (m *RoundMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundMessages.Unmarshal(m, b)
}
func (m *RoundMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundMessages.Marshal(b, m, deterministic)
}
func (m *RoundMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundMessages.Merge(m, src)
}
func (m *RoundMessages) XXX_Size() int {
	return xxx_messageInfo_RoundMessages.Size(m)
}
func (m *RoundMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundMessages.DiscardUnknown(m)
}

var xxx_messageInfo_RoundMessages proto.InternalMessageInfo

func (m *RoundMessages) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *RoundMessages) GetMessages() []*Slot {
	if m != nil {
		return m.Messages
	}
	return nil
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{24}
}

func (m *IDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDList.Unmarshal(m, b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return xxx_messageInfo_IDList.Size(m)
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func (m *IDList) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Represents a single encrypted message in a batch
type Slot struct {
	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	PayloadA             []byte   `protobuf:"bytes,8,opt,name=PayloadA,proto3" json:"PayloadA,omitempty"`
	PayloadB             []byte   `protobuf:"bytes,9,opt,name=PayloadB,proto3" json:"PayloadB,omitempty"`
	Salt                 []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{25}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Slot) GetEncryptedPayloadAKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadAKeys
	}
	return nil
}

func (m *Slot) GetEncryptedPayloadBKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadBKeys
	}
	return nil
}

func (m *Slot) GetPartialPayloadACypherText() []byte {
	if m != nil {
		return m.PartialPayloadACypherText
	}
	return nil
}

func (m *Slot) GetPartialPayloadBCypherText() []byte {
	if m != nil {
		return m.PartialPayloadBCypherText
	}
	return nil
}

func (m *Slot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *Slot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *Slot) GetPayloadA() []byte {
	if m != nil {
		return m.PayloadA
	}
	return nil
}

func (m *Slot) GetPayloadB() []byte {
	if m != nil {
		return m.PayloadB
	}
	return nil
}

func (m *Slot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Slot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

// Unified Client->Gateway polling message
type GatewayPoll struct {
	Partial     *NDFHash `protobuf:"bytes,1,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate  uint64   `protobuf:"varint,2,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	ReceptionID []byte   `protobuf:"bytes,3,opt,name=ReceptionID,proto3" json:"ReceptionID,omitempty"`
	// Define range for ClientBloomFilter searches
	StartTimestamp int64  `protobuf:"varint,4,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	EndTimestamp   int64  `protobuf:"varint,5,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	ClientVersion  []byte `protobuf:"bytes,6,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	// Determines whether client gets filtered network
	// updates or all updates.
	// If true, filtered updates relevant to client (FAILED, COMPLETED, QUEUED)
	// If false, all updates from the network
	FastPolling bool   `protobuf:"varint,7,opt,name=FastPolling,proto3" json:"FastPolling,omitempty"`
	LastRound   uint64 `protobuf:"varint,8,opt,name=LastRound,proto3" json:"LastRound,omitempty"`
	// When set to true, the gateway will not get new NDFs and network round
	// updates. This variable is added as the last field to be backward
	// compatible. If it is not included, then the field defaults to false and
	// will return all updates.
	DisableUpdates       bool     `protobuf:"varint,9,opt,name=DisableUpdates,proto3" json:"DisableUpdates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayPoll) Reset()         { *m = GatewayPoll{} }
func (m *GatewayPoll) String() string { return proto.CompactTextString(m) }
func (*GatewayPoll) ProtoMessage()    {}
func (*GatewayPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{26}
}

func (m *GatewayPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayPoll.Unmarshal(m, b)
}
func (m *GatewayPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayPoll.Marshal(b, m, deterministic)
}
func (m *GatewayPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPoll.Merge(m, src)
}
func (m *GatewayPoll) XXX_Size() int {
	return xxx_messageInfo_GatewayPoll.Size(m)
}
func (m *GatewayPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPoll.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPoll proto.InternalMessageInfo

func (m *GatewayPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *GatewayPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *GatewayPoll) GetReceptionID() []byte {
	if m != nil {
		return m.ReceptionID
	}
	return nil
}

func (m *GatewayPoll) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *GatewayPoll) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *GatewayPoll) GetClientVersion() []byte {
	if m != nil {
		return m.ClientVersion
	}
	return nil
}

func (m *GatewayPoll) GetFastPolling() bool {
	if m != nil {
		return m.FastPolling
	}
	return false
}

func (m *GatewayPoll) GetLastRound() uint64 {
	if m != nil {
		return m.LastRound
	}
	return 0
}

func (m *GatewayPoll) GetDisableUpdates() bool {
	if m != nil {
		return m.DisableUpdates
	}
	return false
}

// Unified Client->Gateway polling response
type GatewayPollResponse struct {
	PartialNDF       *NDF          `protobuf:"bytes,1,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	Updates          []*RoundInfo  `protobuf:"bytes,2,rep,name=Updates,proto3" json:"Updates,omitempty"`
	KnownRounds      []byte        `protobuf:"bytes,3,opt,name=KnownRounds,proto3" json:"KnownRounds,omitempty"`
	Filters          *ClientBlooms `protobuf:"bytes,4,opt,name=Filters,proto3" json:"Filters,omitempty"`
	EarliestRound    uint64        `protobuf:"varint,5,opt,name=EarliestRound,proto3" json:"EarliestRound,omitempty"`
	EarliestRoundErr string        `protobuf:"bytes,6,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
	// The following are used for the homebrew clock offset system in Client
	ReceivedTs           int64    `protobuf:"varint,7,opt,name=ReceivedTs,proto3" json:"ReceivedTs,omitempty"`
	GatewayDelay         int64    `protobuf:"varint,8,opt,name=GatewayDelay,proto3" json:"GatewayDelay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayPollResponse) Reset()         { *m = GatewayPollResponse{} }
func (m *GatewayPollResponse) String() string { return proto.CompactTextString(m) }
func (*GatewayPollResponse) ProtoMessage()    {}
func (*GatewayPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{27}
}

func (m *GatewayPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayPollResponse.Unmarshal(m, b)
}
func (m *GatewayPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayPollResponse.Marshal(b, m, deterministic)
}
func (m *GatewayPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPollResponse.Merge(m, src)
}
func (m *GatewayPollResponse) XXX_Size() int {
	return xxx_messageInfo_GatewayPollResponse.Size(m)
}
func (m *GatewayPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPollResponse proto.InternalMessageInfo

func (m *GatewayPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *GatewayPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *GatewayPollResponse) GetKnownRounds() []byte {
	if m != nil {
		return m.KnownRounds
	}
	return nil
}

func (m *GatewayPollResponse) GetFilters() *ClientBlooms {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *GatewayPollResponse) GetEarliestRound() uint64 {
	if m != nil {
		return m.EarliestRound
	}
	return 0
}

func (m *GatewayPollResponse) GetEarliestRoundErr() string {
	if m != nil {
		return m.EarliestRoundErr
	}
	return ""
}

func (m *GatewayPollResponse) GetReceivedTs() int64 {
	if m != nil {
		return m.ReceivedTs
	}
	return 0
}

func (m *GatewayPollResponse) GetGatewayDelay() int64 {
	if m != nil {
		return m.GatewayDelay
	}
	return 0
}

// Holds a set of ClientBloom and their associated metadata
type ClientBlooms struct {
	Period               int64          `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	FirstTimestamp       int64          `protobuf:"varint,2,opt,name=FirstTimestamp,proto3" json:"FirstTimestamp,omitempty"`
	Filters              []*ClientBloom `protobuf:"bytes,3,rep,name=Filters,proto3" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClientBlooms) Reset()         { *m = ClientBlooms{} }
func (m *ClientBlooms) String() string { return proto.CompactTextString(m) }
func (*ClientBlooms) ProtoMessage()    {}
func (*ClientBlooms) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{28}
}

func (m *ClientBlooms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientBlooms.Unmarshal(m, b)
}
func (m *ClientBlooms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientBlooms.Marshal(b, m, deterministic)
}
func (m *ClientBlooms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientBlooms.Merge(m, src)
}
func (m *ClientBlooms) XXX_Size() int {
	return xxx_messageInfo_ClientBlooms.Size(m)
}
func (m *ClientBlooms) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientBlooms.DiscardUnknown(m)
}

var xxx_messageInfo_ClientBlooms proto.InternalMessageInfo

func (m *ClientBlooms) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *ClientBlooms) GetFirstTimestamp() int64 {
	if m != nil {
		return m.FirstTimestamp
	}
	return 0
}

func (m *ClientBlooms) GetFilters() []*ClientBloom {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Hold a ClientBloomFilter and its associated metadata
type ClientBloom struct {
	Filter               []byte   `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	FirstRound           uint64   `protobuf:"varint,2,opt,name=FirstRound,proto3" json:"FirstRound,omitempty"`
	RoundRange           uint32   `protobuf:"varint,3,opt,name=RoundRange,proto3" json:"RoundRange,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientBloom) Reset()         { *m = ClientBloom{} }
func (m *ClientBloom) String() string { return proto.CompactTextString(m) }
func (*ClientBloom) ProtoMessage()    {}
func (*ClientBloom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{29}
}

func (m *ClientBloom) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientBloom.Unmarshal(m, b)
}
func (m *ClientBloom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientBloom.Marshal(b, m, deterministic)
}
func (m *ClientBloom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientBloom.Merge(m, src)
}
func (m *ClientBloom) XXX_Size() int {
	return xxx_messageInfo_ClientBloom.Size(m)
}
func (m *ClientBloom) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientBloom.DiscardUnknown(m)
}

var xxx_messageInfo_ClientBloom proto.InternalMessageInfo

func (m *ClientBloom) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ClientBloom) GetFirstRound() uint64 {
	if m != nil {
		return m.FirstRound
	}
	return 0
}

func (m *ClientBloom) GetRoundRange() uint32 {
	if m != nil {
		return m.RoundRange
	}
	return 0
}

// Client -> Gateway authentication message
type GatewaySlots struct {
	Messages []*GatewaySlot `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	// Below should have same values as all elements in slice (this is assumed)
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target               []byte   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	IpAddr               string   `protobuf:"bytes,4,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewaySlots) Reset()         { *m = GatewaySlots{} }
func (m *GatewaySlots) String() string { return proto.CompactTextString(m) }
func (*GatewaySlots) ProtoMessage()    {}
func (*GatewaySlots) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{30}
}

func (m *GatewaySlots) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewaySlots.Unmarshal(m, b)
}
func (m *GatewaySlots) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewaySlots.Marshal(b, m, deterministic)
}
func (m *GatewaySlots) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaySlots.Merge(m, src)
}
func (m *GatewaySlots) XXX_Size() int {
	return xxx_messageInfo_GatewaySlots.Size(m)
}
func (m *GatewaySlots) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaySlots.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaySlots proto.InternalMessageInfo

func (m *GatewaySlots) GetMessages() []*GatewaySlot {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *GatewaySlots) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *GatewaySlots) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GatewaySlots) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

// Client -> Gateway authentication message
type GatewaySlot struct {
	Message              *Slot    `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	MAC                  []byte   `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	Target               []byte   `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`
	IpAddr               string   `protobuf:"bytes,5,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewaySlot) Reset()         { *m = GatewaySlot{} }
func (m *GatewaySlot) String() string { return proto.CompactTextString(m) }
func (*GatewaySlot) ProtoMessage()    {}
func (*GatewaySlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{31}
}

func (m *GatewaySlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewaySlot.Unmarshal(m, b)
}
func (m *GatewaySlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewaySlot.Marshal(b, m, deterministic)
}
func (m *GatewaySlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaySlot.Merge(m, src)
}
func (m *GatewaySlot) XXX_Size() int {
	return xxx_messageInfo_GatewaySlot.Size(m)
}
func (m *GatewaySlot) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaySlot.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaySlot proto.InternalMessageInfo

func (m *GatewaySlot) GetMessage() *Slot {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GatewaySlot) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *GatewaySlot) GetMAC() []byte {
	if m != nil {
		return m.MAC
	}
	return nil
}

func (m *GatewaySlot) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GatewaySlot) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

// Gateway -> Client authentication response
type GatewaySlotResponse struct {
	Accepted             bool     `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewaySlotResponse) Reset()         { *m = GatewaySlotResponse{} }
func (m *GatewaySlotResponse) String() string { return proto.CompactTextString(m) }
func (*GatewaySlotResponse) ProtoMessage()    {}
func (*GatewaySlotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{32}
}

func (m *GatewaySlotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewaySlotResponse.Unmarshal(m, b)
}
func (m *GatewaySlotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewaySlotResponse.Marshal(b, m, deterministic)
}
func (m *GatewaySlotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaySlotResponse.Merge(m, src)
}
func (m *GatewaySlotResponse) XXX_Size() int {
	return xxx_messageInfo_GatewaySlotResponse.Size(m)
}
func (m *GatewaySlotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaySlotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaySlotResponse proto.InternalMessageInfo

func (m *GatewaySlotResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *GatewaySlotResponse) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

// Gateway -> Gateway gossip of all Sender IDs in a Batch
type BatchSenders struct {
	SenderIds            [][]byte `protobuf:"bytes,1,rep,name=SenderIds,proto3" json:"SenderIds,omitempty"`
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Ips                  [][]byte `protobuf:"bytes,3,rep,name=Ips,proto3" json:"Ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchSenders) Reset()         { *m = BatchSenders{} }
func (m *BatchSenders) String() string { return proto.CompactTextString(m) }
func (*BatchSenders) ProtoMessage()    {}
func (*BatchSenders) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{33}
}

func (m *BatchSenders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchSenders.Unmarshal(m, b)
}
func (m *BatchSenders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchSenders.Marshal(b, m, deterministic)
}
func (m *BatchSenders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSenders.Merge(m, src)
}
func (m *BatchSenders) XXX_Size() int {
	return xxx_messageInfo_BatchSenders.Size(m)
}
func (m *BatchSenders) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSenders.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSenders proto.InternalMessageInfo

func (m *BatchSenders) GetSenderIds() [][]byte {
	if m != nil {
		return m.SenderIds
	}
	return nil
}

func (m *BatchSenders) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *BatchSenders) GetIps() [][]byte {
	if m != nil {
		return m.Ips
	}
	return nil
}

// Gateway -> Gateway gossip of all recipient IDs in a Batch
type Recipients struct {
	RecipientIds         [][]byte `protobuf:"bytes,1,rep,name=RecipientIds,proto3" json:"RecipientIds,omitempty"`
	RoundID              uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	RoundTS              uint64   `protobuf:"varint,3,opt,name=RoundTS,proto3" json:"RoundTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Recipients) Reset()         { *m = Recipients{} }
func (m *Recipients) String() string { return proto.CompactTextString(m) }
func (*Recipients) ProtoMessage()    {}
func (*Recipients) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{34}
}

func (m *Recipients) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Recipients.Unmarshal(m, b)
}
func (m *Recipients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Recipients.Marshal(b, m, deterministic)
}
func (m *Recipients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipients.Merge(m, src)
}
func (m *Recipients) XXX_Size() int {
	return xxx_messageInfo_Recipients.Size(m)
}
func (m *Recipients) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipients.DiscardUnknown(m)
}

var xxx_messageInfo_Recipients proto.InternalMessageInfo

func (m *Recipients) GetRecipientIds() [][]byte {
	if m != nil {
		return m.RecipientIds
	}
	return nil
}

func (m *Recipients) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *Recipients) GetRoundTS() uint64 {
	if m != nil {
		return m.RoundTS
	}
	return 0
}

// Server -> Permissioning message for whether a node has been registered
type RegisteredNodeConfirmation struct {
	IsRegistered         bool     `protobuf:"varint,1,opt,name=IsRegistered,proto3" json:"IsRegistered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredNodeConfirmation) Reset()         { *m = RegisteredNodeConfirmation{} }
func (m *RegisteredNodeConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodeConfirmation) ProtoMessage()    {}
func (*RegisteredNodeConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{35}
}

func (m *RegisteredNodeConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredNodeConfirmation.Unmarshal(m, b)
}
func (m *RegisteredNodeConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredNodeConfirmation.Marshal(b, m, deterministic)
}
func (m *RegisteredNodeConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodeConfirmation.Merge(m, src)
}
func (m *RegisteredNodeConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegisteredNodeConfirmation.Size(m)
}
func (m *RegisteredNodeConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodeConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodeConfirmation proto.InternalMessageInfo

func (m *RegisteredNodeConfirmation) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type RegisteredNodeCheck struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredNodeCheck) Reset()         { *m = RegisteredNodeCheck{} }
func (m *RegisteredNodeCheck) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodeCheck) ProtoMessage()    {}
func (*RegisteredNodeCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{36}
}

func (m *RegisteredNodeCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredNodeCheck.Unmarshal(m, b)
}
func (m *RegisteredNodeCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredNodeCheck.Marshal(b, m, deterministic)
}
func (m *RegisteredNodeCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodeCheck.Merge(m, src)
}
func (m *RegisteredNodeCheck) XXX_Size() int {
	return xxx_messageInfo_RegisteredNodeCheck.Size(m)
}
func (m *RegisteredNodeCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodeCheck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodeCheck proto.InternalMessageInfo

func (m *RegisteredNodeCheck) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

//The ndf Hash used to compare ndf on permissioning and client
type NDFHash struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NDFHash) Reset()         { *m = NDFHash{} }
func (m *NDFHash) String() string { return proto.CompactTextString(m) }
func (*NDFHash) ProtoMessage()    {}
func (*NDFHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{37}
}

func (m *NDFHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NDFHash.Unmarshal(m, b)
}
func (m *NDFHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NDFHash.Marshal(b, m, deterministic)
}
func (m *NDFHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NDFHash.Merge(m, src)
}
func (m *NDFHash) XXX_Size() int {
	return xxx_messageInfo_NDFHash.Size(m)
}
func (m *NDFHash) XXX_DiscardUnknown() {
	xxx_messageInfo_NDFHash.DiscardUnknown(m)
}

var xxx_messageInfo_NDFHash proto.InternalMessageInfo

func (m *NDFHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// The Network Definition File is defined as a
// JSON structure in primitives/ndf. Can be provided in a
// "complete" and "incomplete" format. An incomplete
// NDF is provided to level 4 (ie clients) to protect the inner levels
type NDF struct {
	Ndf                  []byte                 `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
	Signature            *messages.RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NDF) Reset()         { *m = NDF{} }
func (m *NDF) String() string { return proto.CompactTextString(m) }
func (*NDF) ProtoMessage()    {}
func (*NDF) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{38}
}

func (m *NDF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NDF.Unmarshal(m, b)
}
func (m *NDF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NDF.Marshal(b, m, deterministic)
}
func (m *NDF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NDF.Merge(m, src)
}
func (m *NDF) XXX_Size() int {
	return xxx_messageInfo_NDF.Size(m)
}
func (m *NDF) XXX_DiscardUnknown() {
	xxx_messageInfo_NDF.DiscardUnknown(m)
}

var xxx_messageInfo_NDF proto.InternalMessageInfo

func (m *NDF) GetNdf() []byte {
	if m != nil {
		return m.Ndf
	}
	return nil
}

func (m *NDF) GetSignature() *messages.RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// NodeRegistration contains information to register a node.
// Note: this includes the desired server and gateway addresses.
// The registration server is free to ignore these addresses and
// derive the address from the network connection.
type NodeRegistration struct {
	Salt                 []byte   `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ServerTlsCert        string   `protobuf:"bytes,2,opt,name=ServerTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	ServerAddress        string   `protobuf:"bytes,3,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	ServerPort           uint32   `protobuf:"varint,4,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	GatewayTlsCert       string   `protobuf:"bytes,5,opt,name=GatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	GatewayAddress       string   `protobuf:"bytes,6,opt,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	GatewayPort          uint32   `protobuf:"varint,7,opt,name=GatewayPort,proto3" json:"GatewayPort,omitempty"`
	RegistrationCode     string   `protobuf:"bytes,8,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRegistration) Reset()         { *m = NodeRegistration{} }
func (m *NodeRegistration) String() string { return proto.CompactTextString(m) }
func (*NodeRegistration) ProtoMessage()    {}
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{39}
}

func (m *NodeRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRegistration.Unmarshal(m, b)
}
func (m *NodeRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRegistration.Marshal(b, m, deterministic)
}
func (m *NodeRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRegistration.Merge(m, src)
}
func (m *NodeRegistration) XXX_Size() int {
	return xxx_messageInfo_NodeRegistration.Size(m)
}
func (m *NodeRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRegistration proto.InternalMessageInfo

func (m *NodeRegistration) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *NodeRegistration) GetServerTlsCert() string {
	if m != nil {
		return m.ServerTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *NodeRegistration) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *NodeRegistration) GetGatewayTlsCert() string {
	if m != nil {
		return m.GatewayTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *NodeRegistration) GetGatewayPort() uint32 {
	if m != nil {
		return m.GatewayPort
	}
	return 0
}

func (m *NodeRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

// UserRegistration message to initialize registration process
// Client -> ClientRegistrar
type ClientRegistration struct {
	RegistrationCode            string   `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	ClientTransmissionRSAPubKey string   `protobuf:"bytes,2,opt,name=ClientTransmissionRSAPubKey,proto3" json:"ClientTransmissionRSAPubKey,omitempty"`
	ClientReceptionRSAPubKey    string   `protobuf:"bytes,3,opt,name=ClientReceptionRSAPubKey,proto3" json:"ClientReceptionRSAPubKey,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *ClientRegistration) Reset()         { *m = ClientRegistration{} }
func (m *ClientRegistration) String() string { return proto.CompactTextString(m) }
func (*ClientRegistration) ProtoMessage()    {}
func (*ClientRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{40}
}

func (m *ClientRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRegistration.Unmarshal(m, b)
}
func (m *ClientRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRegistration.Marshal(b, m, deterministic)
}
func (m *ClientRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRegistration.Merge(m, src)
}
func (m *ClientRegistration) XXX_Size() int {
	return xxx_messageInfo_ClientRegistration.Size(m)
}
func (m *ClientRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRegistration proto.InternalMessageInfo

func (m *ClientRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *ClientRegistration) GetClientTransmissionRSAPubKey() string {
	if m != nil {
		return m.ClientTransmissionRSAPubKey
	}
	return ""
}

func (m *ClientRegistration) GetClientReceptionRSAPubKey() string {
	if m != nil {
		return m.ClientReceptionRSAPubKey
	}
	return ""
}

// ClientRegistrationConfirmation to confirm registration with Clients
// ClientRegistrar -> Client (Response to ClientRegistration)
type ClientRegistrationConfirmation struct {
	RSAPubKey            string   `protobuf:"bytes,1,opt,name=RSAPubKey,proto3" json:"RSAPubKey,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRegistrationConfirmation) Reset()         { *m = ClientRegistrationConfirmation{} }
func (m *ClientRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*ClientRegistrationConfirmation) ProtoMessage()    {}
func (*ClientRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{41}
}

func (m *ClientRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRegistrationConfirmation.Unmarshal(m, b)
}
func (m *ClientRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *ClientRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRegistrationConfirmation.Merge(m, src)
}
func (m *ClientRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_ClientRegistrationConfirmation.Size(m)
}
func (m *ClientRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRegistrationConfirmation proto.InternalMessageInfo

func (m *ClientRegistrationConfirmation) GetRSAPubKey() string {
	if m != nil {
		return m.RSAPubKey
	}
	return ""
}

func (m *ClientRegistrationConfirmation) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SignedRegistrationConfirmation struct {
	ClientRegistrationConfirmation []byte                 `protobuf:"bytes,1,opt,name=ClientRegistrationConfirmation,proto3" json:"ClientRegistrationConfirmation,omitempty"`
	RegistrarSignature             *messages.RSASignature `protobuf:"bytes,2,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}               `json:"-"`
	XXX_unrecognized               []byte                 `json:"-"`
	XXX_sizecache                  int32                  `json:"-"`
}

func (m *SignedRegistrationConfirmation) Reset()         { *m = SignedRegistrationConfirmation{} }
func (m *SignedRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*SignedRegistrationConfirmation) ProtoMessage()    {}
func (*SignedRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{42}
}

func (m *SignedRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedRegistrationConfirmation.Unmarshal(m, b)
}
func (m *SignedRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *SignedRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedRegistrationConfirmation.Merge(m, src)
}
func (m *SignedRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_SignedRegistrationConfirmation.Size(m)
}
func (m *SignedRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_SignedRegistrationConfirmation proto.InternalMessageInfo

func (m *SignedRegistrationConfirmation) GetClientRegistrationConfirmation() []byte {
	if m != nil {
		return m.ClientRegistrationConfirmation
	}
	return nil
}

func (m *SignedRegistrationConfirmation) GetRegistrarSignature() *messages.RSASignature {
	if m != nil {
		return m.RegistrarSignature
	}
	return nil
}

type SignedClientRegistrationConfirmations struct {
	ClientTransmissionConfirmation *SignedRegistrationConfirmation `protobuf:"bytes,1,opt,name=ClientTransmissionConfirmation,proto3" json:"ClientTransmissionConfirmation,omitempty"`
	ClientReceptionConfirmation    *SignedRegistrationConfirmation `protobuf:"bytes,2,opt,name=ClientReceptionConfirmation,proto3" json:"ClientReceptionConfirmation,omitempty"`
	Error                          string                          `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                        `json:"-"`
	XXX_unrecognized               []byte                          `json:"-"`
	XXX_sizecache                  int32                           `json:"-"`
}

func (m *SignedClientRegistrationConfirmations) Reset()         { *m = SignedClientRegistrationConfirmations{} }
func (m *SignedClientRegistrationConfirmations) String() string { return proto.CompactTextString(m) }
func (*SignedClientRegistrationConfirmations) ProtoMessage()    {}
func (*SignedClientRegistrationConfirmations) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{43}
}

func (m *SignedClientRegistrationConfirmations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedClientRegistrationConfirmations.Unmarshal(m, b)
}
func (m *SignedClientRegistrationConfirmations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedClientRegistrationConfirmations.Marshal(b, m, deterministic)
}
func (m *SignedClientRegistrationConfirmations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedClientRegistrationConfirmations.Merge(m, src)
}
func (m *SignedClientRegistrationConfirmations) XXX_Size() int {
	return xxx_messageInfo_SignedClientRegistrationConfirmations.Size(m)
}
func (m *SignedClientRegistrationConfirmations) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedClientRegistrationConfirmations.DiscardUnknown(m)
}

var xxx_messageInfo_SignedClientRegistrationConfirmations proto.InternalMessageInfo

func (m *SignedClientRegistrationConfirmations) GetClientTransmissionConfirmation() *SignedRegistrationConfirmation {
	if m != nil {
		return m.ClientTransmissionConfirmation
	}
	return nil
}

func (m *SignedClientRegistrationConfirmations) GetClientReceptionConfirmation() *SignedRegistrationConfirmation {
	if m != nil {
		return m.ClientReceptionConfirmation
	}
	return nil
}

func (m *SignedClientRegistrationConfirmations) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// ClientVersion contains a version string for the client
type ClientVersion struct {
	Version              string   `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientVersion) Reset()         { *m = ClientVersion{} }
func (m *ClientVersion) String() string { return proto.CompactTextString(m) }
func (*ClientVersion) ProtoMessage()    {}
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{44}
}

func (m *ClientVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientVersion.Unmarshal(m, b)
}
func (m *ClientVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientVersion.Marshal(b, m, deterministic)
}
func (m *ClientVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersion.Merge(m, src)
}
func (m *ClientVersion) XXX_Size() int {
	return xxx_messageInfo_ClientVersion.Size(m)
}
func (m *ClientVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersion proto.InternalMessageInfo

func (m *ClientVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Unified Server->Permissioning polling message
type PermissioningPoll struct {
	Full                 *NDFHash       `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial              *NDFHash       `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate           uint64         `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Activity             uint32         `protobuf:"varint,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Error                *RoundError    `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
	GatewayAddress       string         `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
	GatewayVersion       string         `protobuf:"bytes,7,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	ServerAddress        string         `protobuf:"bytes,8,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	ServerVersion        string         `protobuf:"bytes,9,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	ClientErrors         []*ClientError `protobuf:"bytes,10,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PermissioningPoll) Reset()         { *m = PermissioningPoll{} }
func (m *PermissioningPoll) String() string { return proto.CompactTextString(m) }
func (*PermissioningPoll) ProtoMessage()    {}
func (*PermissioningPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{45}
}

func (m *PermissioningPoll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissioningPoll.Unmarshal(m, b)
}
func (m *PermissioningPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissioningPoll.Marshal(b, m, deterministic)
}
func (m *PermissioningPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissioningPoll.Merge(m, src)
}
func (m *PermissioningPoll) XXX_Size() int {
	return xxx_messageInfo_PermissioningPoll.Size(m)
}
func (m *PermissioningPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissioningPoll.DiscardUnknown(m)
}

var xxx_messageInfo_PermissioningPoll proto.InternalMessageInfo

func (m *PermissioningPoll) GetFull() *NDFHash {
	if m != nil {
		return m.Full
	}
	return nil
}

func (m *PermissioningPoll) GetPartial() *NDFHash {
	if m != nil {
		return m.Partial
	}
	return nil
}

func (m *PermissioningPoll) GetLastUpdate() uint64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *PermissioningPoll) GetActivity() uint32 {
	if m != nil {
		return m.Activity
	}
	return 0
}

func (m *PermissioningPoll) GetError() *RoundError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PermissioningPoll) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *PermissioningPoll) GetGatewayVersion() string {
	if m != nil {
		return m.GatewayVersion
	}
	return ""
}

func (m *PermissioningPoll) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *PermissioningPoll) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *PermissioningPoll) GetClientErrors() []*ClientError {
	if m != nil {
		return m.ClientErrors
	}
	return nil
}

// Info containing error among a client
// Passed server -> Permissioning via the poll comm
type ClientError struct {
	ClientId             []byte   `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Source               []byte   `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientError) Reset()         { *m = ClientError{} }
func (m *ClientError) String() string { return proto.CompactTextString(m) }
func (*ClientError) ProtoMessage()    {}
func (*ClientError) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{46}
}

func (m *ClientError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientError.Unmarshal(m, b)
}
func (m *ClientError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientError.Marshal(b, m, deterministic)
}
func (m *ClientError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientError.Merge(m, src)
}
func (m *ClientError) XXX_Size() int {
	return xxx_messageInfo_ClientError.Size(m)
}
func (m *ClientError) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientError.DiscardUnknown(m)
}

var xxx_messageInfo_ClientError proto.InternalMessageInfo

func (m *ClientError) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *ClientError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ClientError) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

// Unified Server->Permissioning polling response
type PermissionPollResponse struct {
	FullNDF                *NDF         `protobuf:"bytes,1,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`
	PartialNDF             *NDF         `protobuf:"bytes,2,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`
	Updates                []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`
	EarliestClientRound    uint64       `protobuf:"varint,4,opt,name=EarliestClientRound,proto3" json:"EarliestClientRound,omitempty"`
	EarliestGatewayRound   uint64       `protobuf:"varint,5,opt,name=EarliestGatewayRound,proto3" json:"EarliestGatewayRound,omitempty"`
	EarliestRoundTimestamp int64        `protobuf:"varint,6,opt,name=EarliestRoundTimestamp,proto3" json:"EarliestRoundTimestamp,omitempty"`
	EarliestRoundErr       string       `protobuf:"bytes,7,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_unrecognized       []byte       `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *PermissionPollResponse) Reset()         { *m = PermissionPollResponse{} }
func (m *PermissionPollResponse) String() string { return proto.CompactTextString(m) }
func (*PermissionPollResponse) ProtoMessage()    {}
func (*PermissionPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{47}
}

func (m *PermissionPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionPollResponse.Unmarshal(m, b)
}
func (m *PermissionPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionPollResponse.Marshal(b, m, deterministic)
}
func (m *PermissionPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionPollResponse.Merge(m, src)
}
func (m *PermissionPollResponse) XXX_Size() int {
	return xxx_messageInfo_PermissionPollResponse.Size(m)
}
func (m *PermissionPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionPollResponse proto.InternalMessageInfo

func (m *PermissionPollResponse) GetFullNDF() *NDF {
	if m != nil {
		return m.FullNDF
	}
	return nil
}

func (m *PermissionPollResponse) GetPartialNDF() *NDF {
	if m != nil {
		return m.PartialNDF
	}
	return nil
}

func (m *PermissionPollResponse) GetUpdates() []*RoundInfo {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *PermissionPollResponse) GetEarliestClientRound() uint64 {
	if m != nil {
		return m.EarliestClientRound
	}
	return 0
}

func (m *PermissionPollResponse) GetEarliestGatewayRound() uint64 {
	if m != nil {
		return m.EarliestGatewayRound
	}
	return 0
}

func (m *PermissionPollResponse) GetEarliestRoundTimestamp() int64 {
	if m != nil {
		return m.EarliestRoundTimestamp
	}
	return 0
}

func (m *PermissionPollResponse) GetEarliestRoundErr() string {
	if m != nil {
		return m.EarliestRoundErr
	}
	return ""
}

// Registration token to be associated with the client
type NotificationRegisterRequest struct {
	Token                 string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IntermediaryId        []byte `protobuf:"bytes,2,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	TransmissionRsa       []byte `protobuf:"bytes,3,opt,name=TransmissionRsa,proto3" json:"TransmissionRsa,omitempty"`
	TransmissionSalt      []byte `protobuf:"bytes,4,opt,name=TransmissionSalt,proto3" json:"TransmissionSalt,omitempty"`
	TransmissionRsaSig    []byte `protobuf:"bytes,5,opt,name=TransmissionRsaSig,proto3" json:"TransmissionRsaSig,omitempty"`
	IIDTransmissionRsaSig []byte `protobuf:"bytes,6,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
	// Timestamp in which user registered with the network (ie permissioning)
	RegistrationTimestamp int64    `protobuf:"varint,7,opt,name=RegistrationTimestamp,proto3" json:"RegistrationTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *NotificationRegisterRequest) Reset()         { *m = NotificationRegisterRequest{} }
func (m *NotificationRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationRegisterRequest) ProtoMessage()    {}
func (*NotificationRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{48}
}

func (m *NotificationRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationRegisterRequest.Unmarshal(m, b)
}
func (m *NotificationRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationRegisterRequest.Marshal(b, m, deterministic)
}
func (m *NotificationRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationRegisterRequest.Merge(m, src)
}
func (m *NotificationRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationRegisterRequest.Size(m)
}
func (m *NotificationRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationRegisterRequest proto.InternalMessageInfo

func (m *NotificationRegisterRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NotificationRegisterRequest) GetIntermediaryId() []byte {
	if m != nil {
		return m.IntermediaryId
	}
	return nil
}

func (m *NotificationRegisterRequest) GetTransmissionRsa() []byte {
	if m != nil {
		return m.TransmissionRsa
	}
	return nil
}

func (m *NotificationRegisterRequest) GetTransmissionSalt() []byte {
	if m != nil {
		return m.TransmissionSalt
	}
	return nil
}

func (m *NotificationRegisterRequest) GetTransmissionRsaSig() []byte {
	if m != nil {
		return m.TransmissionRsaSig
	}
	return nil
}

func (m *NotificationRegisterRequest) GetIIDTransmissionRsaSig() []byte {
	if m != nil {
		return m.IIDTransmissionRsaSig
	}
	return nil
}

func (m *NotificationRegisterRequest) GetRegistrationTimestamp() int64 {
	if m != nil {
		return m.RegistrationTimestamp
	}
	return 0
}

type NotificationUnregisterRequest struct {
	IntermediaryId        []byte   `protobuf:"bytes,1,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	IIDTransmissionRsaSig []byte   `protobuf:"bytes,2,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *NotificationUnregisterRequest) Reset()         { *m = NotificationUnregisterRequest{} }
func (m *NotificationUnregisterRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationUnregisterRequest) ProtoMessage()    {}
func (*NotificationUnregisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{49}
}

func (m *NotificationUnregisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationUnregisterRequest.Unmarshal(m, b)
}
func (m *NotificationUnregisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationUnregisterRequest.Marshal(b, m, deterministic)
}
func (m *NotificationUnregisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationUnregisterRequest.Merge(m, src)
}
func (m *NotificationUnregisterRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationUnregisterRequest.Size(m)
}
func (m *NotificationUnregisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationUnregisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationUnregisterRequest proto.InternalMessageInfo

func (m *NotificationUnregisterRequest) GetIntermediaryId() []byte {
	if m != nil {
		return m.IntermediaryId
	}
	return nil
}

func (m *NotificationUnregisterRequest) GetIIDTransmissionRsaSig() []byte {
	if m != nil {
		return m.IIDTransmissionRsaSig
	}
	return nil
}

// The list of user IDS for notification polling
type UserIdList struct {
	IDs                  [][]byte `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserIdList) Reset()         { *m = UserIdList{} }
func (m *UserIdList) String() string { return proto.CompactTextString(m) }
func (*UserIdList) ProtoMessage()    {}
func (*UserIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{50}
}

func (m *UserIdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserIdList.Unmarshal(m, b)
}
func (m *UserIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserIdList.Marshal(b, m, deterministic)
}
func (m *UserIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdList.Merge(m, src)
}
func (m *UserIdList) XXX_Size() int {
	return xxx_messageInfo_UserIdList.Size(m)
}
func (m *UserIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdList.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdList proto.InternalMessageInfo

func (m *UserIdList) GetIDs() [][]byte {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Notification data transmitted to the notification bot from gateway
type NotificationBatch struct {
	RoundID              uint64              `protobuf:"varint,1,opt,name=roundID,proto3" json:"roundID,omitempty"`
	Notifications        []*NotificationData `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NotificationBatch) Reset()         { *m = NotificationBatch{} }
func (m *NotificationBatch) String() string { return proto.CompactTextString(m) }
func (*NotificationBatch) ProtoMessage()    {}
func (*NotificationBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{51}
}

func (m *NotificationBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationBatch.Unmarshal(m, b)
}
func (m *NotificationBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationBatch.Marshal(b, m, deterministic)
}
func (m *NotificationBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationBatch.Merge(m, src)
}
func (m *NotificationBatch) XXX_Size() int {
	return xxx_messageInfo_NotificationBatch.Size(m)
}
func (m *NotificationBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationBatch.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationBatch proto.InternalMessageInfo

func (m *NotificationBatch) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *NotificationBatch) GetNotifications() []*NotificationData {
	if m != nil {
		return m.Notifications
	}
	return nil
}

// Data for a single notification
type NotificationData struct {
	EphemeralID          int64    `protobuf:"varint,1,opt,name=ephemeralID,proto3" json:"ephemeralID,omitempty"`
	IdentityFP           []byte   `protobuf:"bytes,2,opt,name=identityFP,proto3" json:"identityFP,omitempty"`
	MessageHash          []byte   `protobuf:"bytes,3,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationData) Reset()         { *m = NotificationData{} }
func (m *NotificationData) String() string { return proto.CompactTextString(m) }
func (*NotificationData) ProtoMessage()    {}
func (*NotificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{52}
}

func (m *NotificationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationData.Unmarshal(m, b)
}
func (m *NotificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationData.Marshal(b, m, deterministic)
}
func (m *NotificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationData.Merge(m, src)
}
func (m *NotificationData) XXX_Size() int {
	return xxx_messageInfo_NotificationData.Size(m)
}
func (m *NotificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationData.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationData proto.InternalMessageInfo

func (m *NotificationData) GetEphemeralID() int64 {
	if m != nil {
		return m.EphemeralID
	}
	return 0
}

func (m *NotificationData) GetIdentityFP() []byte {
	if m != nil {
		return m.IdentityFP
	}
	return nil
}

func (m *NotificationData) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

// Holds information for a user requesting a channel lease from UD
type ChannelLeaseRequest struct {
	UserID                 []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserEd25519PubKey      []byte   `protobuf:"bytes,2,opt,name=UserEd25519PubKey,proto3" json:"UserEd25519PubKey,omitempty"`
	Timestamp              int64    `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	UserPubKeyRSASignature []byte   `protobuf:"bytes,4,opt,name=UserPubKeyRSASignature,proto3" json:"UserPubKeyRSASignature,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ChannelLeaseRequest) Reset()         { *m = ChannelLeaseRequest{} }
func (m *ChannelLeaseRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelLeaseRequest) ProtoMessage()    {}
func (*ChannelLeaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{53}
}

func (m *ChannelLeaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelLeaseRequest.Unmarshal(m, b)
}
func (m *ChannelLeaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelLeaseRequest.Marshal(b, m, deterministic)
}
func (m *ChannelLeaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelLeaseRequest.Merge(m, src)
}
func (m *ChannelLeaseRequest) XXX_Size() int {
	return xxx_messageInfo_ChannelLeaseRequest.Size(m)
}
func (m *ChannelLeaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelLeaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelLeaseRequest proto.InternalMessageInfo

func (m *ChannelLeaseRequest) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ChannelLeaseRequest) GetUserEd25519PubKey() []byte {
	if m != nil {
		return m.UserEd25519PubKey
	}
	return nil
}

func (m *ChannelLeaseRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChannelLeaseRequest) GetUserPubKeyRSASignature() []byte {
	if m != nil {
		return m.UserPubKeyRSASignature
	}
	return nil
}

// Contains UD response to a ChannelLeaseRequest, including lease & signature
type ChannelLeaseResponse struct {
	Lease                   int64    `protobuf:"varint,1,opt,name=Lease,proto3" json:"Lease,omitempty"`
	UserEd25519PubKey       []byte   `protobuf:"bytes,2,opt,name=UserEd25519PubKey,proto3" json:"UserEd25519PubKey,omitempty"`
	UDLeaseEd25519Signature []byte   `protobuf:"bytes,3,opt,name=UDLeaseEd25519Signature,proto3" json:"UDLeaseEd25519Signature,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ChannelLeaseResponse) Reset()         { *m = ChannelLeaseResponse{} }
func (m *ChannelLeaseResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelLeaseResponse) ProtoMessage()    {}
func (*ChannelLeaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{54}
}

func (m *ChannelLeaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelLeaseResponse.Unmarshal(m, b)
}
func (m *ChannelLeaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelLeaseResponse.Marshal(b, m, deterministic)
}
func (m *ChannelLeaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelLeaseResponse.Merge(m, src)
}
func (m *ChannelLeaseResponse) XXX_Size() int {
	return xxx_messageInfo_ChannelLeaseResponse.Size(m)
}
func (m *ChannelLeaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelLeaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelLeaseResponse proto.InternalMessageInfo

func (m *ChannelLeaseResponse) GetLease() int64 {
	if m != nil {
		return m.Lease
	}
	return 0
}

func (m *ChannelLeaseResponse) GetUserEd25519PubKey() []byte {
	if m != nil {
		return m.UserEd25519PubKey
	}
	return nil
}

func (m *ChannelLeaseResponse) GetUDLeaseEd25519Signature() []byte {
	if m != nil {
		return m.UDLeaseEd25519Signature
	}
	return nil
}

// Holds information for a UDB user registration request
type UDBUserRegistration struct {
	PermissioningSignature []byte               `protobuf:"bytes,1,opt,name=PermissioningSignature,proto3" json:"PermissioningSignature,omitempty"`
	RSAPublicPem           string               `protobuf:"bytes,2,opt,name=RSAPublicPem,proto3" json:"RSAPublicPem,omitempty"`
	Timestamp              int64                `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	IdentityRegistration   *Identity            `protobuf:"bytes,4,opt,name=IdentityRegistration,proto3" json:"IdentityRegistration,omitempty"`
	IdentitySignature      []byte               `protobuf:"bytes,5,opt,name=IdentitySignature,proto3" json:"IdentitySignature,omitempty"`
	Frs                    *FactRegisterRequest `protobuf:"bytes,6,opt,name=frs,proto3" json:"frs,omitempty"`
	UID                    []byte               `protobuf:"bytes,7,opt,name=UID,proto3" json:"UID,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *UDBUserRegistration) Reset()         { *m = UDBUserRegistration{} }
func (m *UDBUserRegistration) String() string { return proto.CompactTextString(m) }
func (*UDBUserRegistration) ProtoMessage()    {}
func (*UDBUserRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{55}
}

func (m *UDBUserRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UDBUserRegistration.Unmarshal(m, b)
}
func (m *UDBUserRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UDBUserRegistration.Marshal(b, m, deterministic)
}
func (m *UDBUserRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDBUserRegistration.Merge(m, src)
}
func (m *UDBUserRegistration) XXX_Size() int {
	return xxx_messageInfo_UDBUserRegistration.Size(m)
}
func (m *UDBUserRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_UDBUserRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_UDBUserRegistration proto.InternalMessageInfo

func (m *UDBUserRegistration) GetPermissioningSignature() []byte {
	if m != nil {
		return m.PermissioningSignature
	}
	return nil
}

func (m *UDBUserRegistration) GetRSAPublicPem() string {
	if m != nil {
		return m.RSAPublicPem
	}
	return ""
}

func (m *UDBUserRegistration) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UDBUserRegistration) GetIdentityRegistration() *Identity {
	if m != nil {
		return m.IdentityRegistration
	}
	return nil
}

func (m *UDBUserRegistration) GetIdentitySignature() []byte {
	if m != nil {
		return m.IdentitySignature
	}
	return nil
}

func (m *UDBUserRegistration) GetFrs() *FactRegisterRequest {
	if m != nil {
		return m.Frs
	}
	return nil
}

func (m *UDBUserRegistration) GetUID() []byte {
	if m != nil {
		return m.UID
	}
	return nil
}

// Identity describes a user and their cryptographic info
type Identity struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	DhPubKey             []byte   `protobuf:"bytes,2,opt,name=dhPubKey,proto3" json:"dhPubKey,omitempty"`
	Salt                 []byte   `protobuf:"bytes,3,opt,name=Salt,proto3" json:"Salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{56}
}

func (m *Identity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identity.Unmarshal(m, b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return xxx_messageInfo_Identity.Size(m)
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

func (m *Identity) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Identity) GetDhPubKey() []byte {
	if m != nil {
		return m.DhPubKey
	}
	return nil
}

func (m *Identity) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

// Holds information for a Fact registration request
type FactRegisterRequest struct {
	UID                  []byte   `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Fact                 *Fact    `protobuf:"bytes,2,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactSig              []byte   `protobuf:"bytes,3,opt,name=FactSig,proto3" json:"FactSig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactRegisterRequest) Reset()         { *m = FactRegisterRequest{} }
func (m *FactRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*FactRegisterRequest) ProtoMessage()    {}
func (*FactRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{57}
}

func (m *FactRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactRegisterRequest.Unmarshal(m, b)
}
func (m *FactRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactRegisterRequest.Marshal(b, m, deterministic)
}
func (m *FactRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactRegisterRequest.Merge(m, src)
}
func (m *FactRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_FactRegisterRequest.Size(m)
}
func (m *FactRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FactRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FactRegisterRequest proto.InternalMessageInfo

func (m *FactRegisterRequest) GetUID() []byte {
	if m != nil {
		return m.UID
	}
	return nil
}

func (m *FactRegisterRequest) GetFact() *Fact {
	if m != nil {
		return m.Fact
	}
	return nil
}

func (m *FactRegisterRequest) GetFactSig() []byte {
	if m != nil {
		return m.FactSig
	}
	return nil
}

// Fact describes a Fact, namely what it is and what type it is
type Fact struct {
	Fact                 string   `protobuf:"bytes,1,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactType             uint32   `protobuf:"varint,2,opt,name=FactType,proto3" json:"FactType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fact) Reset()         { *m = Fact{} }
func (m *Fact) String() string { return proto.CompactTextString(m) }
func (*Fact) ProtoMessage()    {}
func (*Fact) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{58}
}

func (m *Fact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fact.Unmarshal(m, b)
}
func (m *Fact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fact.Marshal(b, m, deterministic)
}
func (m *Fact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fact.Merge(m, src)
}
func (m *Fact) XXX_Size() int {
	return xxx_messageInfo_Fact.Size(m)
}
func (m *Fact) XXX_DiscardUnknown() {
	xxx_messageInfo_Fact.DiscardUnknown(m)
}

var xxx_messageInfo_Fact proto.InternalMessageInfo

func (m *Fact) GetFact() string {
	if m != nil {
		return m.Fact
	}
	return ""
}

func (m *Fact) GetFactType() uint32 {
	if m != nil {
		return m.FactType
	}
	return 0
}

// FactRegisterResponse describes UDB's handling of a FactRegisterRequest request
type FactRegisterResponse struct {
	ConfirmationID       string   `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactRegisterResponse) Reset()         { *m = FactRegisterResponse{} }
func (m *FactRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*FactRegisterResponse) ProtoMessage()    {}
func (*FactRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{59}
}

func (m *FactRegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactRegisterResponse.Unmarshal(m, b)
}
func (m *FactRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactRegisterResponse.Marshal(b, m, deterministic)
}
func (m *FactRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactRegisterResponse.Merge(m, src)
}
func (m *FactRegisterResponse) XXX_Size() int {
	return xxx_messageInfo_FactRegisterResponse.Size(m)
}
func (m *FactRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FactRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FactRegisterResponse proto.InternalMessageInfo

func (m *FactRegisterResponse) GetConfirmationID() string {
	if m != nil {
		return m.ConfirmationID
	}
	return ""
}

// Holds information for a Fact confirmation request
type FactConfirmRequest struct {
	ConfirmationID       string   `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactConfirmRequest) Reset()         { *m = FactConfirmRequest{} }
func (m *FactConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*FactConfirmRequest) ProtoMessage()    {}
func (*FactConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{60}
}

func (m *FactConfirmRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactConfirmRequest.Unmarshal(m, b)
}
func (m *FactConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactConfirmRequest.Marshal(b, m, deterministic)
}
func (m *FactConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactConfirmRequest.Merge(m, src)
}
func (m *FactConfirmRequest) XXX_Size() int {
	return xxx_messageInfo_FactConfirmRequest.Size(m)
}
func (m *FactConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FactConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FactConfirmRequest proto.InternalMessageInfo

func (m *FactConfirmRequest) GetConfirmationID() string {
	if m != nil {
		return m.ConfirmationID
	}
	return ""
}

func (m *FactConfirmRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Holds information for a Fact removal request
type FactRemovalRequest struct {
	UID                  []byte   `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	RemovalData          *Fact    `protobuf:"bytes,2,opt,name=RemovalData,proto3" json:"RemovalData,omitempty"`
	FactSig              []byte   `protobuf:"bytes,3,opt,name=FactSig,proto3" json:"FactSig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactRemovalRequest) Reset()         { *m = FactRemovalRequest{} }
func (m *FactRemovalRequest) String() string { return proto.CompactTextString(m) }
func (*FactRemovalRequest) ProtoMessage()    {}
func (*FactRemovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{61}
}

func (m *FactRemovalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactRemovalRequest.Unmarshal(m, b)
}
func (m *FactRemovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactRemovalRequest.Marshal(b, m, deterministic)
}
func (m *FactRemovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactRemovalRequest.Merge(m, src)
}
func (m *FactRemovalRequest) XXX_Size() int {
	return xxx_messageInfo_FactRemovalRequest.Size(m)
}
func (m *FactRemovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FactRemovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FactRemovalRequest proto.InternalMessageInfo

func (m *FactRemovalRequest) GetUID() []byte {
	if m != nil {
		return m.UID
	}
	return nil
}

func (m *FactRemovalRequest) GetRemovalData() *Fact {
	if m != nil {
		return m.RemovalData
	}
	return nil
}

func (m *FactRemovalRequest) GetFactSig() []byte {
	if m != nil {
		return m.FactSig
	}
	return nil
}

// For sending permission address Server -> Gateway
type StrAddress struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrAddress) Reset()         { *m = StrAddress{} }
func (m *StrAddress) String() string { return proto.CompactTextString(m) }
func (*StrAddress) ProtoMessage()    {}
func (*StrAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{62}
}

func (m *StrAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrAddress.Unmarshal(m, b)
}
func (m *StrAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrAddress.Marshal(b, m, deterministic)
}
func (m *StrAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrAddress.Merge(m, src)
}
func (m *StrAddress) XXX_Size() int {
	return xxx_messageInfo_StrAddress.Size(m)
}
func (m *StrAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_StrAddress.DiscardUnknown(m)
}

var xxx_messageInfo_StrAddress proto.InternalMessageInfo

func (m *StrAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Describes a round
type RoundInfo struct {
	ID                         uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateID                   uint64                 `protobuf:"varint,2,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	State                      uint32                 `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
	BatchSize                  uint32                 `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Topology                   [][]byte               `protobuf:"bytes,5,rep,name=Topology,proto3" json:"Topology,omitempty"`
	Timestamps                 []uint64               `protobuf:"varint,6,rep,packed,name=Timestamps,proto3" json:"Timestamps,omitempty"`
	Errors                     []*RoundError          `protobuf:"bytes,7,rep,name=Errors,proto3" json:"Errors,omitempty"`
	ClientErrors               []*ClientError         `protobuf:"bytes,8,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"`
	ResourceQueueTimeoutMillis uint32                 `protobuf:"varint,9,opt,name=ResourceQueueTimeoutMillis,proto3" json:"ResourceQueueTimeoutMillis,omitempty"`
	Signature                  *messages.RSASignature `protobuf:"bytes,10,opt,name=Signature,proto3" json:"Signature,omitempty"`
	AddressSpaceSize           uint32                 `protobuf:"varint,11,opt,name=AddressSpaceSize,proto3" json:"AddressSpaceSize,omitempty"`
	EccSignature               *messages.ECCSignature `protobuf:"bytes,12,opt,name=EccSignature,proto3" json:"EccSignature,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{63}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RoundInfo) GetUpdateID() uint64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *RoundInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *RoundInfo) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *RoundInfo) GetTopology() [][]byte {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *RoundInfo) GetTimestamps() []uint64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *RoundInfo) GetErrors() []*RoundError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *RoundInfo) GetClientErrors() []*ClientError {
	if m != nil {
		return m.ClientErrors
	}
	return nil
}

func (m *RoundInfo) GetResourceQueueTimeoutMillis() uint32 {
	if m != nil {
		return m.ResourceQueueTimeoutMillis
	}
	return 0
}

func (m *RoundInfo) GetSignature() *messages.RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RoundInfo) GetAddressSpaceSize() uint32 {
	if m != nil {
		return m.AddressSpaceSize
	}
	return 0
}

func (m *RoundInfo) GetEccSignature() *messages.ECCSignature {
	if m != nil {
		return m.EccSignature
	}
	return nil
}

// RoundError will be used to describe a round error
// Passed along to gateways (level 2) and clients (level 3)
type RoundError struct {
	Id                   uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	NodeId               []byte                 `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Error                string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Signature            *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RoundError) Reset()         { *m = RoundError{} }
func (m *RoundError) String() string { return proto.CompactTextString(m) }
func (*RoundError) ProtoMessage()    {}
func (*RoundError) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{64}
}

func (m *RoundError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundError.Unmarshal(m, b)
}
func (m *RoundError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundError.Marshal(b, m, deterministic)
}
func (m *RoundError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundError.Merge(m, src)
}
func (m *RoundError) XXX_Size() int {
	return xxx_messageInfo_RoundError.Size(m)
}
func (m *RoundError) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundError.DiscardUnknown(m)
}

var xxx_messageInfo_RoundError proto.InternalMessageInfo

func (m *RoundError) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoundError) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RoundError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RoundError) GetSignature() *messages.RSASignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AuthorizerAuth struct {
	NodeID               []byte   `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Salt                 []byte   `protobuf:"bytes,2,opt,name=Salt,proto3" json:"Salt,omitempty"`
	PubkeyPem            []byte   `protobuf:"bytes,3,opt,name=PubkeyPem,proto3" json:"PubkeyPem,omitempty"`
	TimeStamp            int64    `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizerAuth) Reset()         { *m = AuthorizerAuth{} }
func (m *AuthorizerAuth) String() string { return proto.CompactTextString(m) }
func (*AuthorizerAuth) ProtoMessage()    {}
func (*AuthorizerAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{65}
}

func (m *AuthorizerAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizerAuth.Unmarshal(m, b)
}
func (m *AuthorizerAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizerAuth.Marshal(b, m, deterministic)
}
func (m *AuthorizerAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizerAuth.Merge(m, src)
}
func (m *AuthorizerAuth) XXX_Size() int {
	return xxx_messageInfo_AuthorizerAuth.Size(m)
}
func (m *AuthorizerAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizerAuth.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizerAuth proto.InternalMessageInfo

func (m *AuthorizerAuth) GetNodeID() []byte {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func (m *AuthorizerAuth) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *AuthorizerAuth) GetPubkeyPem() []byte {
	if m != nil {
		return m.PubkeyPem
	}
	return nil
}

func (m *AuthorizerAuth) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *AuthorizerAuth) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientKeyRequest)(nil), "mixmessages.ClientKeyRequest")
	proto.RegisterType((*SignedClientBatchKeyRequest)(nil), "mixmessages.SignedClientBatchKeyRequest")
	proto.RegisterType((*SignedClientKeyRequest)(nil), "mixmessages.SignedClientKeyRequest")
	proto.RegisterType((*ClientKeyResponse)(nil), "mixmessages.ClientKeyResponse")
	proto.RegisterType((*SignedBatchKeyResponse)(nil), "mixmessages.SignedBatchKeyResponse")
	proto.RegisterType((*SignedKeyResponse)(nil), "mixmessages.SignedKeyResponse")
	proto.RegisterType((*PostPrecompResult)(nil), "mixmessages.PostPrecompResult")
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*RoundPublicKey)(nil), "mixmessages.RoundPublicKey")
	proto.RegisterType((*RoundMetrics)(nil), "mixmessages.RoundMetrics")
	proto.RegisterType((*Batch)(nil), "mixmessages.Batch")
	proto.RegisterType((*CompletedBatch)(nil), "mixmessages.CompletedBatch")
	proto.RegisterType((*BatchInfo)(nil), "mixmessages.BatchInfo")
	proto.RegisterType((*RoundTripPing)(nil), "mixmessages.RoundTripPing")
	proto.RegisterType((*ServerPoll)(nil), "mixmessages.ServerPoll")
	proto.RegisterType((*ServerPollResponse)(nil), "mixmessages.ServerPollResponse")
	proto.RegisterType((*BatchReady)(nil), "mixmessages.BatchReady")
	proto.RegisterType((*SharePiece)(nil), "mixmessages.SharePiece")
	proto.RegisterType((*StreamChunk)(nil), "mixmessages.StreamChunk")
	proto.RegisterType((*HistoricalRounds)(nil), "mixmessages.HistoricalRounds")
	proto.RegisterType((*HistoricalRoundsResponse)(nil), "mixmessages.HistoricalRoundsResponse")
	proto.RegisterType((*GetMessages)(nil), "mixmessages.GetMessages")
	proto.RegisterType((*GetMessagesResponse)(nil), "mixmessages.GetMessagesResponse")
	proto.RegisterType((*RoundMessages)(nil), "mixmessages.RoundMessages")
	proto.RegisterType((*IDList)(nil), "mixmessages.IDList")
	proto.RegisterType((*Slot)(nil), "mixmessages.Slot")
	proto.RegisterType((*GatewayPoll)(nil), "mixmessages.GatewayPoll")
	proto.RegisterType((*GatewayPollResponse)(nil), "mixmessages.GatewayPollResponse")
	proto.RegisterType((*ClientBlooms)(nil), "mixmessages.ClientBlooms")
	proto.RegisterType((*ClientBloom)(nil), "mixmessages.ClientBloom")
	proto.RegisterType((*GatewaySlots)(nil), "mixmessages.GatewaySlots")
	proto.RegisterType((*GatewaySlot)(nil), "mixmessages.GatewaySlot")
	proto.RegisterType((*GatewaySlotResponse)(nil), "mixmessages.GatewaySlotResponse")
	proto.RegisterType((*BatchSenders)(nil), "mixmessages.BatchSenders")
	proto.RegisterType((*Recipients)(nil), "mixmessages.Recipients")
	proto.RegisterType((*RegisteredNodeConfirmation)(nil), "mixmessages.RegisteredNodeConfirmation")
	proto.RegisterType((*RegisteredNodeCheck)(nil), "mixmessages.RegisteredNodeCheck")
	proto.RegisterType((*NDFHash)(nil), "mixmessages.NDFHash")
	proto.RegisterType((*NDF)(nil), "mixmessages.NDF")
	proto.RegisterType((*NodeRegistration)(nil), "mixmessages.NodeRegistration")
	proto.RegisterType((*ClientRegistration)(nil), "mixmessages.ClientRegistration")
	proto.RegisterType((*ClientRegistrationConfirmation)(nil), "mixmessages.ClientRegistrationConfirmation")
	proto.RegisterType((*SignedRegistrationConfirmation)(nil), "mixmessages.SignedRegistrationConfirmation")
	proto.RegisterType((*SignedClientRegistrationConfirmations)(nil), "mixmessages.SignedClientRegistrationConfirmations")
	proto.RegisterType((*ClientVersion)(nil), "mixmessages.ClientVersion")
	proto.RegisterType((*PermissioningPoll)(nil), "mixmessages.PermissioningPoll")
	proto.RegisterType((*ClientError)(nil), "mixmessages.ClientError")
	proto.RegisterType((*PermissionPollResponse)(nil), "mixmessages.PermissionPollResponse")
	proto.RegisterType((*NotificationRegisterRequest)(nil), "mixmessages.NotificationRegisterRequest")
	proto.RegisterType((*NotificationUnregisterRequest)(nil), "mixmessages.NotificationUnregisterRequest")
	proto.RegisterType((*UserIdList)(nil), "mixmessages.UserIdList")
	proto.RegisterType((*NotificationBatch)(nil), "mixmessages.NotificationBatch")
	proto.RegisterType((*NotificationData)(nil), "mixmessages.NotificationData")
	proto.RegisterType((*ChannelLeaseRequest)(nil), "mixmessages.ChannelLeaseRequest")
	proto.RegisterType((*ChannelLeaseResponse)(nil), "mixmessages.ChannelLeaseResponse")
	proto.RegisterType((*UDBUserRegistration)(nil), "mixmessages.UDBUserRegistration")
	proto.RegisterType((*Identity)(nil), "mixmessages.Identity")
	proto.RegisterType((*FactRegisterRequest)(nil), "mixmessages.FactRegisterRequest")
	proto.RegisterType((*Fact)(nil), "mixmessages.Fact")
	proto.RegisterType((*FactRegisterResponse)(nil), "mixmessages.FactRegisterResponse")
	proto.RegisterType((*FactConfirmRequest)(nil), "mixmessages.FactConfirmRequest")
	proto.RegisterType((*FactRemovalRequest)(nil), "mixmessages.FactRemovalRequest")
	proto.RegisterType((*StrAddress)(nil), "mixmessages.StrAddress")
	proto.RegisterType((*RoundInfo)(nil), "mixmessages.RoundInfo")
	proto.RegisterType((*RoundError)(nil), "mixmessages.RoundError")
	proto.RegisterType((*AuthorizerAuth)(nil), "mixmessages.AuthorizerAuth")
}

func init() {
	proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5)
}

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 3765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0x4b, 0x6f, 0x1c, 0x47,
	0x73, 0xdc, 0x07, 0x1f, 0x5b, 0x5c, 0x52, 0x64, 0x93, 0xa2, 0x56, 0x2b, 0x59, 0x66, 0xda, 0x92,
	0xcc, 0xc8, 0x36, 0xa5, 0x50, 0xb2, 0x62, 0x2b, 0x8a, 0x62, 0x92, 0x4b, 0x4a, 0x6b, 0x99, 0xf4,
	0xa6, 0x97, 0x54, 0x6c, 0xc7, 0x40, 0x3c, 0xda, 0x6d, 0x92, 0x03, 0xcd, 0xce, 0x6c, 0x66, 0x66,
	0x25, 0xae, 0x91, 0x00, 0x41, 0x7e, 0x40, 0x10, 0x20, 0x81, 0xef, 0x39, 0xe4, 0xee, 0x18, 0x39,
	0xfb, 0x94, 0x6b, 0x92, 0x43, 0x90, 0x43, 0xfe, 0x40, 0x80, 0x00, 0x39, 0x05, 0xf9, 0x01, 0x1f,
	0xfa, 0x35, 0xd3, 0x3d, 0x8f, 0x5d, 0xae, 0x3e, 0x03, 0xdf, 0x77, 0xe2, 0xd6, 0xa3, 0xab, 0xab,
	0xab, 0xab, 0xab, 0xaa, 0xab, 0x87, 0xb0, 0xdc, 0xb3, 0xcf, 0x7b, 0x34, 0x08, 0xac, 0x53, 0x1a,
	0x6c, 0xf6, 0x7d, 0x2f, 0xf4, 0xd0, 0xbc, 0x86, 0xaa, 0xdf, 0x3f, 0xb5, 0x43, 0xc7, 0x7a, 0xb9,
	0xd9, 0xf1, 0x7a, 0x77, 0xcf, 0xcf, 0xff, 0xcc, 0xa5, 0xe1, 0x1b, 0xcf, 0x7f, 0x75, 0xb7, 0xe3,
	0xf5, 0x7a, 0xc1, 0x5d, 0xc5, 0x75, 0xd7, 0x94, 0x50, 0xbf, 0x7a, 0xea, 0x79, 0xa7, 0x0e, 0xbd,
	0xcb, 0xa1, 0x97, 0x83, 0x93, 0xbb, 0x96, 0x3b, 0x14, 0x24, 0xfc, 0x8f, 0x45, 0x58, 0xda, 0x75,
	0x6c, 0xea, 0x86, 0xcf, 0xe9, 0x90, 0xd0, 0x3f, 0x1f, 0xd0, 0x20, 0x44, 0x08, 0xca, 0x6d, 0xcb,
	0x09, 0x6b, 0x85, 0xf5, 0xc2, 0x46, 0x95, 0xf0, 0xdf, 0x28, 0x80, 0x1b, 0x82, 0xef, 0xc8, 0xb7,
	0xdc, 0xa0, 0x67, 0x07, 0x81, 0xed, 0xb9, 0xbb, 0x9e, 0x7b, 0x62, 0xfb, 0x3d, 0x2b, 0xb4, 0x3d,
	0xb7, 0x56, 0x5c, 0x2f, 0x6c, 0xcc, 0x6f, 0x7d, 0xb0, 0xa9, 0xaf, 0xa0, 0x6d, 0x9f, 0xba, 0xb4,
	0x4b, 0xe8, 0xa9, 0x1d, 0x84, 0x3e, 0x67, 0xd3, 0x87, 0x90, 0x31, 0x22, 0xd1, 0x1d, 0x58, 0x92,
	0x3a, 0x1d, 0xd9, 0x3d, 0x1a, 0x84, 0x56, 0xaf, 0x5f, 0x2b, 0xad, 0x17, 0x36, 0x4a, 0x24, 0x85,
	0x47, 0x0f, 0xe0, 0xb2, 0x3e, 0x4f, 0x3c, 0xa0, 0xcc, 0x07, 0x64, 0x13, 0xd1, 0x6d, 0x58, 0x14,
	0x3a, 0x34, 0x9e, 0xb5, 0x06, 0x2f, 0x9f, 0xd3, 0x61, 0x6d, 0x9a, 0x2f, 0x3a, 0x81, 0xc5, 0xff,
	0x51, 0x80, 0x6b, 0x62, 0x31, 0x82, 0xb0, 0x63, 0x85, 0x9d, 0x33, 0xcd, 0x64, 0x77, 0xd2, 0x66,
	0x94, 0xe6, 0x4b, 0x9b, 0xf7, 0x08, 0xae, 0x26, 0x71, 0x4c, 0xb4, 0x15, 0x0e, 0x7c, 0x2a, 0xad,
	0xb8, 0xb6, 0x19, 0x99, 0x90, 0xb4, 0xb7, 0x23, 0x2a, 0xc9, 0x1f, 0x88, 0x6a, 0x30, 0x7b, 0x64,
	0xf9, 0xa7, 0x34, 0x0c, 0x6a, 0xa5, 0xf5, 0xd2, 0x46, 0x95, 0x28, 0x90, 0x53, 0xec, 0x1e, 0xf5,
	0x06, 0x21, 0xb7, 0x45, 0x99, 0x28, 0x10, 0xff, 0x54, 0x80, 0x35, 0x7d, 0x55, 0xbf, 0x55, 0x0b,
	0x5a, 0x83, 0x19, 0xb1, 0x02, 0xbe, 0xe5, 0x55, 0x22, 0x21, 0xfc, 0x9f, 0x05, 0x58, 0xd6, 0x46,
	0x05, 0x7d, 0xcf, 0x0d, 0x28, 0xda, 0x04, 0xb4, 0xe7, 0x76, 0xfc, 0x61, 0x3f, 0xd4, 0x16, 0x23,
	0x35, 0xce, 0xa0, 0xa0, 0x87, 0xb0, 0x96, 0xc6, 0x3e, 0x3b, 0xd8, 0xde, 0xe5, 0x0a, 0x57, 0x49,
	0x0e, 0x15, 0x61, 0xa8, 0x1e, 0x7a, 0x5d, 0x1a, 0xb9, 0x8b, 0xd0, 0xcd, 0xc0, 0xa1, 0x55, 0x98,
	0x7e, 0x4e, 0x87, 0xcd, 0x06, 0x37, 0x77, 0x95, 0x08, 0x00, 0xdd, 0x00, 0x78, 0x61, 0x39, 0x76,
	0xf7, 0xd8, 0x0d, 0x6d, 0x87, 0xbb, 0x59, 0x99, 0x68, 0x18, 0xfc, 0x95, 0xda, 0x8b, 0xd8, 0xb7,
	0xe4, 0xda, 0x9e, 0x00, 0x08, 0xca, 0x73, 0x3a, 0x0c, 0x6a, 0x85, 0xf5, 0xd2, 0xc6, 0xfc, 0xd6,
	0x8d, 0x8c, 0x73, 0xa6, 0x8d, 0x21, 0xda, 0x08, 0xfc, 0xef, 0x05, 0x58, 0x4e, 0x71, 0xa0, 0x75,
	0x98, 0xd7, 0x40, 0x69, 0x2a, 0x1d, 0x85, 0x5e, 0x40, 0x5d, 0x03, 0xa5, 0x72, 0xc3, 0xa7, 0x56,
	0x48, 0xdf, 0x58, 0xc3, 0x31, 0x1b, 0x3b, 0x62, 0x64, 0xec, 0x5b, 0x12, 0x11, 0xdb, 0x31, 0x85,
	0x67, 0xb6, 0xdc, 0xf3, 0x7d, 0xcf, 0xe7, 0xb6, 0xac, 0x10, 0x01, 0xe0, 0x26, 0x2c, 0xb7, 0xbc,
	0x20, 0x6c, 0xf9, 0xb4, 0xe3, 0xf5, 0xfa, 0x84, 0x06, 0x03, 0x27, 0x64, 0x7e, 0x4e, 0xbc, 0x81,
	0xdb, 0x6d, 0x76, 0xf9, 0x62, 0xca, 0x44, 0x81, 0xa8, 0x0e, 0x73, 0x87, 0x83, 0x5e, 0xdb, 0xf1,
	0xc2, 0x80, 0xab, 0xbd, 0x40, 0x22, 0x18, 0xff, 0x01, 0x5c, 0xe2, 0x6c, 0x3b, 0x83, 0x93, 0x13,
	0xea, 0x37, 0xdd, 0x13, 0x0f, 0x6d, 0x18, 0xa8, 0xb6, 0xfd, 0xbd, 0xb0, 0xce, 0x02, 0x49, 0xa2,
	0x71, 0x0b, 0x16, 0x39, 0xaa, 0x35, 0x78, 0xe9, 0xd8, 0x1d, 0xa6, 0xef, 0x87, 0x30, 0xcd, 0x31,
	0x7c, 0x04, 0x37, 0x8f, 0xb6, 0x4d, 0x42, 0x1f, 0xf7, 0xc4, 0x23, 0x82, 0x09, 0x2d, 0x41, 0x89,
	0x2d, 0x5e, 0xb8, 0x1c, 0xfb, 0x89, 0x3f, 0x81, 0x2a, 0x27, 0x1d, 0xd0, 0xd0, 0xb7, 0x3b, 0x41,
	0xa4, 0x8b, 0x80, 0x3f, 0x6f, 0x7f, 0x79, 0xc8, 0x25, 0x57, 0x48, 0x12, 0x8d, 0xff, 0x02, 0xa6,
	0xb9, 0xe7, 0x4c, 0xa8, 0xc2, 0x75, 0xa8, 0xec, 0xfb, 0x5e, 0xaf, 0x75, 0x66, 0x05, 0xe2, 0xb0,
	0x4e, 0x93, 0x18, 0x81, 0xde, 0x87, 0xe9, 0x80, 0x9b, 0xad, 0xc4, 0xbd, 0x6e, 0xd9, 0xf4, 0x3a,
	0xc7, 0x0b, 0x89, 0xa0, 0xe3, 0x36, 0x2c, 0xee, 0x7a, 0xbd, 0xbe, 0x43, 0x43, 0xe9, 0xc0, 0xf1,
	0x76, 0x34, 0xcc, 0xed, 0x68, 0xc4, 0x42, 0x8b, 0x63, 0x84, 0x0e, 0xa0, 0xc2, 0x65, 0xf1, 0x5d,
	0xf9, 0x25, 0x97, 0x75, 0x5d, 0x0a, 0xe6, 0x7b, 0x5b, 0xe2, 0x7b, 0x1b, 0x23, 0x70, 0x0f, 0x16,
	0xb8, 0x90, 0x23, 0xdf, 0xee, 0xb7, 0x6c, 0xf7, 0x14, 0x6d, 0xc2, 0x6c, 0xcb, 0x1a, 0x3a, 0x9e,
	0xa5, 0x26, 0x5f, 0xdd, 0x14, 0x29, 0x75, 0x53, 0xa5, 0xd4, 0xcd, 0x6d, 0x77, 0x48, 0x14, 0x53,
	0xac, 0x6a, 0xf1, 0x02, 0xaa, 0xe2, 0xff, 0x2d, 0x00, 0xb4, 0xa9, 0xff, 0x9a, 0xfa, 0x2d, 0xcf,
	0x71, 0xd0, 0x06, 0x94, 0xf7, 0x07, 0x8e, 0x13, 0xcd, 0xa4, 0x8f, 0x3d, 0x6c, 0xec, 0x3f, 0xb3,
	0x82, 0x33, 0xc2, 0x39, 0x84, 0x5a, 0x7e, 0x68, 0x5b, 0x8e, 0x9c, 0x28, 0x9b, 0x59, 0x31, 0xb1,
	0x08, 0xf4, 0x85, 0x15, 0x84, 0xc7, 0xfd, 0xae, 0x15, 0x8a, 0x65, 0x97, 0x89, 0x86, 0xc9, 0x3e,
	0x6b, 0x2c, 0x45, 0x9e, 0x8a, 0xf3, 0xf8, 0x82, 0xfa, 0x2c, 0x45, 0xf3, 0xd8, 0x55, 0x21, 0x09,
	0xac, 0xc6, 0xb7, 0xdd, 0xed, 0xfa, 0x34, 0x08, 0x6a, 0x33, 0x06, 0x9f, 0xc4, 0xe2, 0xff, 0x29,
	0x01, 0x8a, 0x97, 0x1b, 0x05, 0x9b, 0x45, 0x28, 0xca, 0x83, 0x5b, 0x25, 0xc5, 0x66, 0x17, 0xdd,
	0x81, 0x59, 0xb6, 0xc8, 0xc3, 0xc6, 0xbe, 0x5c, 0xdc, 0x52, 0x72, 0x71, 0x44, 0x31, 0xa0, 0x7b,
	0x00, 0x72, 0x8d, 0x8c, 0xbd, 0x94, 0xc3, 0xae, 0xf1, 0xa0, 0x7b, 0x30, 0x2b, 0x16, 0x1d, 0xd4,
	0xca, 0xdc, 0x09, 0xf3, 0xf6, 0x48, 0xb1, 0xa1, 0x47, 0x50, 0xe5, 0x1e, 0xa2, 0x92, 0xe1, 0xf4,
	0xc8, 0xad, 0x35, 0x78, 0xd1, 0x47, 0xf2, 0x68, 0x72, 0x8b, 0xcc, 0x6f, 0x5d, 0x31, 0x06, 0x49,
	0x4e, 0xab, 0x3b, 0x24, 0xf2, 0x00, 0xdf, 0x83, 0x95, 0x3d, 0xcb, 0x77, 0x6c, 0x1a, 0x84, 0x22,
	0x1e, 0x0a, 0x67, 0x9a, 0xe5, 0x1b, 0x96, 0x45, 0x42, 0x5b, 0xb0, 0xaa, 0xd0, 0x32, 0x76, 0x8a,
	0x21, 0x73, 0x7c, 0x48, 0x26, 0x8d, 0x67, 0x40, 0x89, 0x17, 0xde, 0x1e, 0x55, 0x4c, 0x15, 0x5e,
	0x31, 0xe5, 0x50, 0x59, 0xf4, 0x36, 0x28, 0x7b, 0xbe, 0x5f, 0x03, 0xbe, 0xd3, 0x29, 0x3c, 0xbe,
	0x0d, 0x10, 0x2f, 0x2f, 0x3f, 0x40, 0xe3, 0x1f, 0xd8, 0x11, 0x38, 0xb3, 0x7c, 0xda, 0xb2, 0x69,
	0x87, 0x3b, 0x22, 0xff, 0x21, 0xdd, 0x41, 0x00, 0x2c, 0xf5, 0xf6, 0xd9, 0x0e, 0x76, 0xec, 0xbe,
	0xe5, 0xca, 0xe8, 0x51, 0x25, 0x06, 0x8e, 0x4d, 0xe1, 0xcb, 0xa0, 0x23, 0xfc, 0x5b, 0x81, 0xe8,
	0x01, 0x54, 0xe2, 0xa2, 0xa4, 0x3c, 0x32, 0x77, 0xc5, 0x8c, 0xf8, 0x3d, 0x98, 0x6f, 0x87, 0x3e,
	0xb5, 0x7a, 0xbb, 0x67, 0x03, 0xf7, 0x15, 0x53, 0xac, 0x61, 0x85, 0x83, 0x9e, 0x52, 0x8c, 0x03,
	0xf8, 0x0e, 0x2c, 0x3d, 0xb3, 0x83, 0xd0, 0xf3, 0xed, 0x8e, 0xe5, 0xf0, 0x25, 0x05, 0xac, 0x7a,
	0xe1, 0x33, 0x8b, 0x7c, 0x5d, 0x26, 0x12, 0xc2, 0x9f, 0x43, 0x2d, 0xc9, 0xab, 0xd5, 0x30, 0x33,
	0x24, 0x1e, 0x93, 0xef, 0x5c, 0x92, 0x0b, 0xff, 0x29, 0xcc, 0x3f, 0xa5, 0xe1, 0x81, 0x64, 0x60,
	0x59, 0x4e, 0xf8, 0x84, 0x8c, 0xb8, 0x55, 0x12, 0xc1, 0x7a, 0x30, 0x2e, 0x9a, 0xc1, 0x38, 0xaf,
	0xcc, 0xfa, 0x0e, 0x56, 0x34, 0xe1, 0x91, 0x8e, 0x1f, 0xc1, 0x9c, 0xc2, 0x49, 0x2d, 0x33, 0xc2,
	0xf7, 0x9c, 0xae, 0xd3, 0x33, 0x2b, 0x88, 0x83, 0xe1, 0x1c, 0x89, 0x60, 0xfc, 0x95, 0x0c, 0xb3,
	0x11, 0x73, 0x7e, 0x02, 0xd7, 0x67, 0x2d, 0x8e, 0x9d, 0x15, 0xd7, 0x61, 0xa6, 0xd9, 0xf8, 0xc2,
	0x0e, 0x42, 0x96, 0x60, 0x9b, 0x0d, 0xa1, 0x69, 0x85, 0xb0, 0x9f, 0xf8, 0x5f, 0x4a, 0x50, 0x66,
	0xec, 0x6c, 0x2f, 0x9b, 0x6e, 0x97, 0x9e, 0xcb, 0xdc, 0x2e, 0x00, 0x76, 0x8d, 0x88, 0x2a, 0x3f,
	0x19, 0xce, 0xb7, 0x79, 0xd9, 0x25, 0x72, 0x74, 0x36, 0x31, 0x6b, 0xd4, 0x0e, 0x1f, 0x55, 0xca,
	0x1e, 0xc5, 0x89, 0xe8, 0x31, 0x5c, 0x95, 0x21, 0x49, 0x09, 0xdb, 0x1d, 0xf6, 0xcf, 0xa8, 0x7f,
	0x44, 0xcf, 0x43, 0x59, 0x3b, 0xe6, 0x33, 0xa4, 0x47, 0xef, 0x68, 0xa3, 0xa7, 0xb3, 0x46, 0x6b,
	0x0c, 0xe8, 0x33, 0xb8, 0x26, 0x89, 0x5a, 0x01, 0x23, 0xe8, 0xac, 0x22, 0x99, 0xe1, 0xe3, 0x47,
	0xb1, 0xb0, 0xad, 0x6d, 0x53, 0xb7, 0x4b, 0xfd, 0x66, 0x83, 0x87, 0xa6, 0x2a, 0x89, 0x60, 0x46,
	0x53, 0x1a, 0xf3, 0x18, 0x54, 0x25, 0x11, 0xac, 0xd1, 0x76, 0x78, 0xa4, 0x89, 0x69, 0x3b, 0xd1,
	0xcd, 0x13, 0xb4, 0x9b, 0x27, 0xab, 0xa6, 0x0f, 0xb6, 0x77, 0x83, 0xda, 0x3c, 0x3f, 0xef, 0x02,
	0xc0, 0xff, 0x55, 0x84, 0x79, 0x19, 0xce, 0x78, 0xd6, 0xd4, 0x72, 0x61, 0x61, 0xf2, 0x5c, 0x58,
	0x4c, 0xe5, 0xc2, 0x75, 0x98, 0x27, 0xb4, 0x43, 0xfb, 0xec, 0xba, 0x28, 0x83, 0x49, 0x95, 0xe8,
	0x28, 0x96, 0xef, 0xda, 0xa1, 0xe5, 0x87, 0xc9, 0x9b, 0x66, 0x02, 0xcb, 0xc2, 0xd6, 0x9e, 0x1e,
	0x5d, 0xa7, 0x39, 0x97, 0x81, 0x43, 0x37, 0x61, 0x41, 0x1c, 0x55, 0x95, 0x62, 0x85, 0xfd, 0x4d,
	0x24, 0xd3, 0x69, 0xdf, 0x0a, 0x42, 0xb6, 0x5e, 0xdb, 0x3d, 0xe5, 0x46, 0x9f, 0x23, 0x3a, 0x8a,
	0xd5, 0x35, 0x6c, 0x0d, 0x7a, 0xf0, 0x8f, 0x11, 0x4c, 0xe3, 0x86, 0x1d, 0x58, 0x2f, 0x1d, 0xaa,
	0x72, 0x5f, 0x85, 0x8b, 0x48, 0x60, 0xf1, 0x7f, 0x17, 0x61, 0x45, 0xb3, 0x6d, 0x74, 0xf6, 0xcd,
	0x34, 0x5b, 0x98, 0x2c, 0xcd, 0x16, 0x2f, 0x96, 0x66, 0xd9, 0xad, 0xc4, 0xf5, 0xde, 0xb8, 0x32,
	0x10, 0x4a, 0xbb, 0x6b, 0x28, 0x74, 0x1f, 0x66, 0xf7, 0x6d, 0x27, 0xa4, 0x7e, 0x20, 0xc3, 0xf8,
	0x55, 0x43, 0xa6, 0xbc, 0x9f, 0x3b, 0x9e, 0xd7, 0x0b, 0x88, 0xe2, 0x64, 0x06, 0x36, 0x92, 0x93,
	0xbc, 0x7f, 0x99, 0xc8, 0xcc, 0xd4, 0x36, 0x93, 0x9d, 0xda, 0x98, 0x03, 0x31, 0x6f, 0xb0, 0x5f,
	0xd3, 0xee, 0x51, 0xc0, 0xf7, 0xa2, 0x44, 0x34, 0x0c, 0xdb, 0x76, 0x69, 0xc3, 0x06, 0x75, 0xac,
	0x21, 0xdf, 0x8d, 0x12, 0x31, 0x70, 0xf8, 0xaf, 0x0b, 0x50, 0xd5, 0xf5, 0x65, 0xc1, 0xb8, 0x45,
	0x7d, 0xdb, 0x13, 0x01, 0xb0, 0x44, 0x24, 0xc4, 0x76, 0x6e, 0xdf, 0xf6, 0xf5, 0x36, 0x48, 0x51,
	0xf8, 0x9a, 0x89, 0x45, 0x5b, 0xb1, 0x6d, 0x44, 0xc1, 0x5e, 0xcb, 0xb3, 0x4d, 0x64, 0x1a, 0x4c,
	0x61, 0x5e, 0xc3, 0x33, 0x15, 0x04, 0x45, 0xe6, 0x10, 0x09, 0xb1, 0xf5, 0xf2, 0xc9, 0xe2, 0x58,
	0x5e, 0x26, 0x1a, 0x86, 0xdb, 0x83, 0xfd, 0x20, 0x96, 0x7b, 0xaa, 0x6a, 0x6a, 0x0d, 0x83, 0xff,
	0xa6, 0x10, 0x19, 0x84, 0x5f, 0xbc, 0xd0, 0x83, 0x54, 0x26, 0x31, 0x95, 0xd5, 0x98, 0xb5, 0x84,
	0x32, 0x71, 0x22, 0x63, 0xf8, 0x66, 0x9f, 0x15, 0x9f, 0xb2, 0xac, 0x95, 0x10, 0xab, 0x39, 0xe6,
	0xb5, 0x39, 0xd0, 0x07, 0x30, 0x2b, 0x67, 0x91, 0xae, 0x9d, 0x91, 0x62, 0x14, 0xc7, 0x08, 0x35,
	0x96, 0xa0, 0x74, 0xb0, 0xbd, 0x2b, 0x75, 0x60, 0x3f, 0x35, 0xc5, 0xca, 0x39, 0x8a, 0x4d, 0x1b,
	0x8a, 0x3d, 0x8f, 0x4e, 0x1f, 0x9f, 0x53, 0x9d, 0xbe, 0x3a, 0xcc, 0x59, 0x1d, 0x16, 0x7e, 0xa8,
	0xf0, 0x8e, 0x39, 0x12, 0xc1, 0xf9, 0xea, 0xe0, 0xaf, 0x64, 0xd9, 0x2a, 0x42, 0x73, 0xc0, 0x22,
	0x84, 0x8c, 0xd2, 0xb2, 0xcc, 0xa8, 0x92, 0x18, 0x31, 0x7a, 0x59, 0xcd, 0xbe, 0x6a, 0x2d, 0xb1,
	0x9f, 0xb8, 0xcb, 0x0f, 0x80, 0xdd, 0x67, 0xae, 0xc3, 0xdd, 0x3d, 0x82, 0x62, 0xd1, 0x06, 0x6e,
	0x84, 0x74, 0x45, 0x39, 0x6a, 0xab, 0xb2, 0x4d, 0x82, 0xf8, 0x33, 0xa8, 0x8b, 0xce, 0x1d, 0xf5,
	0x69, 0xf7, 0xd0, 0xeb, 0x52, 0xa3, 0x41, 0x88, 0xa1, 0xda, 0x0c, 0x62, 0xba, 0xb4, 0x8b, 0x81,
	0xc3, 0xb7, 0x60, 0x25, 0x21, 0xe1, 0x8c, 0x76, 0x5e, 0xf1, 0xfb, 0x46, 0x23, 0xba, 0x6f, 0x34,
	0xf0, 0x3b, 0x30, 0x2b, 0x93, 0x04, 0xcb, 0x42, 0xec, 0xaf, 0xea, 0x7f, 0xb2, 0xdf, 0xf8, 0x00,
	0x4a, 0x2c, 0xa0, 0x2d, 0x41, 0xe9, 0xb0, 0x7b, 0x22, 0x29, 0xec, 0xa7, 0x59, 0x57, 0x16, 0x2f,
	0x5a, 0x57, 0xfe, 0x58, 0x84, 0x25, 0xa6, 0x8b, 0xde, 0x95, 0xcc, 0xec, 0xbb, 0xde, 0x84, 0x05,
	0x71, 0x59, 0x3a, 0x72, 0x82, 0x5d, 0xea, 0x87, 0x7c, 0x8a, 0x0a, 0x31, 0x91, 0x31, 0x97, 0xba,
	0x7a, 0x95, 0x74, 0x2e, 0x89, 0x64, 0x47, 0x54, 0x5d, 0xbc, 0x7c, 0xe1, 0x8c, 0x0b, 0x44, 0xc3,
	0xb0, 0x28, 0x23, 0x1d, 0x4f, 0x4d, 0x26, 0x6f, 0x7a, 0x26, 0x56, 0xe3, 0x4b, 0xdc, 0xf4, 0x4c,
	0x2c, 0x8b, 0xe5, 0x51, 0x1a, 0xf1, 0x43, 0x1e, 0x23, 0x17, 0x88, 0x8e, 0x12, 0x0d, 0x5e, 0xbd,
	0x39, 0xdc, 0xa5, 0x3c, 0x50, 0x56, 0x48, 0x0a, 0x8f, 0x7f, 0x2e, 0x00, 0x92, 0x77, 0x1e, 0xdd,
	0x68, 0x59, 0x22, 0x0a, 0xd9, 0x22, 0x58, 0xd1, 0x93, 0xee, 0x38, 0x93, 0xf6, 0xb6, 0xec, 0xe5,
	0x09, 0xd3, 0x8e, 0x62, 0x41, 0x8f, 0xa0, 0xa6, 0x74, 0x90, 0x95, 0x40, 0x3c, 0x5c, 0xd8, 0x3c,
	0x97, 0x8e, 0xbf, 0x55, 0x2d, 0xf4, 0xbc, 0x7e, 0x38, 0x3b, 0x9c, 0xb1, 0x38, 0xb1, 0x88, 0x18,
	0xc1, 0xa8, 0xc9, 0xf8, 0x1f, 0x23, 0xf0, 0x8f, 0x05, 0xb8, 0x31, 0xba, 0xdd, 0x8e, 0xf6, 0xc7,
	0x29, 0x20, 0x3d, 0x6f, 0x9c, 0x9a, 0xfb, 0x80, 0x14, 0xcd, 0xbf, 0xa8, 0xef, 0x67, 0x8c, 0xc0,
	0xff, 0x50, 0x84, 0x5b, 0x7a, 0xfb, 0x39, 0x6f, 0xc2, 0xe0, 0x02, 0xaf, 0x0f, 0x85, 0x5f, 0xfe,
	0xf5, 0xa1, 0xa7, 0xbc, 0x25, 0xda, 0xcb, 0x5f, 0xf7, 0xbd, 0x63, 0x94, 0xbc, 0xb8, 0xfb, 0x52,
	0xd2, 0x3b, 0x9d, 0xbf, 0x9b, 0xa8, 0x0c, 0x59, 0xa8, 0x54, 0x45, 0xa2, 0xf0, 0x10, 0x05, 0xe2,
	0x9f, 0x4a, 0xb0, 0xdc, 0xa2, 0xbe, 0x5c, 0x8a, 0xed, 0x9e, 0xfe, 0x86, 0xdb, 0x49, 0x75, 0x98,
	0xdb, 0xee, 0x84, 0xf6, 0x6b, 0x3b, 0x1c, 0xca, 0x60, 0x13, 0xc1, 0xe8, 0x23, 0xb5, 0xd8, 0xe9,
	0x8c, 0x8e, 0x88, 0xaa, 0xb1, 0x3c, 0x3f, 0xdd, 0x83, 0x1a, 0xd9, 0x5b, 0xca, 0xe8, 0x55, 0xcd,
	0x66, 0xf6, 0xaa, 0x6e, 0xc2, 0x42, 0x60, 0xc4, 0x4b, 0x11, 0x74, 0x4c, 0x64, 0xcc, 0xa5, 0x84,
	0x55, 0x74, 0x2e, 0x25, 0xeb, 0xb1, 0xaa, 0xe1, 0xb8, 0xaa, 0x41, 0x0d, 0x72, 0x0b, 0x2f, 0xb1,
	0x24, 0x83, 0x1b, 0xff, 0x89, 0xaa, 0xbe, 0xc4, 0x42, 0xe3, 0x3b, 0x7c, 0x37, 0x71, 0x87, 0xef,
	0xc6, 0x0e, 0x52, 0xd4, 0xdb, 0x73, 0x6b, 0x30, 0xd3, 0xf6, 0x06, 0x7e, 0x87, 0xaa, 0xb2, 0x47,
	0x40, 0xf8, 0xff, 0x8a, 0xb0, 0x16, 0x7b, 0x83, 0x51, 0xc7, 0x6b, 0xad, 0xb5, 0xc2, 0x64, 0xad,
	0xb5, 0xe2, 0x64, 0x35, 0x7f, 0xe9, 0x62, 0x35, 0x7f, 0x4e, 0xbf, 0xab, 0x3c, 0x79, 0xbf, 0x6b,
	0xfa, 0xad, 0xfa, 0x5d, 0x33, 0x13, 0xf7, 0xbb, 0x66, 0x73, 0xfa, 0x5d, 0xff, 0x5a, 0x84, 0x6b,
	0x87, 0x5e, 0x68, 0x9f, 0xd8, 0x1d, 0x71, 0xe2, 0x65, 0xe1, 0xa1, 0x1a, 0x81, 0xab, 0x30, 0x7d,
	0xe4, 0xbd, 0xa2, 0xea, 0xe8, 0x0a, 0x80, 0x79, 0x6d, 0xd3, 0x0d, 0xa9, 0xdf, 0xa3, 0x5d, 0xdb,
	0xf2, 0x87, 0xcd, 0xae, 0x6c, 0x36, 0x24, 0xb0, 0x68, 0x03, 0x2e, 0x19, 0x59, 0x29, 0xb0, 0xe4,
	0x9e, 0x27, 0xd1, 0x4c, 0x67, 0x1d, 0xc5, 0xab, 0x0a, 0x51, 0x7c, 0xa6, 0xf0, 0x68, 0x13, 0x50,
	0x62, 0x78, 0xdb, 0x3e, 0x95, 0x0d, 0x84, 0x0c, 0x0a, 0x7a, 0x00, 0x97, 0x9b, 0xcd, 0x46, 0xc6,
	0x10, 0x71, 0x67, 0xcd, 0x26, 0xe6, 0x3f, 0xcf, 0xce, 0x8e, 0x78, 0x9e, 0xc5, 0x7f, 0x09, 0xef,
	0xe8, 0xe6, 0x3c, 0x76, 0xfd, 0x84, 0x41, 0xd3, 0xa6, 0x2b, 0x64, 0x9a, 0x2e, 0x57, 0xe9, 0xe2,
	0x08, 0xa5, 0xf1, 0x0d, 0x80, 0xe3, 0x80, 0x55, 0xc6, 0xc9, 0x5e, 0x52, 0x55, 0xf4, 0x92, 0x7c,
	0x58, 0xd6, 0xd5, 0x8b, 0xde, 0x3d, 0x7c, 0xf3, 0xdd, 0x43, 0xb5, 0x20, 0x77, 0x61, 0xc1, 0xd5,
	0xd8, 0xd5, 0x9d, 0xf8, 0x1d, 0xf3, 0x38, 0x69, 0x1c, 0x0d, 0x2b, 0xb4, 0x88, 0x39, 0x06, 0xbf,
	0x66, 0x85, 0xa3, 0xc9, 0xc2, 0x0a, 0x2d, 0xda, 0x3f, 0xa3, 0x3d, 0xea, 0x5b, 0x8e, 0x9c, 0xb6,
	0x44, 0x74, 0x14, 0x8b, 0xd5, 0x76, 0x97, 0xba, 0xa1, 0x1d, 0x0e, 0xf7, 0x5b, 0x72, 0xd1, 0x1a,
	0x86, 0x49, 0x90, 0x1a, 0xf0, 0xca, 0x57, 0x5e, 0xbb, 0x35, 0x14, 0xfe, 0xa7, 0x02, 0xac, 0xec,
	0x9e, 0x59, 0xae, 0x4b, 0x9d, 0x2f, 0xa8, 0x15, 0x50, 0xb5, 0x03, 0x6b, 0x30, 0xc3, 0x6d, 0xa4,
	0x6a, 0x69, 0x09, 0xa1, 0x0f, 0x61, 0x99, 0xfd, 0xda, 0xeb, 0x6e, 0x7d, 0xfc, 0xf1, 0xef, 0x7d,
	0xaa, 0x55, 0x58, 0x55, 0x92, 0x26, 0x98, 0xb5, 0x4d, 0x29, 0x51, 0xdb, 0xb0, 0xa3, 0xcb, 0x86,
	0x08, 0x5e, 0xbd, 0xac, 0x90, 0x4e, 0x9d, 0x43, 0xc5, 0x7f, 0x5f, 0x80, 0x55, 0x53, 0x67, 0x19,
	0x01, 0x57, 0x61, 0x9a, 0x23, 0xa4, 0xa9, 0x04, 0x30, 0xa1, 0xca, 0x9f, 0xc0, 0x95, 0xe3, 0x06,
	0x1f, 0x28, 0xf1, 0xb1, 0x56, 0xc2, 0x7c, 0x79, 0x64, 0xfc, 0x6f, 0x45, 0x58, 0x39, 0x6e, 0xec,
	0x30, 0x91, 0x46, 0x29, 0xfb, 0x50, 0x8f, 0xd8, 0xb6, 0x7b, 0x1a, 0x0b, 0x14, 0xa6, 0xcd, 0xa1,
	0xf2, 0xbb, 0x17, 0xaf, 0x12, 0x1d, 0xbb, 0xd3, 0xa2, 0x3d, 0x99, 0x1f, 0x0c, 0xdc, 0x18, 0x03,
	0x37, 0x61, 0xb5, 0x29, 0x9d, 0x41, 0xd7, 0x48, 0x36, 0x58, 0x2e, 0x1b, 0x0e, 0x1a, 0x31, 0x66,
	0x0e, 0x61, 0x46, 0x54, 0xf8, 0x58, 0x7f, 0x11, 0x4d, 0xd2, 0x04, 0xb4, 0x05, 0xa5, 0x13, 0x3f,
	0x90, 0xef, 0x22, 0xeb, 0xc6, 0x3c, 0xfb, 0x56, 0x27, 0x4c, 0xc4, 0x4f, 0xc2, 0x98, 0xd9, 0x39,
	0x3c, 0x8e, 0x7a, 0x8e, 0xec, 0x27, 0x7e, 0x01, 0x73, 0x4a, 0x34, 0xcb, 0xa0, 0xcc, 0xb0, 0xae,
	0xd5, 0x53, 0xf7, 0x80, 0x08, 0x66, 0xb4, 0xee, 0x99, 0xb1, 0xaf, 0x11, 0x1c, 0x5d, 0xbe, 0x4a,
	0xf1, 0xe5, 0x0b, 0x9f, 0xc1, 0x4a, 0x86, 0x16, 0x4a, 0x81, 0x42, 0xa4, 0x00, 0xba, 0x05, 0x65,
	0xc6, 0x28, 0xf3, 0xe3, 0x72, 0x7a, 0x1d, 0x9c, 0xcc, 0x42, 0x03, 0xfb, 0xcb, 0xe2, 0x8e, 0x98,
	0x46, 0x81, 0xf8, 0xa1, 0x10, 0xc0, 0xb4, 0xe0, 0x82, 0x84, 0xe6, 0x02, 0x57, 0x87, 0x39, 0xf6,
	0xf7, 0x68, 0xd8, 0xa7, 0xea, 0xf5, 0x5a, 0xc1, 0xf8, 0x09, 0xac, 0x9a, 0x1a, 0x4a, 0x07, 0xbf,
	0x0d, 0x8b, 0x7a, 0x71, 0x29, 0xb5, 0xad, 0x90, 0x04, 0x16, 0xb7, 0x00, 0xb1, 0xf1, 0x12, 0xab,
	0x45, 0xd5, 0x8b, 0x8c, 0x66, 0xda, 0xf2, 0xfb, 0x96, 0x70, 0x38, 0xfe, 0x1b, 0x0f, 0x84, 0x44,
	0x42, 0x7b, 0xde, 0x6b, 0xcb, 0xc9, 0x37, 0xd9, 0x7d, 0x98, 0x97, 0x3c, 0x2c, 0x84, 0xe5, 0x5b,
	0x4e, 0xe7, 0x1a, 0x61, 0xc0, 0xdb, 0x00, 0xed, 0x30, 0xaa, 0xdc, 0x6a, 0x30, 0x6b, 0xc9, 0xca,
	0x4e, 0x16, 0xc9, 0x12, 0xc4, 0xff, 0x5f, 0x82, 0x4a, 0x54, 0x82, 0x68, 0x4d, 0x80, 0x32, 0x29,
	0x8a, 0xbe, 0xb5, 0x28, 0x4a, 0xa2, 0x16, 0x45, 0x04, 0xb3, 0x98, 0xd1, 0x0e, 0x55, 0xa5, 0xbb,
	0x40, 0x04, 0x60, 0xbe, 0x24, 0x97, 0x13, 0x2f, 0xc9, 0x4c, 0xde, 0x91, 0xd7, 0xf7, 0x1c, 0xef,
	0x74, 0x58, 0x9b, 0xe6, 0x79, 0x23, 0x82, 0x59, 0x48, 0x8e, 0x0e, 0x20, 0x3b, 0x01, 0x25, 0x56,
	0x3e, 0xc7, 0x18, 0x74, 0x17, 0x66, 0x64, 0x45, 0x39, 0xcb, 0xd3, 0x44, 0x6e, 0x8d, 0x2c, 0xd9,
	0x52, 0x85, 0xe8, 0xdc, 0x24, 0x85, 0x28, 0x7a, 0x02, 0x75, 0x42, 0x03, 0x5e, 0x3b, 0xfe, 0xf1,
	0x80, 0x0e, 0xa8, 0xfc, 0x46, 0xe8, 0xc0, 0x76, 0x1c, 0x5b, 0x34, 0x8a, 0x17, 0xc8, 0x08, 0x0e,
	0xb3, 0x0f, 0x02, 0x17, 0xec, 0x83, 0xb0, 0x42, 0x45, 0xee, 0x59, 0xbb, 0x6f, 0x75, 0x28, 0xb7,
	0xe2, 0x3c, 0x9f, 0x2b, 0x85, 0x47, 0x8f, 0xa0, 0xba, 0xd7, 0xe9, 0xc4, 0x93, 0x54, 0x93, 0x93,
	0xec, 0xed, 0xee, 0xc6, 0x93, 0x18, 0xbc, 0xf8, 0xaf, 0x0a, 0xb2, 0x3d, 0x29, 0x8a, 0xe6, 0xf8,
	0xb1, 0xb9, 0xcc, 0x1f, 0x9b, 0xd7, 0x60, 0xe6, 0xd0, 0xeb, 0xd2, 0xa8, 0xf2, 0x92, 0x50, 0xf6,
	0x9d, 0xec, 0x2d, 0x9f, 0x12, 0x7f, 0x28, 0xc0, 0xe2, 0xf6, 0x20, 0x3c, 0xf3, 0x7c, 0xfb, 0x7b,
	0xea, 0xb3, 0x5f, 0xd1, 0xb4, 0x51, 0xee, 0x14, 0x50, 0x14, 0x8b, 0x8a, 0x5a, 0x23, 0xe8, 0x3a,
	0x54, 0x5a, 0x83, 0x97, 0xaf, 0xe8, 0x90, 0x45, 0x78, 0xe1, 0xfc, 0x31, 0x42, 0x85, 0xf7, 0xb6,
	0xf6, 0x0e, 0x11, 0x23, 0x18, 0x35, 0x48, 0xc4, 0xe2, 0x18, 0xb1, 0xf5, 0x03, 0x40, 0x99, 0x4d,
	0x8c, 0x1e, 0x43, 0x65, 0x3b, 0x78, 0xf5, 0xa5, 0xeb, 0xd8, 0x2e, 0x45, 0x37, 0xe2, 0x15, 0x31,
	0x5d, 0x59, 0x74, 0xed, 0x58, 0x21, 0x55, 0xaf, 0x75, 0xf5, 0x05, 0x8d, 0xde, 0x79, 0x85, 0xa7,
	0xd0, 0x36, 0x2c, 0xee, 0xfa, 0xd4, 0x0a, 0xe9, 0x21, 0x7d, 0x23, 0x5b, 0xc2, 0x93, 0x8a, 0x78,
	0x04, 0xe8, 0xb8, 0xef, 0x78, 0x56, 0xf7, 0xd8, 0xed, 0xd9, 0xe7, 0xea, 0x43, 0x92, 0x74, 0x1f,
	0x36, 0x35, 0x72, 0xa3, 0x80, 0x1e, 0xc2, 0xe2, 0xbe, 0xed, 0xda, 0xc1, 0x19, 0xa1, 0x96, 0x13,
	0xda, 0x3d, 0x7a, 0xc1, 0x71, 0x9f, 0xc0, 0x92, 0xfc, 0x8c, 0xe8, 0x88, 0x06, 0xe1, 0x24, 0x33,
	0x3e, 0x86, 0x0a, 0xff, 0x08, 0x89, 0x7f, 0x51, 0x32, 0xf1, 0x5a, 0x7f, 0x1f, 0x2e, 0x89, 0x97,
	0xe5, 0x58, 0xc6, 0xc5, 0xa6, 0x3d, 0x02, 0xf4, 0x94, 0x86, 0xc9, 0x6f, 0x96, 0xc6, 0xcd, 0x7f,
	0x3d, 0x1d, 0x3d, 0xe2, 0xd1, 0x78, 0x0a, 0x1d, 0x45, 0x9f, 0x5a, 0xc6, 0xdf, 0xc8, 0x8d, 0x93,
	0x39, 0xe6, 0x1b, 0x34, 0x3c, 0x85, 0x1a, 0x59, 0xdf, 0x69, 0x4d, 0x6c, 0xaa, 0x26, 0x00, 0x7f,
	0x8a, 0xb6, 0x02, 0x16, 0x32, 0xc6, 0x0d, 0xbf, 0x9a, 0x5e, 0xa9, 0xfc, 0x98, 0x8a, 0x8b, 0x2a,
	0xf3, 0xae, 0xc8, 0x38, 0x21, 0xef, 0x9a, 0x4b, 0x4b, 0x7d, 0xae, 0x82, 0xa7, 0xd0, 0x73, 0x40,
	0x0d, 0xef, 0x8d, 0xcb, 0xdc, 0xf5, 0x20, 0x76, 0xd6, 0x71, 0x82, 0xd3, 0x7b, 0x8c, 0xa7, 0xee,
	0x15, 0x98, 0xa1, 0xda, 0xd4, 0xed, 0x9a, 0x9f, 0x1d, 0x4d, 0x6c, 0xa8, 0x3f, 0x34, 0x82, 0xdc,
	0xc4, 0xc3, 0x1b, 0x70, 0xe5, 0x29, 0x0d, 0x8d, 0x22, 0x53, 0x25, 0xd4, 0xc5, 0x98, 0x97, 0xa9,
	0x56, 0x37, 0x93, 0x51, 0x9c, 0x79, 0xf1, 0x14, 0xda, 0x61, 0x8e, 0x6d, 0xf9, 0xa1, 0xf8, 0x9e,
	0xe3, 0xed, 0x0e, 0x07, 0x93, 0x11, 0x0d, 0x7f, 0xcb, 0x60, 0xf2, 0x19, 0x2c, 0x70, 0x19, 0xfb,
	0xb6, 0x6b, 0x39, 0x17, 0x71, 0xe7, 0xa4, 0x84, 0xad, 0xbf, 0x9b, 0x81, 0x59, 0xf5, 0xcd, 0xe2,
	0xd7, 0x19, 0xe7, 0xe3, 0xbd, 0x0c, 0xff, 0x4f, 0x7e, 0xcf, 0x7a, 0x81, 0x43, 0x72, 0x06, 0x97,
	0xb9, 0xef, 0xa4, 0xde, 0x03, 0x36, 0x72, 0xe5, 0x27, 0x3e, 0x3f, 0xae, 0x67, 0x69, 0x92, 0xfc,
	0x8c, 0x14, 0x4f, 0xa1, 0xcf, 0x01, 0x5a, 0x83, 0x30, 0x7a, 0xc3, 0xca, 0x7b, 0x6e, 0xab, 0xaf,
	0xe7, 0x3e, 0xc4, 0xc5, 0xb2, 0x5a, 0x70, 0x89, 0xc9, 0xb2, 0xdc, 0x61, 0xf4, 0x36, 0x77, 0x35,
	0x6f, 0x58, 0x70, 0x21, 0x89, 0xc7, 0x42, 0xa2, 0x60, 0x6a, 0xf9, 0xde, 0xf9, 0xf8, 0x2d, 0xbb,
	0x88, 0xd8, 0x6f, 0x60, 0x35, 0xa1, 0xe8, 0x2f, 0x27, 0xfb, 0x89, 0x0c, 0x27, 0x99, 0xa6, 0x64,
	0x94, 0x7a, 0x2d, 0x79, 0x50, 0xd4, 0xb7, 0x44, 0xfc, 0xd8, 0x5b, 0x70, 0x45, 0x6e, 0x61, 0xea,
	0x03, 0x22, 0xb3, 0x2b, 0x90, 0x24, 0xd7, 0x6f, 0x8d, 0x24, 0x6b, 0x2a, 0x7e, 0x09, 0x97, 0xe4,
	0x14, 0xf1, 0x1b, 0xaa, 0xa9, 0x6d, 0xfc, 0x95, 0x4f, 0x72, 0xcd, 0xe9, 0xef, 0x7f, 0xf0, 0xd4,
	0xd6, 0x39, 0x5c, 0x32, 0xdb, 0xf5, 0x3e, 0xa2, 0x50, 0x55, 0x37, 0x10, 0x76, 0xd7, 0x42, 0xef,
	0x66, 0xd4, 0x9c, 0xba, 0x67, 0xd7, 0xb7, 0x72, 0x3d, 0x3b, 0xf7, 0x0d, 0x00, 0x4f, 0x6d, 0xfd,
	0x73, 0x51, 0xcd, 0x23, 0x0f, 0xc8, 0x93, 0x78, 0x5e, 0x5e, 0xc0, 0x24, 0x3b, 0x29, 0xe6, 0x79,
	0x4a, 0x87, 0x88, 0xfb, 0x30, 0xcb, 0x36, 0xe9, 0xb0, 0x7b, 0x82, 0x32, 0x7b, 0xdd, 0xf5, 0x54,
	0xa7, 0x13, 0x4f, 0xa1, 0x83, 0x0b, 0xa6, 0x10, 0xf3, 0x4c, 0x66, 0xb7, 0x62, 0xf1, 0x14, 0xfa,
	0x0e, 0x96, 0xf9, 0x83, 0xa4, 0xb1, 0x30, 0x73, 0x1f, 0x32, 0x9e, 0x2f, 0xeb, 0xef, 0x8f, 0xe2,
	0xd0, 0xec, 0x86, 0xa7, 0xb6, 0xfe, 0xb6, 0x08, 0x97, 0x8c, 0x36, 0x95, 0x17, 0xa2, 0xaf, 0xa1,
	0x1e, 0x37, 0xd3, 0xf6, 0x3d, 0x5f, 0xa7, 0x07, 0xe8, 0x4e, 0x6e, 0x47, 0x2a, 0xd5, 0x81, 0x4b,
	0x1b, 0xf5, 0x18, 0x6a, 0x24, 0x4f, 0xf0, 0x46, 0xae, 0x60, 0x32, 0x4e, 0xec, 0x73, 0x26, 0x96,
	0x7f, 0x5d, 0x91, 0x6e, 0xb9, 0x4d, 0x1c, 0xd9, 0x7f, 0x2e, 0x41, 0xe9, 0xb8, 0xb1, 0x83, 0xb6,
	0x13, 0x8e, 0x6b, 0xda, 0x3d, 0xa3, 0x47, 0x93, 0xd6, 0xeb, 0x09, 0x00, 0xbf, 0xa1, 0xd2, 0x0c,
	0xcf, 0x4f, 0x5f, 0x84, 0xb3, 0xcc, 0x15, 0xa9, 0xc0, 0x6f, 0xfb, 0x63, 0x9b, 0x20, 0xf5, 0xdf,
	0x19, 0xc1, 0x11, 0xb9, 0xd5, 0x1f, 0xc1, 0xbc, 0x74, 0x03, 0x2e, 0x35, 0xad, 0x97, 0x79, 0xe5,
	0x1f, 0xb1, 0xae, 0x9c, 0xf1, 0xe3, 0xd6, 0xf5, 0x2d, 0xac, 0xa8, 0x84, 0xa9, 0x75, 0xe0, 0x12,
	0xcb, 0xcb, 0x68, 0x28, 0x26, 0x96, 0x97, 0xd5, 0xbe, 0xc3, 0x53, 0x5b, 0x4f, 0x01, 0xe2, 0xbb,
	0x14, 0xfa, 0x14, 0x2a, 0x11, 0x84, 0xae, 0x19, 0xe3, 0xcd, 0x1b, 0x57, 0x4a, 0xcd, 0x9d, 0xdb,
	0xdf, 0xdc, 0xd4, 0xfe, 0xa5, 0x8a, 0x3a, 0xf6, 0xf9, 0xb9, 0xed, 0xab, 0xff, 0xa7, 0x8a, 0xe5,
	0xbc, 0x9c, 0xe1, 0x5f, 0x7a, 0xdf, 0xff, 0x55, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x51, 0x51,
	0x48, 0xa1, 0x35, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// UploadUnmixedBatch sends a batch to be processed in the server's realtime
	// Gateway -> Server
	UploadUnmixedBatch(ctx context.Context, opts ...grpc.CallOption) (Node_UploadUnmixedBatchClient, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(ctx context.Context, opts ...grpc.CallOption) (Node_FinishRealtimeClient, error)
	// PrecompTestBatch is a server to server streaming broadcast. It simulates
	// sending the completed batch of FinishRealtime, testing for connectivity.
	PrecompTestBatch(ctx context.Context, opts ...grpc.CallOption) (Node_PrecompTestBatchClient, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestClientKey generates a nonce for user registration
	RequestClientKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*SignedKeyResponse, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	//
	GetMeasure(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error)
	// Streams a completed batch
	// Server -> Gateway
	DownloadMixedBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (Node_DownloadMixedBatchClient, error)
	// Round trip ping comm
	SendRoundTripPing(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Round error comm
	RoundError(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Gateway permissioning address
	GetPermissioningAddress(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*StrAddress, error)
	// Server -> Server initiating multi-party round DH key generation
	StartSharePhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Server passing state of multi-party round DH key generation
	SharePhaseRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Server received final key
	ShareFinalKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UploadUnmixedBatch(ctx context.Context, opts ...grpc.CallOption) (Node_UploadUnmixedBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/mixmessages.Node/UploadUnmixedBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeUploadUnmixedBatchClient{stream}
	return x, nil
}

type Node_UploadUnmixedBatchClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodeUploadUnmixedBatchClient struct {
	grpc.ClientStream
}

func (x *nodeUploadUnmixedBatchClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeUploadUnmixedBatchClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) FinishRealtime(ctx context.Context, opts ...grpc.CallOption) (Node_FinishRealtimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/mixmessages.Node/FinishRealtime", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeFinishRealtimeClient{stream}
	return x, nil
}

type Node_FinishRealtimeClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodeFinishRealtimeClient struct {
	grpc.ClientStream
}

func (x *nodeFinishRealtimeClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeFinishRealtimeClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) PrecompTestBatch(ctx context.Context, opts ...grpc.CallOption) (Node_PrecompTestBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[2], "/mixmessages.Node/PrecompTestBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodePrecompTestBatchClient{stream}
	return x, nil
}

type Node_PrecompTestBatchClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodePrecompTestBatchClient struct {
	grpc.ClientStream
}

func (x *nodePrecompTestBatchClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodePrecompTestBatchClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) PostPhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[3], "/mixmessages.Node/StreamPostPhase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPostPhaseClient{stream}
	return x, nil
}

type Node_StreamPostPhaseClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodeStreamPostPhaseClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPostPhaseClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestClientKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*SignedKeyResponse, error) {
	out := new(SignedKeyResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestClientKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPrecompResult(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPrecompResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMeasure(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error) {
	out := new(RoundMetrics)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error) {
	out := new(ServerPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DownloadMixedBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (Node_DownloadMixedBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[4], "/mixmessages.Node/DownloadMixedBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeDownloadMixedBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_DownloadMixedBatchClient interface {
	Recv() (*Slot, error)
	grpc.ClientStream
}

type nodeDownloadMixedBatchClient struct {
	grpc.ClientStream
}

func (x *nodeDownloadMixedBatchClient) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SendRoundTripPing(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SendRoundTripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RoundError(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RoundError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetPermissioningAddress(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*StrAddress, error) {
	out := new(StrAddress)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetPermissioningAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StartSharePhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/StartSharePhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SharePhaseRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SharePhaseRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ShareFinalKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ShareFinalKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// UploadUnmixedBatch sends a batch to be processed in the server's realtime
	// Gateway -> Server
	UploadUnmixedBatch(Node_UploadUnmixedBatchServer) error
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(Node_FinishRealtimeServer) error
	// PrecompTestBatch is a server to server streaming broadcast. It simulates
	// sending the completed batch of FinishRealtime, testing for connectivity.
	PrecompTestBatch(Node_PrecompTestBatchServer) error
	// PostPhase runs a cMix phase on another node
	PostPhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(Node_StreamPostPhaseServer) error
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *messages.AuthenticatedMessage) (*RoundBufferInfo, error)
	// RequestClientKey generates a nonce for user registration
	RequestClientKey(context.Context, *messages.AuthenticatedMessage) (*SignedKeyResponse, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	//
	GetMeasure(context.Context, *messages.AuthenticatedMessage) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(context.Context, *messages.AuthenticatedMessage) (*ServerPollResponse, error)
	// Streams a completed batch
	// Server -> Gateway
	DownloadMixedBatch(*messages.AuthenticatedMessage, Node_DownloadMixedBatchServer) error
	// Round trip ping comm
	SendRoundTripPing(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Round error comm
	RoundError(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Gateway permissioning address
	GetPermissioningAddress(context.Context, *messages.Ping) (*StrAddress, error)
	// Server -> Server initiating multi-party round DH key generation
	StartSharePhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Server passing state of multi-party round DH key generation
	SharePhaseRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Server received final key
	ShareFinalKey(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AskOnline(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskOnline not implemented")
}
func (*UnimplementedNodeServer) CreateNewRound(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRound not implemented")
}
func (*UnimplementedNodeServer) UploadUnmixedBatch(srv Node_UploadUnmixedBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadUnmixedBatch not implemented")
}
func (*UnimplementedNodeServer) FinishRealtime(srv Node_FinishRealtimeServer) error {
	return status.Errorf(codes.Unimplemented, "method FinishRealtime not implemented")
}
func (*UnimplementedNodeServer) PrecompTestBatch(srv Node_PrecompTestBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method PrecompTestBatch not implemented")
}
func (*UnimplementedNodeServer) PostPhase(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPhase not implemented")
}
func (*UnimplementedNodeServer) StreamPostPhase(srv Node_StreamPostPhaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostPhase not implemented")
}
func (*UnimplementedNodeServer) GetRoundBufferInfo(ctx context.Context, req *messages.AuthenticatedMessage) (*RoundBufferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBufferInfo not implemented")
}
func (*UnimplementedNodeServer) RequestClientKey(ctx context.Context, req *messages.AuthenticatedMessage) (*SignedKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestClientKey not implemented")
}
func (*UnimplementedNodeServer) PostPrecompResult(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrecompResult not implemented")
}
func (*UnimplementedNodeServer) GetMeasure(ctx context.Context, req *messages.AuthenticatedMessage) (*RoundMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (*UnimplementedNodeServer) Poll(ctx context.Context, req *messages.AuthenticatedMessage) (*ServerPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedNodeServer) DownloadMixedBatch(req *messages.AuthenticatedMessage, srv Node_DownloadMixedBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMixedBatch not implemented")
}
func (*UnimplementedNodeServer) SendRoundTripPing(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoundTripPing not implemented")
}
func (*UnimplementedNodeServer) RoundError(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundError not implemented")
}
func (*UnimplementedNodeServer) GetPermissioningAddress(ctx context.Context, req *messages.Ping) (*StrAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissioningAddress not implemented")
}
func (*UnimplementedNodeServer) StartSharePhase(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSharePhase not implemented")
}
func (*UnimplementedNodeServer) SharePhaseRound(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePhaseRound not implemented")
}
func (*UnimplementedNodeServer) ShareFinalKey(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFinalKey not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UploadUnmixedBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).UploadUnmixedBatch(&nodeUploadUnmixedBatchServer{stream})
}

type Node_UploadUnmixedBatchServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeUploadUnmixedBatchServer struct {
	grpc.ServerStream
}

func (x *nodeUploadUnmixedBatchServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeUploadUnmixedBatchServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_FinishRealtime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).FinishRealtime(&nodeFinishRealtimeServer{stream})
}

type Node_FinishRealtimeServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeFinishRealtimeServer struct {
	grpc.ServerStream
}

func (x *nodeFinishRealtimeServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeFinishRealtimeServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_PrecompTestBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).PrecompTestBatch(&nodePrecompTestBatchServer{stream})
}

type Node_PrecompTestBatchServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodePrecompTestBatchServer struct {
	grpc.ServerStream
}

func (x *nodePrecompTestBatchServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodePrecompTestBatchServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_PostPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPhase(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPostPhase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPostPhase(&nodeStreamPostPhaseServer{stream})
}

type Node_StreamPostPhaseServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeStreamPostPhaseServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPostPhaseServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestClientKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestClientKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestClientKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestClientKey(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPrecompResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPrecompResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPrecompResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPrecompResult(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMeasure(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Poll(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DownloadMixedBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.AuthenticatedMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).DownloadMixedBatch(m, &nodeDownloadMixedBatchServer{stream})
}

type Node_DownloadMixedBatchServer interface {
	Send(*Slot) error
	grpc.ServerStream
}

type nodeDownloadMixedBatchServer struct {
	grpc.ServerStream
}

func (x *nodeDownloadMixedBatchServer) Send(m *Slot) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SendRoundTripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendRoundTripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SendRoundTripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendRoundTripPing(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RoundError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RoundError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RoundError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RoundError(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetPermissioningAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetPermissioningAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetPermissioningAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetPermissioningAddress(ctx, req.(*messages.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StartSharePhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StartSharePhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/StartSharePhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StartSharePhase(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SharePhaseRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SharePhaseRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SharePhaseRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SharePhaseRound(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ShareFinalKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ShareFinalKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ShareFinalKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ShareFinalKey(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "PostPhase",
			Handler:    _Node_PostPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestClientKey",
			Handler:    _Node_RequestClientKey_Handler,
		},
		{
			MethodName: "PostPrecompResult",
			Handler:    _Node_PostPrecompResult_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Node_GetMeasure_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Node_Poll_Handler,
		},
		{
			MethodName: "SendRoundTripPing",
			Handler:    _Node_SendRoundTripPing_Handler,
		},
		{
			MethodName: "RoundError",
			Handler:    _Node_RoundError_Handler,
		},
		{
			MethodName: "GetPermissioningAddress",
			Handler:    _Node_GetPermissioningAddress_Handler,
		},
		{
			MethodName: "StartSharePhase",
			Handler:    _Node_StartSharePhase_Handler,
		},
		{
			MethodName: "SharePhaseRound",
			Handler:    _Node_SharePhaseRound_Handler,
		},
		{
			MethodName: "ShareFinalKey",
			Handler:    _Node_ShareFinalKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadUnmixedBatch",
			Handler:       _Node_UploadUnmixedBatch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FinishRealtime",
			Handler:       _Node_FinishRealtime_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PrecompTestBatch",
			Handler:       _Node_PrecompTestBatch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPostPhase",
			Handler:       _Node_StreamPostPhase_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadMixedBatch",
			Handler:       _Node_DownloadMixedBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// RequestClientKey returns a Nonce to the user
	RequestClientKey(ctx context.Context, in *SignedClientKeyRequest, opts ...grpc.CallOption) (*SignedKeyResponse, error)
	BatchNodeRegistration(ctx context.Context, in *SignedClientBatchKeyRequest, opts ...grpc.CallOption) (*SignedBatchKeyResponse, error)
	// PutMessage on the cMix Gateway (client -> gateway)
	PutMessage(ctx context.Context, in *GatewaySlot, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (client -> gateway)
	PutManyMessages(ctx context.Context, in *GatewaySlots, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (gateway -> gateway)
	PutMessageProxy(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (gateway -> gateway)
	PutManyMessagesProxy(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// Client -> Gateway unified polling
	Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (Gateway_PollClient, error)
	// Client -> Gateway historical round request
	RequestHistoricalRounds(ctx context.Context, in *HistoricalRounds, opts ...grpc.CallOption) (*HistoricalRoundsResponse, error)
	// Client -> Gateway message request
	RequestMessages(ctx context.Context, in *GetMessages, opts ...grpc.CallOption) (*GetMessagesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) RequestClientKey(ctx context.Context, in *SignedClientKeyRequest, opts ...grpc.CallOption) (*SignedKeyResponse, error) {
	out := new(SignedKeyResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestClientKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) BatchNodeRegistration(ctx context.Context, in *SignedClientBatchKeyRequest, opts ...grpc.CallOption) (*SignedBatchKeyResponse, error) {
	out := new(SignedBatchKeyResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/BatchNodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *GatewaySlot, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutManyMessages(ctx context.Context, in *GatewaySlots, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutManyMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessageProxy(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessageProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutManyMessagesProxy(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutManyMessagesProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (Gateway_PollClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gateway_serviceDesc.Streams[0], "/mixmessages.Gateway/Poll", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayPollClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_PollClient interface {
	Recv() (*StreamChunk, error)
	grpc.ClientStream
}

type gatewayPollClient struct {
	grpc.ClientStream
}

func (x *gatewayPollClient) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) RequestHistoricalRounds(ctx context.Context, in *HistoricalRounds, opts ...grpc.CallOption) (*HistoricalRoundsResponse, error) {
	out := new(HistoricalRoundsResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestHistoricalRounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestMessages(ctx context.Context, in *GetMessages, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// RequestClientKey returns a Nonce to the user
	RequestClientKey(context.Context, *SignedClientKeyRequest) (*SignedKeyResponse, error)
	BatchNodeRegistration(context.Context, *SignedClientBatchKeyRequest) (*SignedBatchKeyResponse, error)
	// PutMessage on the cMix Gateway (client -> gateway)
	PutMessage(context.Context, *GatewaySlot) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (client -> gateway)
	PutManyMessages(context.Context, *GatewaySlots) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (gateway -> gateway)
	PutMessageProxy(context.Context, *messages.AuthenticatedMessage) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway (gateway -> gateway)
	PutManyMessagesProxy(context.Context, *messages.AuthenticatedMessage) (*GatewaySlotResponse, error)
	// Client -> Gateway unified polling
	Poll(*GatewayPoll, Gateway_PollServer) error
	// Client -> Gateway historical round request
	RequestHistoricalRounds(context.Context, *HistoricalRounds) (*HistoricalRoundsResponse, error)
	// Client -> Gateway message request
	RequestMessages(context.Context, *GetMessages) (*GetMessagesResponse, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) RequestClientKey(ctx context.Context, req *SignedClientKeyRequest) (*SignedKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestClientKey not implemented")
}
func (*UnimplementedGatewayServer) BatchNodeRegistration(ctx context.Context, req *SignedClientBatchKeyRequest) (*SignedBatchKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchNodeRegistration not implemented")
}
func (*UnimplementedGatewayServer) PutMessage(ctx context.Context, req *GatewaySlot) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedGatewayServer) PutManyMessages(ctx context.Context, req *GatewaySlots) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutManyMessages not implemented")
}
func (*UnimplementedGatewayServer) PutMessageProxy(ctx context.Context, req *messages.AuthenticatedMessage) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessageProxy not implemented")
}
func (*UnimplementedGatewayServer) PutManyMessagesProxy(ctx context.Context, req *messages.AuthenticatedMessage) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutManyMessagesProxy not implemented")
}
func (*UnimplementedGatewayServer) Poll(req *GatewayPoll, srv Gateway_PollServer) error {
	return status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedGatewayServer) RequestHistoricalRounds(ctx context.Context, req *HistoricalRounds) (*HistoricalRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestHistoricalRounds not implemented")
}
func (*UnimplementedGatewayServer) RequestMessages(ctx context.Context, req *GetMessages) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMessages not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_RequestClientKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedClientKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestClientKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestClientKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestClientKey(ctx, req.(*SignedClientKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_BatchNodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedClientBatchKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).BatchNodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/BatchNodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).BatchNodeRegistration(ctx, req.(*SignedClientBatchKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*GatewaySlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutManyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySlots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutManyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutManyMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutManyMessages(ctx, req.(*GatewaySlots))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessageProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessageProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessageProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessageProxy(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutManyMessagesProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutManyMessagesProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutManyMessagesProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutManyMessagesProxy(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Poll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayPoll)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).Poll(m, &gatewayPollServer{stream})
}

type Gateway_PollServer interface {
	Send(*StreamChunk) error
	grpc.ServerStream
}

type gatewayPollServer struct {
	grpc.ServerStream
}

func (x *gatewayPollServer) Send(m *StreamChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_RequestHistoricalRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalRounds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestHistoricalRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestHistoricalRounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestHistoricalRounds(ctx, req.(*HistoricalRounds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestMessages(ctx, req.(*GetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestClientKey",
			Handler:    _Gateway_RequestClientKey_Handler,
		},
		{
			MethodName: "BatchNodeRegistration",
			Handler:    _Gateway_BatchNodeRegistration_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "PutManyMessages",
			Handler:    _Gateway_PutManyMessages_Handler,
		},
		{
			MethodName: "PutMessageProxy",
			Handler:    _Gateway_PutMessageProxy_Handler,
		},
		{
			MethodName: "PutManyMessagesProxy",
			Handler:    _Gateway_PutManyMessagesProxy_Handler,
		},
		{
			MethodName: "RequestHistoricalRounds",
			Handler:    _Gateway_RequestHistoricalRounds_Handler,
		},
		{
			MethodName: "RequestMessages",
			Handler:    _Gateway_RequestMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Poll",
			Handler:       _Gateway_Poll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// ClientRegistrarClient is the client API for ClientRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientRegistrarClient interface {
	// Client uses this to register its user with the system
	RegisterUser(ctx context.Context, in *ClientRegistration, opts ...grpc.CallOption) (*SignedClientRegistrationConfirmations, error)
}

type clientRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRegistrarClient(cc grpc.ClientConnInterface) ClientRegistrarClient {
	return &clientRegistrarClient{cc}
}

func (c *clientRegistrarClient) RegisterUser(ctx context.Context, in *ClientRegistration, opts ...grpc.CallOption) (*SignedClientRegistrationConfirmations, error) {
	out := new(SignedClientRegistrationConfirmations)
	err := c.cc.Invoke(ctx, "/mixmessages.ClientRegistrar/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRegistrarServer is the server API for ClientRegistrar service.
type ClientRegistrarServer interface {
	// Client uses this to register its user with the system
	RegisterUser(context.Context, *ClientRegistration) (*SignedClientRegistrationConfirmations, error)
}

// UnimplementedClientRegistrarServer can be embedded to have forward compatible implementations.
type UnimplementedClientRegistrarServer struct {
}

func (*UnimplementedClientRegistrarServer) RegisterUser(ctx context.Context, req *ClientRegistration) (*SignedClientRegistrationConfirmations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

func RegisterClientRegistrarServer(s *grpc.Server, srv ClientRegistrarServer) {
	s.RegisterService(&_ClientRegistrar_serviceDesc, srv)
}

func _ClientRegistrar_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistrarServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.ClientRegistrar/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistrarServer).RegisterUser(ctx, req.(*ClientRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegistrar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.ClientRegistrar",
	HandlerType: (*ClientRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _ClientRegistrar_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Node registration for the permissioning server
	RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*messages.Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(ctx context.Context, in *NDFHash, opts ...grpc.CallOption) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) PollNdf(ctx context.Context, in *NDFHash, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/PollNdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error) {
	out := new(PermissionPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error) {
	out := new(RegisteredNodeConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/CheckRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Node registration for the permissioning server
	RegisterNode(context.Context, *NodeRegistration) (*messages.Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(context.Context, *NDFHash) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(context.Context, *messages.AuthenticatedMessage) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(context.Context, *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) RegisterNode(ctx context.Context, req *NodeRegistration) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedRegistrationServer) PollNdf(ctx context.Context, req *NDFHash) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollNdf not implemented")
}
func (*UnimplementedRegistrationServer) Poll(ctx context.Context, req *messages.AuthenticatedMessage) (*PermissionPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedRegistrationServer) CheckRegistration(ctx context.Context, req *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegistration not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterNode(ctx, req.(*NodeRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_PollNdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NDFHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).PollNdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/PollNdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).PollNdf(ctx, req.(*NDFHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Poll(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CheckRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredNodeCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CheckRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/CheckRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CheckRegistration(ctx, req.(*RegisteredNodeCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Registration_RegisterNode_Handler,
		},
		{
			MethodName: "PollNdf",
			Handler:    _Registration_PollNdf_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Registration_Poll_Handler,
		},
		{
			MethodName: "CheckRegistration",
			Handler:    _Registration_CheckRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// NotificationBotClient is the client API for NotificationBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationBotClient interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(ctx context.Context, in *NotificationUnregisterRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// Gateway -> Notifications notification data
	ReceiveNotificationBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type notificationBotClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationBotClient(cc grpc.ClientConnInterface) NotificationBotClient {
	return &notificationBotClient{cc}
}

func (c *notificationBotClient) UnregisterForNotifications(ctx context.Context, in *NotificationUnregisterRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/UnregisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) RegisterForNotifications(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/RegisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) ReceiveNotificationBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/ReceiveNotificationBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationBotServer is the server API for NotificationBot service.
type NotificationBotServer interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(context.Context, *NotificationUnregisterRequest) (*messages.Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(context.Context, *NotificationRegisterRequest) (*messages.Ack, error)
	// Gateway -> Notifications notification data
	ReceiveNotificationBatch(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedNotificationBotServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationBotServer struct {
}

func (*UnimplementedNotificationBotServer) UnregisterForNotifications(ctx context.Context, req *NotificationUnregisterRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) RegisterForNotifications(ctx context.Context, req *NotificationRegisterRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) ReceiveNotificationBatch(ctx context.Context, req *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveNotificationBatch not implemented")
}

func RegisterNotificationBotServer(s *grpc.Server, srv NotificationBotServer) {
	s.RegisterService(&_NotificationBot_serviceDesc, srv)
}

func _NotificationBot_UnregisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/UnregisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, req.(*NotificationUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_RegisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/RegisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, req.(*NotificationRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_ReceiveNotificationBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).ReceiveNotificationBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/ReceiveNotificationBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).ReceiveNotificationBatch(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.NotificationBot",
	HandlerType: (*NotificationBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnregisterForNotifications",
			Handler:    _NotificationBot_UnregisterForNotifications_Handler,
		},
		{
			MethodName: "RegisterForNotifications",
			Handler:    _NotificationBot_RegisterForNotifications_Handler,
		},
		{
			MethodName: "ReceiveNotificationBatch",
			Handler:    _NotificationBot_ReceiveNotificationBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// UDBClient is the client API for UDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UDBClient interface {
	// RegisterUser adds a new ID to the user discovery system
	RegisterUser(ctx context.Context, in *UDBUserRegistration, opts ...grpc.CallOption) (*messages.Ack, error)
	// RemoveUser deletes this user registration and blocks anyone from ever
	// registering under that username again.
	// The fact removal request must be for the username or it will not work.
	RemoveUser(ctx context.Context, in *FactRemovalRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// RegisterFact starts the association of a fact with an ID. This is
	// completed if it is a username and confirmations are required for verifiable
	// facts like e-mail address and phone numbers.
	RegisterFact(ctx context.Context, in *FactRegisterRequest, opts ...grpc.CallOption) (*FactRegisterResponse, error)
	// ConfirmFact completes the association of a fact with an ID
	ConfirmFact(ctx context.Context, in *FactConfirmRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// RemoveFact deletes a fact from its associated ID.
	// You cannot RemoveFact on a username. Callers must RemoveUser and reregsiter.
	RemoveFact(ctx context.Context, in *FactRemovalRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// RequestChannelAuthentication requests a signature from UD on a user's ed25519 public key
	// Returning a lease and a signature from UD
	RequestChannelLease(ctx context.Context, in *ChannelLeaseRequest, opts ...grpc.CallOption) (*ChannelLeaseResponse, error)
}

type uDBClient struct {
	cc grpc.ClientConnInterface
}

func NewUDBClient(cc grpc.ClientConnInterface) UDBClient {
	return &uDBClient{cc}
}

func (c *uDBClient) RegisterUser(ctx context.Context, in *UDBUserRegistration, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RemoveUser(ctx context.Context, in *FactRemovalRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RegisterFact(ctx context.Context, in *FactRegisterRequest, opts ...grpc.CallOption) (*FactRegisterResponse, error) {
	out := new(FactRegisterResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RegisterFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) ConfirmFact(ctx context.Context, in *FactConfirmRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/ConfirmFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RemoveFact(ctx context.Context, in *FactRemovalRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RemoveFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RequestChannelLease(ctx context.Context, in *ChannelLeaseRequest, opts ...grpc.CallOption) (*ChannelLeaseResponse, error) {
	out := new(ChannelLeaseResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RequestChannelLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDBServer is the server API for UDB service.
type UDBServer interface {
	// RegisterUser adds a new ID to the user discovery system
	RegisterUser(context.Context, *UDBUserRegistration) (*messages.Ack, error)
	// RemoveUser deletes this user registration and blocks anyone from ever
	// registering under that username again.
	// The fact removal request must be for the username or it will not work.
	RemoveUser(context.Context, *FactRemovalRequest) (*messages.Ack, error)
	// RegisterFact starts the association of a fact with an ID. This is
	// completed if it is a username and confirmations are required for verifiable
	// facts like e-mail address and phone numbers.
	RegisterFact(context.Context, *FactRegisterRequest) (*FactRegisterResponse, error)
	// ConfirmFact completes the association of a fact with an ID
	ConfirmFact(context.Context, *FactConfirmRequest) (*messages.Ack, error)
	// RemoveFact deletes a fact from its associated ID.
	// You cannot RemoveFact on a username. Callers must RemoveUser and reregsiter.
	RemoveFact(context.Context, *FactRemovalRequest) (*messages.Ack, error)
	// RequestChannelAuthentication requests a signature from UD on a user's ed25519 public key
	// Returning a lease and a signature from UD
	RequestChannelLease(context.Context, *ChannelLeaseRequest) (*ChannelLeaseResponse, error)
}

// UnimplementedUDBServer can be embedded to have forward compatible implementations.
type UnimplementedUDBServer struct {
}

func (*UnimplementedUDBServer) RegisterUser(ctx context.Context, req *UDBUserRegistration) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedUDBServer) RemoveUser(ctx context.Context, req *FactRemovalRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedUDBServer) RegisterFact(ctx context.Context, req *FactRegisterRequest) (*FactRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFact not implemented")
}
func (*UnimplementedUDBServer) ConfirmFact(ctx context.Context, req *FactConfirmRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFact not implemented")
}
func (*UnimplementedUDBServer) RemoveFact(ctx context.Context, req *FactRemovalRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFact not implemented")
}
func (*UnimplementedUDBServer) RequestChannelLease(ctx context.Context, req *ChannelLeaseRequest) (*ChannelLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChannelLease not implemented")
}

func RegisterUDBServer(s *grpc.Server, srv UDBServer) {
	s.RegisterService(&_UDB_serviceDesc, srv)
}

func _UDB_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UDBUserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RegisterUser(ctx, req.(*UDBUserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RemoveUser(ctx, req.(*FactRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RegisterFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RegisterFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RegisterFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RegisterFact(ctx, req.(*FactRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_ConfirmFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).ConfirmFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/ConfirmFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).ConfirmFact(ctx, req.(*FactConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RemoveFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RemoveFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RemoveFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RemoveFact(ctx, req.(*FactRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RequestChannelLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RequestChannelLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RequestChannelLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RequestChannelLease(ctx, req.(*ChannelLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.UDB",
	HandlerType: (*UDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UDB_RegisterUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _UDB_RemoveUser_Handler,
		},
		{
			MethodName: "RegisterFact",
			Handler:    _UDB_RegisterFact_Handler,
		},
		{
			MethodName: "ConfirmFact",
			Handler:    _UDB_ConfirmFact_Handler,
		},
		{
			MethodName: "RemoveFact",
			Handler:    _UDB_RemoveFact_Handler,
		},
		{
			MethodName: "RequestChannelLease",
			Handler:    _UDB_RequestChannelLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// AuthorizerClient is the client API for Authorizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizerClient interface {
	Authorize(ctx context.Context, in *AuthorizerAuth, opts ...grpc.CallOption) (*messages.Ack, error)
}

type authorizerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizerClient(cc grpc.ClientConnInterface) AuthorizerClient {
	return &authorizerClient{cc}
}

func (c *authorizerClient) Authorize(ctx context.Context, in *AuthorizerAuth, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Authorizer/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizerServer is the server API for Authorizer service.
type AuthorizerServer interface {
	Authorize(context.Context, *AuthorizerAuth) (*messages.Ack, error)
}

// UnimplementedAuthorizerServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizerServer struct {
}

func (*UnimplementedAuthorizerServer) Authorize(ctx context.Context, req *AuthorizerAuth) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}

func RegisterAuthorizerServer(s *grpc.Server, srv AuthorizerServer) {
	s.RegisterService(&_Authorizer_serviceDesc, srv)
}

func _Authorizer_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizerAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Authorizer/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServer).Authorize(ctx, req.(*AuthorizerAuth))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Authorizer",
	HandlerType: (*AuthorizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Authorizer_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
