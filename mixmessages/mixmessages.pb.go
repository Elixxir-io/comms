////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2019 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundBufferSize uint32 `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
}

func (x *RoundBufferInfo) Reset() {
	*x = RoundBufferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundBufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundBufferInfo) ProtoMessage() {}

func (x *RoundBufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundBufferInfo.ProtoReflect.Descriptor instead.
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{0}
}

func (x *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if x != nil {
		return x.RoundBufferSize
	}
	return 0
}

//
type RoundPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Key   []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *RoundPublicKey) Reset() {
	*x = RoundPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPublicKey) ProtoMessage() {}

func (x *RoundPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPublicKey.ProtoReflect.Descriptor instead.
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{1}
}

func (x *RoundPublicKey) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *RoundPublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

//
type RoundMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundMetricJSON string `protobuf:"bytes,1,opt,name=RoundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
}

func (x *RoundMetrics) Reset() {
	*x = RoundMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMetrics) ProtoMessage() {}

func (x *RoundMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMetrics.ProtoReflect.Descriptor instead.
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{2}
}

func (x *RoundMetrics) GetRoundMetricJSON() string {
	if x != nil {
		return x.RoundMetricJSON
	}
	return ""
}

// Contains the complete set of messages/slots for a round
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	Slots     []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *Batch) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *Batch) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// Used as part of header for streaming post phase
type BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize uint32     `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *BatchInfo) Reset() {
	*x = BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfo) ProtoMessage() {}

func (x *BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfo.ProtoReflect.Descriptor instead.
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{4}
}

func (x *BatchInfo) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *BatchInfo) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *BatchInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Used for collecting metrics on a round trip of the system
type RoundTripPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *any.Any   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Round   *RoundInfo `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (x *RoundTripPing) Reset() {
	*x = RoundTripPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundTripPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundTripPing) ProtoMessage() {}

func (x *RoundTripPing) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundTripPing.ProtoReflect.Descriptor instead.
func (*RoundTripPing) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{5}
}

func (x *RoundTripPing) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RoundTripPing) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

// Unified Gateway->Server polling message
type ServerPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full       *NDFHash `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial    *NDFHash `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate uint64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Error      string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
}

func (x *ServerPoll) Reset() {
	*x = ServerPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPoll) ProtoMessage() {}

func (x *ServerPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPoll.ProtoReflect.Descriptor instead.
func (*ServerPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{6}
}

func (x *ServerPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *ServerPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *ServerPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ServerPoll) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Unified Gateway->Server polling response
type ServerPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           []byte       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FullNDF      *NDF         `protobuf:"bytes,2,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`           //Empty if no update needed
	PartialNDF   *NDF         `protobuf:"bytes,3,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`     //Empty if no update needed
	Updates      []*RoundInfo `protobuf:"bytes,4,rep,name=Updates,proto3" json:"Updates,omitempty"`           //Empty if no update needed
	BatchRequest *RoundInfo   `protobuf:"bytes,5,opt,name=BatchRequest,proto3" json:"BatchRequest,omitempty"` //Empty if no update needed
	Slots        []*Slot      `protobuf:"bytes,6,rep,name=slots,proto3" json:"slots,omitempty"`               //Empty if no update needed
}

func (x *ServerPollResponse) Reset() {
	*x = ServerPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPollResponse) ProtoMessage() {}

func (x *ServerPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPollResponse.ProtoReflect.Descriptor instead.
func (*ServerPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{7}
}

func (x *ServerPollResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServerPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *ServerPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *ServerPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ServerPollResponse) GetBatchRequest() *RoundInfo {
	if x != nil {
		return x.BatchRequest
	}
	return nil
}

func (x *ServerPollResponse) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// ClientRequest message for clients to poll new CMIX messages
type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        []byte `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 128 bit length
	LastMessageID string `protobuf:"bytes,2,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{8}
}

func (x *ClientRequest) GetUserID() []byte {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *ClientRequest) GetLastMessageID() string {
	if x != nil {
		return x.LastMessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *IDList) Reset() {
	*x = IDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDList) ProtoMessage() {}

func (x *IDList) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDList.ProtoReflect.Descriptor instead.
func (*IDList) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{9}
}

func (x *IDList) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

// Represents a single encrypted message in a batch
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"` // 256 bit Sender Id
	PayloadA []byte   `protobuf:"bytes,8,opt,name=PayloadA,proto3" json:"PayloadA,omitempty"` // Len(Prime) bit length payload A (contains part of encrypted payload)
	PayloadB []byte   `protobuf:"bytes,9,opt,name=PayloadB,proto3" json:"PayloadB,omitempty"` // Len(Prime) bit length payload B (contains part of encrypted payload, and associated data)
	Salt     []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`        // Salt to identify message key
	KMACs    [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`      // Individual Key MAC for each node in network
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{10}
}

func (x *Slot) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Slot) GetEncryptedPayloadAKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadAKeys
	}
	return nil
}

func (x *Slot) GetEncryptedPayloadBKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadBKeys
	}
	return nil
}

func (x *Slot) GetPartialPayloadACypherText() []byte {
	if x != nil {
		return x.PartialPayloadACypherText
	}
	return nil
}

func (x *Slot) GetPartialPayloadBCypherText() []byte {
	if x != nil {
		return x.PartialPayloadBCypherText
	}
	return nil
}

func (x *Slot) GetPartialRoundPublicCypherKey() []byte {
	if x != nil {
		return x.PartialRoundPublicCypherKey
	}
	return nil
}

func (x *Slot) GetSenderID() []byte {
	if x != nil {
		return x.SenderID
	}
	return nil
}

func (x *Slot) GetPayloadA() []byte {
	if x != nil {
		return x.PayloadA
	}
	return nil
}

func (x *Slot) GetPayloadB() []byte {
	if x != nil {
		return x.PayloadB
	}
	return nil
}

func (x *Slot) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Slot) GetKMACs() [][]byte {
	if x != nil {
		return x.KMACs
	}
	return nil
}

// Unified Client->Gateway polling message
type GatewayPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partial       *NDFHash `protobuf:"bytes,1,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate    uint64   `protobuf:"varint,2,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	LastMessageID string   `protobuf:"bytes,3,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
}

func (x *GatewayPoll) Reset() {
	*x = GatewayPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPoll) ProtoMessage() {}

func (x *GatewayPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPoll.ProtoReflect.Descriptor instead.
func (*GatewayPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *GatewayPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GatewayPoll) GetLastMessageID() string {
	if x != nil {
		return x.LastMessageID
	}
	return ""
}

// Unified Client->Gateway polling response
type GatewayPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialNDF    *NDF         `protobuf:"bytes,1,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`       // Empty if no update needed
	LastRound     *RoundInfo   `protobuf:"bytes,2,opt,name=LastRound,proto3" json:"LastRound,omitempty"`         // Last round the gateway has messages from
	Updates       []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`             // Empty if no update needed
	NewMessageIDs []string     `protobuf:"bytes,4,rep,name=NewMessageIDs,proto3" json:"NewMessageIDs,omitempty"` // Empty if no update needed
}

func (x *GatewayPollResponse) Reset() {
	*x = GatewayPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPollResponse) ProtoMessage() {}

func (x *GatewayPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPollResponse.ProtoReflect.Descriptor instead.
func (*GatewayPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{12}
}

func (x *GatewayPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *GatewayPollResponse) GetLastRound() *RoundInfo {
	if x != nil {
		return x.LastRound
	}
	return nil
}

func (x *GatewayPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *GatewayPollResponse) GetNewMessageIDs() []string {
	if x != nil {
		return x.NewMessageIDs
	}
	return nil
}

//The ndf Hash used to compare ndf on permissioning and client
type NDFHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *NDFHash) Reset() {
	*x = NDFHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDFHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDFHash) ProtoMessage() {}

func (x *NDFHash) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDFHash.ProtoReflect.Descriptor instead.
func (*NDFHash) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{13}
}

func (x *NDFHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// The Network Definition File is defined as a
// JSON structure in primitives/ndf. Can be provided in a
// "complete" and "incomplete" format. An incomplete
// NDF is provided to level 4 (ie clients) to protect the inner levels
type NDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ndf       []byte        `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
	Signature *RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *NDF) Reset() {
	*x = NDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDF) ProtoMessage() {}

func (x *NDF) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDF.ProtoReflect.Descriptor instead.
func (*NDF) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{14}
}

func (x *NDF) GetNdf() []byte {
	if x != nil {
		return x.Ndf
	}
	return nil
}

func (x *NDF) GetSignature() *RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// NodeRegistration contains information to register a node.
// Note: this includes the desired server and gateway addresses.
// The registration server is free to ignore these addresses and
// derive the address from the network connection.
type NodeRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ServerTlsCert    string `protobuf:"bytes,2,opt,name=ServerTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	ServerAddress    string `protobuf:"bytes,3,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	ServerPort       uint32 `protobuf:"varint,4,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"` // Note: there is no uint16
	GatewayTlsCert   string `protobuf:"bytes,5,opt,name=GatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	GatewayAddress   string `protobuf:"bytes,6,opt,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	GatewayPort      uint32 `protobuf:"varint,7,opt,name=GatewayPort,proto3" json:"GatewayPort,omitempty"` // Note: there is no uint16
	RegistrationCode string `protobuf:"bytes,8,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
}

func (x *NodeRegistration) Reset() {
	*x = NodeRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistration) ProtoMessage() {}

func (x *NodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistration.ProtoReflect.Descriptor instead.
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{15}
}

func (x *NodeRegistration) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *NodeRegistration) GetServerTlsCert() string {
	if x != nil {
		return x.ServerTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *NodeRegistration) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *NodeRegistration) GetGatewayTlsCert() string {
	if x != nil {
		return x.GatewayTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *NodeRegistration) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *NodeRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

// RSASignature is a digital signature for the RSA algorithm
type RSASignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     []byte `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *RSASignature) Reset() {
	*x = RSASignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSASignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSASignature) ProtoMessage() {}

func (x *RSASignature) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSASignature.ProtoReflect.Descriptor instead.
func (*RSASignature) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{16}
}

func (x *RSASignature) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *RSASignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// UserRegistration message to initialize registration process
type UserRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationCode string `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	ClientRSAPubKey  string `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
}

func (x *UserRegistration) Reset() {
	*x = UserRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistration) ProtoMessage() {}

func (x *UserRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistration.ProtoReflect.Descriptor instead.
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{17}
}

func (x *UserRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

func (x *UserRegistration) GetClientRSAPubKey() string {
	if x != nil {
		return x.ClientRSAPubKey
	}
	return ""
}

// UserRegistrationConfirmation to confirm registration with users
type UserRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer *RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *UserRegistrationConfirmation) Reset() {
	*x = UserRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationConfirmation) ProtoMessage() {}

func (x *UserRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{18}
}

func (x *UserRegistrationConfirmation) GetClientSignedByServer() *RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *UserRegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ClientVersion contains a version string for the client
type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{19}
}

func (x *ClientVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// NonceRequest message to request nonce from client to server
type NonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                 []byte        `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ClientRSAPubKey      string        `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
	ClientSignedByServer *RSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	ClientDHPubKey       []byte        `protobuf:"bytes,4,opt,name=ClientDHPubKey,proto3" json:"ClientDHPubKey,omitempty"`
	RequestSignature     *RSASignature `protobuf:"bytes,5,opt,name=RequestSignature,proto3" json:"RequestSignature,omitempty"`
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{20}
}

func (x *NonceRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *NonceRequest) GetClientRSAPubKey() string {
	if x != nil {
		return x.ClientRSAPubKey
	}
	return ""
}

func (x *NonceRequest) GetClientSignedByServer() *RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *NonceRequest) GetClientDHPubKey() []byte {
	if x != nil {
		return x.ClientDHPubKey
	}
	return nil
}

func (x *NonceRequest) GetRequestSignature() *RSASignature {
	if x != nil {
		return x.RequestSignature
	}
	return nil
}

// Nonce message to reply to client from server
type Nonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce    []byte `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	DHPubKey []byte `protobuf:"bytes,2,opt,name=DHPubKey,proto3" json:"DHPubKey,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *Nonce) Reset() {
	*x = Nonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nonce) ProtoMessage() {}

func (x *Nonce) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nonce.ProtoReflect.Descriptor instead.
func (*Nonce) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{21}
}

func (x *Nonce) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Nonce) GetDHPubKey() []byte {
	if x != nil {
		return x.DHPubKey
	}
	return nil
}

func (x *Nonce) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// RequestRegistrationConfirmation returning proof of registration
type RequestRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID              []byte        `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	NonceSignedByClient *RSASignature `protobuf:"bytes,2,opt,name=NonceSignedByClient,proto3" json:"NonceSignedByClient,omitempty"`
	Error               string        `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *RequestRegistrationConfirmation) Reset() {
	*x = RequestRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistrationConfirmation) ProtoMessage() {}

func (x *RequestRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*RequestRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{22}
}

func (x *RequestRegistrationConfirmation) GetUserID() []byte {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *RequestRegistrationConfirmation) GetNonceSignedByClient() *RSASignature {
	if x != nil {
		return x.NonceSignedByClient
	}
	return nil
}

func (x *RequestRegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// RegistrationConfirmation returning proof of registration
type RegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSignedByServer *RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *RegistrationConfirmation) Reset() {
	*x = RegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationConfirmation) ProtoMessage() {}

func (x *RegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{23}
}

func (x *RegistrationConfirmation) GetClientSignedByServer() *RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *RegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Unified Server->Permissioning polling message
type PermissioningPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full       *NDFHash    `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial    *NDFHash    `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate uint64      `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Activity   uint32      `protobuf:"varint,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Error      *RoundError `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
}

func (x *PermissioningPoll) Reset() {
	*x = PermissioningPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissioningPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissioningPoll) ProtoMessage() {}

func (x *PermissioningPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissioningPoll.ProtoReflect.Descriptor instead.
func (*PermissioningPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{24}
}

func (x *PermissioningPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *PermissioningPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *PermissioningPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *PermissioningPoll) GetActivity() uint32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *PermissioningPoll) GetError() *RoundError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Unified Server->Permissioning polling response
type PermissionPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullNDF    *NDF         `protobuf:"bytes,1,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`       // Empty if no update needed
	PartialNDF *NDF         `protobuf:"bytes,2,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"` // Empty if no update needed
	Updates    []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`       // Empty if no update needed
}

func (x *PermissionPollResponse) Reset() {
	*x = PermissionPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionPollResponse) ProtoMessage() {}

func (x *PermissionPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionPollResponse.ProtoReflect.Descriptor instead.
func (*PermissionPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{25}
}

func (x *PermissionPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Registration token to be associated with the client
type NotificationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []byte `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *NotificationToken) Reset() {
	*x = NotificationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationToken) ProtoMessage() {}

func (x *NotificationToken) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationToken.ProtoReflect.Descriptor instead.
func (*NotificationToken) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{26}
}

func (x *NotificationToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

// Generic response message providing an error message from remote servers
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{27}
}

func (x *Ack) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Empty message for requesting action from any type of server
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{28}
}

// Wrapper for authenticated messages that also ensure integrity
type AuthenticatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        []byte    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Signature []byte    `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Token     []byte    `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Client    *ClientID `protobuf:"bytes,4,opt,name=Client,proto3" json:"Client,omitempty"`
	Message   *any.Any  `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *AuthenticatedMessage) Reset() {
	*x = AuthenticatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedMessage) ProtoMessage() {}

func (x *AuthenticatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedMessage.ProtoReflect.Descriptor instead.
func (*AuthenticatedMessage) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{29}
}

func (x *AuthenticatedMessage) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *AuthenticatedMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AuthenticatedMessage) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AuthenticatedMessage) GetClient() *ClientID {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *AuthenticatedMessage) GetMessage() *any.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

// Message used for assembly of Client IDs in the system
type ClientID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt      []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
}

func (x *ClientID) Reset() {
	*x = ClientID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientID) ProtoMessage() {}

func (x *ClientID) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientID.ProtoReflect.Descriptor instead.
func (*ClientID) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{30}
}

func (x *ClientID) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ClientID) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// Provides a token to establish reverse identity to any type of client
type AssignToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []byte `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *AssignToken) Reset() {
	*x = AssignToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignToken) ProtoMessage() {}

func (x *AssignToken) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignToken.ProtoReflect.Descriptor instead.
func (*AssignToken) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{31}
}

func (x *AssignToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

// Describes a round
type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateID   uint64        `protobuf:"varint,2,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	State      uint32        `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"` // Precomp, Standby, Realtime, Completed, Failed
	BatchSize  uint32        `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Topology   []string      `protobuf:"bytes,5,rep,name=Topology,proto3" json:"Topology,omitempty"`             // List of NodeIDs
	Timestamps []uint64      `protobuf:"varint,6,rep,packed,name=Timestamps,proto3" json:"Timestamps,omitempty"` // List of state timestamps in UTC
	Errors     []*RoundError `protobuf:"bytes,7,rep,name=Errors,proto3" json:"Errors,omitempty"`                 // List of errors which occured
	Signature  *RSASignature `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{32}
}

func (x *RoundInfo) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RoundInfo) GetUpdateID() uint64 {
	if x != nil {
		return x.UpdateID
	}
	return 0
}

func (x *RoundInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RoundInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *RoundInfo) GetTopology() []string {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *RoundInfo) GetTimestamps() []uint64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RoundInfo) GetErrors() []*RoundError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RoundInfo) GetSignature() *RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// RoundError will be used to describe a round error
// Passed along to gateways (level 2) and clients (level 3)
type RoundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string        `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Signature *RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"` // Hash of Info and Error
}

func (x *RoundError) Reset() {
	*x = RoundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundError) ProtoMessage() {}

func (x *RoundError) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundError.ProtoReflect.Descriptor instead.
func (*RoundError) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{33}
}

func (x *RoundError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RoundError) GetSignature() *RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_mixmessages_proto protoreflect.FileDescriptor

var file_mixmessages_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x0c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x7c, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44,
	0x46, 0x52, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46,
	0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0xc4,
	0x03, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a,
	0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x43, 0x79, 0x70, 0x68,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x43, 0x79, 0x70,
	0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43, 0x79, 0x70, 0x68, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43, 0x79, 0x70, 0x68, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x79, 0x70, 0x68, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x79,
	0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4b, 0x4d, 0x41, 0x43, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x4b, 0x4d, 0x41, 0x43, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0xd5, 0x01, 0x0a, 0x13,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44,
	0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x50, 0x0a, 0x03, 0x4e, 0x44, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x64, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4e, 0x64, 0x66, 0x12, 0x37, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x68, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x4d, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53,
	0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x4f, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x13,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x13, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x7f, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xd8, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x16,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x44,
	0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x1b, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x06,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3c, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0x23, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5b, 0x0a, 0x0a, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xe7, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x11, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a,
	0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c,
	0x50, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x57, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x21,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x69, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x32, 0x81, 0x04, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x0d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14,
	0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c,
	0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x8d, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a,
	0x1a, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x64, 0x66, 0x12, 0x21, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xb9, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x74, 0x12, 0x53, 0x0a, 0x1a, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x32, 0x94, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x11,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mixmessages_proto_rawDescOnce sync.Once
	file_mixmessages_proto_rawDescData = file_mixmessages_proto_rawDesc
)

func file_mixmessages_proto_rawDescGZIP() []byte {
	file_mixmessages_proto_rawDescOnce.Do(func() {
		file_mixmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_mixmessages_proto_rawDescData)
	})
	return file_mixmessages_proto_rawDescData
}

var file_mixmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_mixmessages_proto_goTypes = []interface{}{
	(*RoundBufferInfo)(nil),                 // 0: mixmessages.RoundBufferInfo
	(*RoundPublicKey)(nil),                  // 1: mixmessages.RoundPublicKey
	(*RoundMetrics)(nil),                    // 2: mixmessages.RoundMetrics
	(*Batch)(nil),                           // 3: mixmessages.Batch
	(*BatchInfo)(nil),                       // 4: mixmessages.BatchInfo
	(*RoundTripPing)(nil),                   // 5: mixmessages.RoundTripPing
	(*ServerPoll)(nil),                      // 6: mixmessages.ServerPoll
	(*ServerPollResponse)(nil),              // 7: mixmessages.ServerPollResponse
	(*ClientRequest)(nil),                   // 8: mixmessages.ClientRequest
	(*IDList)(nil),                          // 9: mixmessages.IDList
	(*Slot)(nil),                            // 10: mixmessages.Slot
	(*GatewayPoll)(nil),                     // 11: mixmessages.GatewayPoll
	(*GatewayPollResponse)(nil),             // 12: mixmessages.GatewayPollResponse
	(*NDFHash)(nil),                         // 13: mixmessages.NDFHash
	(*NDF)(nil),                             // 14: mixmessages.NDF
	(*NodeRegistration)(nil),                // 15: mixmessages.NodeRegistration
	(*RSASignature)(nil),                    // 16: mixmessages.RSASignature
	(*UserRegistration)(nil),                // 17: mixmessages.UserRegistration
	(*UserRegistrationConfirmation)(nil),    // 18: mixmessages.UserRegistrationConfirmation
	(*ClientVersion)(nil),                   // 19: mixmessages.ClientVersion
	(*NonceRequest)(nil),                    // 20: mixmessages.NonceRequest
	(*Nonce)(nil),                           // 21: mixmessages.Nonce
	(*RequestRegistrationConfirmation)(nil), // 22: mixmessages.RequestRegistrationConfirmation
	(*RegistrationConfirmation)(nil),        // 23: mixmessages.RegistrationConfirmation
	(*PermissioningPoll)(nil),               // 24: mixmessages.PermissioningPoll
	(*PermissionPollResponse)(nil),          // 25: mixmessages.PermissionPollResponse
	(*NotificationToken)(nil),               // 26: mixmessages.NotificationToken
	(*Ack)(nil),                             // 27: mixmessages.Ack
	(*Ping)(nil),                            // 28: mixmessages.Ping
	(*AuthenticatedMessage)(nil),            // 29: mixmessages.AuthenticatedMessage
	(*ClientID)(nil),                        // 30: mixmessages.ClientID
	(*AssignToken)(nil),                     // 31: mixmessages.AssignToken
	(*RoundInfo)(nil),                       // 32: mixmessages.RoundInfo
	(*RoundError)(nil),                      // 33: mixmessages.RoundError
	(*any.Any)(nil),                         // 34: google.protobuf.Any
}
var file_mixmessages_proto_depIdxs = []int32{
	32, // 0: mixmessages.RoundPublicKey.Round:type_name -> mixmessages.RoundInfo
	32, // 1: mixmessages.Batch.Round:type_name -> mixmessages.RoundInfo
	10, // 2: mixmessages.Batch.slots:type_name -> mixmessages.Slot
	32, // 3: mixmessages.BatchInfo.Round:type_name -> mixmessages.RoundInfo
	34, // 4: mixmessages.RoundTripPing.Payload:type_name -> google.protobuf.Any
	32, // 5: mixmessages.RoundTripPing.Round:type_name -> mixmessages.RoundInfo
	13, // 6: mixmessages.ServerPoll.Full:type_name -> mixmessages.NDFHash
	13, // 7: mixmessages.ServerPoll.Partial:type_name -> mixmessages.NDFHash
	14, // 8: mixmessages.ServerPollResponse.FullNDF:type_name -> mixmessages.NDF
	14, // 9: mixmessages.ServerPollResponse.PartialNDF:type_name -> mixmessages.NDF
	32, // 10: mixmessages.ServerPollResponse.Updates:type_name -> mixmessages.RoundInfo
	32, // 11: mixmessages.ServerPollResponse.BatchRequest:type_name -> mixmessages.RoundInfo
	10, // 12: mixmessages.ServerPollResponse.slots:type_name -> mixmessages.Slot
	13, // 13: mixmessages.GatewayPoll.Partial:type_name -> mixmessages.NDFHash
	14, // 14: mixmessages.GatewayPollResponse.PartialNDF:type_name -> mixmessages.NDF
	32, // 15: mixmessages.GatewayPollResponse.LastRound:type_name -> mixmessages.RoundInfo
	32, // 16: mixmessages.GatewayPollResponse.Updates:type_name -> mixmessages.RoundInfo
	16, // 17: mixmessages.NDF.Signature:type_name -> mixmessages.RSASignature
	16, // 18: mixmessages.UserRegistrationConfirmation.ClientSignedByServer:type_name -> mixmessages.RSASignature
	16, // 19: mixmessages.NonceRequest.ClientSignedByServer:type_name -> mixmessages.RSASignature
	16, // 20: mixmessages.NonceRequest.RequestSignature:type_name -> mixmessages.RSASignature
	16, // 21: mixmessages.RequestRegistrationConfirmation.NonceSignedByClient:type_name -> mixmessages.RSASignature
	16, // 22: mixmessages.RegistrationConfirmation.ClientSignedByServer:type_name -> mixmessages.RSASignature
	13, // 23: mixmessages.PermissioningPoll.Full:type_name -> mixmessages.NDFHash
	13, // 24: mixmessages.PermissioningPoll.Partial:type_name -> mixmessages.NDFHash
	33, // 25: mixmessages.PermissioningPoll.Error:type_name -> mixmessages.RoundError
	14, // 26: mixmessages.PermissionPollResponse.FullNDF:type_name -> mixmessages.NDF
	14, // 27: mixmessages.PermissionPollResponse.PartialNDF:type_name -> mixmessages.NDF
	32, // 28: mixmessages.PermissionPollResponse.Updates:type_name -> mixmessages.RoundInfo
	30, // 29: mixmessages.AuthenticatedMessage.Client:type_name -> mixmessages.ClientID
	34, // 30: mixmessages.AuthenticatedMessage.Message:type_name -> google.protobuf.Any
	33, // 31: mixmessages.RoundInfo.Errors:type_name -> mixmessages.RoundError
	16, // 32: mixmessages.RoundInfo.Signature:type_name -> mixmessages.RSASignature
	16, // 33: mixmessages.RoundError.Signature:type_name -> mixmessages.RSASignature
	28, // 34: mixmessages.Node.AskOnline:input_type -> mixmessages.Ping
	29, // 35: mixmessages.Node.CreateNewRound:input_type -> mixmessages.AuthenticatedMessage
	29, // 36: mixmessages.Node.PostNewBatch:input_type -> mixmessages.AuthenticatedMessage
	29, // 37: mixmessages.Node.FinishRealtime:input_type -> mixmessages.AuthenticatedMessage
	29, // 38: mixmessages.Node.PostPhase:input_type -> mixmessages.AuthenticatedMessage
	10, // 39: mixmessages.Node.StreamPostPhase:input_type -> mixmessages.Slot
	29, // 40: mixmessages.Node.GetRoundBufferInfo:input_type -> mixmessages.AuthenticatedMessage
	29, // 41: mixmessages.Node.RequestNonce:input_type -> mixmessages.AuthenticatedMessage
	29, // 42: mixmessages.Node.ConfirmRegistration:input_type -> mixmessages.AuthenticatedMessage
	29, // 43: mixmessages.Node.PostRoundPublicKey:input_type -> mixmessages.AuthenticatedMessage
	29, // 44: mixmessages.Node.PostPrecompResult:input_type -> mixmessages.AuthenticatedMessage
	29, // 45: mixmessages.Node.GetCompletedBatch:input_type -> mixmessages.AuthenticatedMessage
	29, // 46: mixmessages.Node.GetMeasure:input_type -> mixmessages.AuthenticatedMessage
	29, // 47: mixmessages.Node.Poll:input_type -> mixmessages.AuthenticatedMessage
	29, // 48: mixmessages.Node.SendRoundTripPing:input_type -> mixmessages.AuthenticatedMessage
	8,  // 49: mixmessages.Gateway.CheckMessages:input_type -> mixmessages.ClientRequest
	8,  // 50: mixmessages.Gateway.GetMessage:input_type -> mixmessages.ClientRequest
	10, // 51: mixmessages.Gateway.PutMessage:input_type -> mixmessages.Slot
	20, // 52: mixmessages.Gateway.RequestNonce:input_type -> mixmessages.NonceRequest
	22, // 53: mixmessages.Gateway.ConfirmNonce:input_type -> mixmessages.RequestRegistrationConfirmation
	29, // 54: mixmessages.Gateway.PollForNotifications:input_type -> mixmessages.AuthenticatedMessage
	11, // 55: mixmessages.Gateway.Poll:input_type -> mixmessages.GatewayPoll
	17, // 56: mixmessages.Registration.RegisterUser:input_type -> mixmessages.UserRegistration
	28, // 57: mixmessages.Registration.GetCurrentClientVersion:input_type -> mixmessages.Ping
	15, // 58: mixmessages.Registration.RegisterNode:input_type -> mixmessages.NodeRegistration
	29, // 59: mixmessages.Registration.PollNdf:input_type -> mixmessages.AuthenticatedMessage
	29, // 60: mixmessages.Registration.Poll:input_type -> mixmessages.AuthenticatedMessage
	29, // 61: mixmessages.NotificationBot.UnregisterForNotifications:input_type -> mixmessages.AuthenticatedMessage
	29, // 62: mixmessages.NotificationBot.RegisterForNotifications:input_type -> mixmessages.AuthenticatedMessage
	29, // 63: mixmessages.Generic.AuthenticateToken:input_type -> mixmessages.AuthenticatedMessage
	28, // 64: mixmessages.Generic.RequestToken:input_type -> mixmessages.Ping
	27, // 65: mixmessages.Node.AskOnline:output_type -> mixmessages.Ack
	27, // 66: mixmessages.Node.CreateNewRound:output_type -> mixmessages.Ack
	27, // 67: mixmessages.Node.PostNewBatch:output_type -> mixmessages.Ack
	27, // 68: mixmessages.Node.FinishRealtime:output_type -> mixmessages.Ack
	27, // 69: mixmessages.Node.PostPhase:output_type -> mixmessages.Ack
	27, // 70: mixmessages.Node.StreamPostPhase:output_type -> mixmessages.Ack
	0,  // 71: mixmessages.Node.GetRoundBufferInfo:output_type -> mixmessages.RoundBufferInfo
	21, // 72: mixmessages.Node.RequestNonce:output_type -> mixmessages.Nonce
	23, // 73: mixmessages.Node.ConfirmRegistration:output_type -> mixmessages.RegistrationConfirmation
	27, // 74: mixmessages.Node.PostRoundPublicKey:output_type -> mixmessages.Ack
	27, // 75: mixmessages.Node.PostPrecompResult:output_type -> mixmessages.Ack
	3,  // 76: mixmessages.Node.GetCompletedBatch:output_type -> mixmessages.Batch
	2,  // 77: mixmessages.Node.GetMeasure:output_type -> mixmessages.RoundMetrics
	7,  // 78: mixmessages.Node.Poll:output_type -> mixmessages.ServerPollResponse
	27, // 79: mixmessages.Node.SendRoundTripPing:output_type -> mixmessages.Ack
	9,  // 80: mixmessages.Gateway.CheckMessages:output_type -> mixmessages.IDList
	10, // 81: mixmessages.Gateway.GetMessage:output_type -> mixmessages.Slot
	27, // 82: mixmessages.Gateway.PutMessage:output_type -> mixmessages.Ack
	21, // 83: mixmessages.Gateway.RequestNonce:output_type -> mixmessages.Nonce
	23, // 84: mixmessages.Gateway.ConfirmNonce:output_type -> mixmessages.RegistrationConfirmation
	9,  // 85: mixmessages.Gateway.PollForNotifications:output_type -> mixmessages.IDList
	12, // 86: mixmessages.Gateway.Poll:output_type -> mixmessages.GatewayPollResponse
	18, // 87: mixmessages.Registration.RegisterUser:output_type -> mixmessages.UserRegistrationConfirmation
	19, // 88: mixmessages.Registration.GetCurrentClientVersion:output_type -> mixmessages.ClientVersion
	27, // 89: mixmessages.Registration.RegisterNode:output_type -> mixmessages.Ack
	14, // 90: mixmessages.Registration.PollNdf:output_type -> mixmessages.NDF
	25, // 91: mixmessages.Registration.Poll:output_type -> mixmessages.PermissionPollResponse
	27, // 92: mixmessages.NotificationBot.UnregisterForNotifications:output_type -> mixmessages.Ack
	27, // 93: mixmessages.NotificationBot.RegisterForNotifications:output_type -> mixmessages.Ack
	27, // 94: mixmessages.Generic.AuthenticateToken:output_type -> mixmessages.Ack
	31, // 95: mixmessages.Generic.RequestToken:output_type -> mixmessages.AssignToken
	65, // [65:96] is the sub-list for method output_type
	34, // [34:65] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_mixmessages_proto_init() }
func file_mixmessages_proto_init() {
	if File_mixmessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mixmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundBufferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundTripPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDFHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSASignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissioningPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mixmessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_mixmessages_proto_goTypes,
		DependencyIndexes: file_mixmessages_proto_depIdxs,
		MessageInfos:      file_mixmessages_proto_msgTypes,
	}.Build()
	File_mixmessages_proto = out.File
	file_mixmessages_proto_rawDesc = nil
	file_mixmessages_proto_goTypes = nil
	file_mixmessages_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Batch, error)
	//
	GetMeasure(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error)
	// Round trip ping comm
	SendRoundTripPing(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostNewBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostNewBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FinishRealtime(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/FinishRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPhase(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/mixmessages.Node/StreamPostPhase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPostPhaseClient{stream}
	return x, nil
}

type Node_StreamPostPhaseClient interface {
	Send(*Slot) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type nodeStreamPostPhaseClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPostPhaseClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestNonce(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmRegistration(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostRoundPublicKey(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostRoundPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPrecompResult(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPrecompResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCompletedBatch(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetCompletedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMeasure(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error) {
	out := new(RoundMetrics)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error) {
	out := new(ServerPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendRoundTripPing(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SendRoundTripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(context.Context, *AuthenticatedMessage) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(context.Context, *AuthenticatedMessage) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(Node_StreamPostPhaseServer) error
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *AuthenticatedMessage) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *AuthenticatedMessage) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *AuthenticatedMessage) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(context.Context, *AuthenticatedMessage) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(context.Context, *AuthenticatedMessage) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(context.Context, *AuthenticatedMessage) (*Batch, error)
	//
	GetMeasure(context.Context, *AuthenticatedMessage) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(context.Context, *AuthenticatedMessage) (*ServerPollResponse, error)
	// Round trip ping comm
	SendRoundTripPing(context.Context, *AuthenticatedMessage) (*Ack, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AskOnline(context.Context, *Ping) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskOnline not implemented")
}
func (*UnimplementedNodeServer) CreateNewRound(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRound not implemented")
}
func (*UnimplementedNodeServer) PostNewBatch(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewBatch not implemented")
}
func (*UnimplementedNodeServer) FinishRealtime(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRealtime not implemented")
}
func (*UnimplementedNodeServer) PostPhase(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPhase not implemented")
}
func (*UnimplementedNodeServer) StreamPostPhase(Node_StreamPostPhaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostPhase not implemented")
}
func (*UnimplementedNodeServer) GetRoundBufferInfo(context.Context, *AuthenticatedMessage) (*RoundBufferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBufferInfo not implemented")
}
func (*UnimplementedNodeServer) RequestNonce(context.Context, *AuthenticatedMessage) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedNodeServer) ConfirmRegistration(context.Context, *AuthenticatedMessage) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegistration not implemented")
}
func (*UnimplementedNodeServer) PostRoundPublicKey(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRoundPublicKey not implemented")
}
func (*UnimplementedNodeServer) PostPrecompResult(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrecompResult not implemented")
}
func (*UnimplementedNodeServer) GetCompletedBatch(context.Context, *AuthenticatedMessage) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedBatch not implemented")
}
func (*UnimplementedNodeServer) GetMeasure(context.Context, *AuthenticatedMessage) (*RoundMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (*UnimplementedNodeServer) Poll(context.Context, *AuthenticatedMessage) (*ServerPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedNodeServer) SendRoundTripPing(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoundTripPing not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostNewBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostNewBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostNewBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostNewBatch(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FinishRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FinishRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/FinishRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FinishRealtime(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPhase(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPostPhase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPostPhase(&nodeStreamPostPhaseServer{stream})
}

type Node_StreamPostPhaseServer interface {
	SendAndClose(*Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeStreamPostPhaseServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPostPhaseServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestNonce(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmRegistration(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostRoundPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostRoundPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostRoundPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostRoundPublicKey(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPrecompResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPrecompResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPrecompResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPrecompResult(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCompletedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCompletedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetCompletedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCompletedBatch(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMeasure(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Poll(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendRoundTripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendRoundTripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SendRoundTripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendRoundTripPing(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "PostNewBatch",
			Handler:    _Node_PostNewBatch_Handler,
		},
		{
			MethodName: "FinishRealtime",
			Handler:    _Node_FinishRealtime_Handler,
		},
		{
			MethodName: "PostPhase",
			Handler:    _Node_PostPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Node_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _Node_ConfirmRegistration_Handler,
		},
		{
			MethodName: "PostRoundPublicKey",
			Handler:    _Node_PostRoundPublicKey_Handler,
		},
		{
			MethodName: "PostPrecompResult",
			Handler:    _Node_PostPrecompResult_Handler,
		},
		{
			MethodName: "GetCompletedBatch",
			Handler:    _Node_GetCompletedBatch_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Node_GetMeasure_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Node_Poll_Handler,
		},
		{
			MethodName: "SendRoundTripPing",
			Handler:    _Node_SendRoundTripPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPostPhase",
			Handler:       _Node_StreamPostPhase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// Notifications->Gateway request for users with pending notifications
	PollForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*IDList, error)
	// Client -> Gateway unified polling
	Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error) {
	out := new(Slot)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PollForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PollForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error) {
	out := new(GatewayPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientRequest) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(context.Context, *ClientRequest) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *Slot) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *RequestRegistrationConfirmation) (*RegistrationConfirmation, error)
	// Notifications->Gateway request for users with pending notifications
	PollForNotifications(context.Context, *AuthenticatedMessage) (*IDList, error)
	// Client -> Gateway unified polling
	Poll(context.Context, *GatewayPoll) (*GatewayPollResponse, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) CheckMessages(context.Context, *ClientRequest) (*IDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMessages not implemented")
}
func (*UnimplementedGatewayServer) GetMessage(context.Context, *ClientRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedGatewayServer) PutMessage(context.Context, *Slot) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedGatewayServer) RequestNonce(context.Context, *NonceRequest) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedGatewayServer) ConfirmNonce(context.Context, *RequestRegistrationConfirmation) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNonce not implemented")
}
func (*UnimplementedGatewayServer) PollForNotifications(context.Context, *AuthenticatedMessage) (*IDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForNotifications not implemented")
}
func (*UnimplementedGatewayServer) Poll(context.Context, *GatewayPoll) (*GatewayPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CheckMessages(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistrationConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ConfirmNonce(ctx, req.(*RequestRegistrationConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PollForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PollForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PollForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PollForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Poll(ctx, req.(*GatewayPoll))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _Gateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Gateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Gateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _Gateway_ConfirmNonce_Handler,
		},
		{
			MethodName: "PollForNotifications",
			Handler:    _Gateway_PollForNotifications_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Gateway_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client uses this to register its user with the system
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
	// Client uses this to check if the version needs to be updated
	GetCurrentClientVersion(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*ClientVersion, error)
	// Node registration for the permissioning server
	RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetCurrentClientVersion(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*ClientVersion, error) {
	out := new(ClientVersion)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/GetCurrentClientVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) PollNdf(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/PollNdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) Poll(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error) {
	out := new(PermissionPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client uses this to register its user with the system
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
	// Client uses this to check if the version needs to be updated
	GetCurrentClientVersion(context.Context, *Ping) (*ClientVersion, error)
	// Node registration for the permissioning server
	RegisterNode(context.Context, *NodeRegistration) (*Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(context.Context, *AuthenticatedMessage) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(context.Context, *AuthenticatedMessage) (*PermissionPollResponse, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedRegistrationServer) GetCurrentClientVersion(context.Context, *Ping) (*ClientVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentClientVersion not implemented")
}
func (*UnimplementedRegistrationServer) RegisterNode(context.Context, *NodeRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedRegistrationServer) PollNdf(context.Context, *AuthenticatedMessage) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollNdf not implemented")
}
func (*UnimplementedRegistrationServer) Poll(context.Context, *AuthenticatedMessage) (*PermissionPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetCurrentClientVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetCurrentClientVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/GetCurrentClientVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetCurrentClientVersion(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterNode(ctx, req.(*NodeRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_PollNdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).PollNdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/PollNdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).PollNdf(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Poll(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
		{
			MethodName: "GetCurrentClientVersion",
			Handler:    _Registration_GetCurrentClientVersion_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Registration_RegisterNode_Handler,
		},
		{
			MethodName: "PollNdf",
			Handler:    _Registration_PollNdf_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Registration_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// NotificationBotClient is the client API for NotificationBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationBotClient interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
}

type notificationBotClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationBotClient(cc grpc.ClientConnInterface) NotificationBotClient {
	return &notificationBotClient{cc}
}

func (c *notificationBotClient) UnregisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/UnregisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) RegisterForNotifications(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/RegisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationBotServer is the server API for NotificationBot service.
type NotificationBotServer interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error)
}

// UnimplementedNotificationBotServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationBotServer struct {
}

func (*UnimplementedNotificationBotServer) UnregisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) RegisterForNotifications(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterForNotifications not implemented")
}

func RegisterNotificationBotServer(s *grpc.Server, srv NotificationBotServer) {
	s.RegisterService(&_NotificationBot_serviceDesc, srv)
}

func _NotificationBot_UnregisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/UnregisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_RegisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/RegisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.NotificationBot",
	HandlerType: (*NotificationBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnregisterForNotifications",
			Handler:    _NotificationBot_UnregisterForNotifications_Handler,
		},
		{
			MethodName: "RegisterForNotifications",
			Handler:    _NotificationBot_RegisterForNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// GenericClient is the client API for Generic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenericClient interface {
	// Authenticate a token with the server
	AuthenticateToken(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error)
	// Request a token from the server
	RequestToken(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*AssignToken, error)
}

type genericClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericClient(cc grpc.ClientConnInterface) GenericClient {
	return &genericClient{cc}
}

func (c *genericClient) AuthenticateToken(ctx context.Context, in *AuthenticatedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Generic/AuthenticateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) RequestToken(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*AssignToken, error) {
	out := new(AssignToken)
	err := c.cc.Invoke(ctx, "/mixmessages.Generic/RequestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericServer is the server API for Generic service.
type GenericServer interface {
	// Authenticate a token with the server
	AuthenticateToken(context.Context, *AuthenticatedMessage) (*Ack, error)
	// Request a token from the server
	RequestToken(context.Context, *Ping) (*AssignToken, error)
}

// UnimplementedGenericServer can be embedded to have forward compatible implementations.
type UnimplementedGenericServer struct {
}

func (*UnimplementedGenericServer) AuthenticateToken(context.Context, *AuthenticatedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateToken not implemented")
}
func (*UnimplementedGenericServer) RequestToken(context.Context, *Ping) (*AssignToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}

func RegisterGenericServer(s *grpc.Server, srv GenericServer) {
	s.RegisterService(&_Generic_serviceDesc, srv)
}

func _Generic_AuthenticateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).AuthenticateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Generic/AuthenticateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).AuthenticateToken(ctx, req.(*AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Generic/RequestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).RequestToken(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Generic",
	HandlerType: (*GenericServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateToken",
			Handler:    _Generic_AuthenticateToken_Handler,
		},
		{
			MethodName: "RequestToken",
			Handler:    _Generic_RequestToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
