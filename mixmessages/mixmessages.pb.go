////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2019 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.6
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	messages "gitlab.com/xx_network/comms/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundBufferSize uint32 `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
}

func (x *RoundBufferInfo) Reset() {
	*x = RoundBufferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundBufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundBufferInfo) ProtoMessage() {}

func (x *RoundBufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundBufferInfo.ProtoReflect.Descriptor instead.
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{0}
}

func (x *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if x != nil {
		return x.RoundBufferSize
	}
	return 0
}

//
type RoundPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Key   []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *RoundPublicKey) Reset() {
	*x = RoundPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPublicKey) ProtoMessage() {}

func (x *RoundPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPublicKey.ProtoReflect.Descriptor instead.
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{1}
}

func (x *RoundPublicKey) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *RoundPublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

//
type RoundMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundMetricJSON string `protobuf:"bytes,1,opt,name=RoundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
}

func (x *RoundMetrics) Reset() {
	*x = RoundMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMetrics) ProtoMessage() {}

func (x *RoundMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMetrics.ProtoReflect.Descriptor instead.
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{2}
}

func (x *RoundMetrics) GetRoundMetricJSON() string {
	if x != nil {
		return x.RoundMetricJSON
	}
	return ""
}

// Contains the complete set of messages/slots for a round
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	Slots     []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *Batch) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *Batch) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CompletedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID uint64  `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Slots   []*Slot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *CompletedBatch) Reset() {
	*x = CompletedBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletedBatch) ProtoMessage() {}

func (x *CompletedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletedBatch.ProtoReflect.Descriptor instead.
func (*CompletedBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CompletedBatch) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *CompletedBatch) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// Used as part of header for streaming slots
type BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize uint32     `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *BatchInfo) Reset() {
	*x = BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfo) ProtoMessage() {}

func (x *BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfo.ProtoReflect.Descriptor instead.
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{5}
}

func (x *BatchInfo) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *BatchInfo) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *BatchInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Used for collecting metrics on a round trip of the system
type RoundTripPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *any.Any   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Round   *RoundInfo `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (x *RoundTripPing) Reset() {
	*x = RoundTripPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundTripPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundTripPing) ProtoMessage() {}

func (x *RoundTripPing) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundTripPing.ProtoReflect.Descriptor instead.
func (*RoundTripPing) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{6}
}

func (x *RoundTripPing) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RoundTripPing) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

// Unified Gateway->Server polling message
type ServerPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full           *NDFHash `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial        *NDFHash `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate     uint64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Error          string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
	GatewayVersion string   `protobuf:"bytes,5,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	GatewayAddress string   `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
}

func (x *ServerPoll) Reset() {
	*x = ServerPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPoll) ProtoMessage() {}

func (x *ServerPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPoll.ProtoReflect.Descriptor instead.
func (*ServerPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{7}
}

func (x *ServerPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *ServerPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *ServerPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ServerPoll) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ServerPoll) GetGatewayVersion() string {
	if x != nil {
		return x.GatewayVersion
	}
	return ""
}

func (x *ServerPoll) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

// Unified Gateway->Server polling response
type ServerPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           []byte       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FullNDF      *NDF         `protobuf:"bytes,2,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`           //Empty if no update needed
	PartialNDF   *NDF         `protobuf:"bytes,3,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`     //Empty if no update needed
	Updates      []*RoundInfo `protobuf:"bytes,4,rep,name=Updates,proto3" json:"Updates,omitempty"`           //Empty if no update needed
	BatchRequest *RoundInfo   `protobuf:"bytes,5,opt,name=BatchRequest,proto3" json:"BatchRequest,omitempty"` //Empty if no update needed
	Batch        *BatchReady  `protobuf:"bytes,6,opt,name=Batch,proto3" json:"Batch,omitempty"`
}

func (x *ServerPollResponse) Reset() {
	*x = ServerPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPollResponse) ProtoMessage() {}

func (x *ServerPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPollResponse.ProtoReflect.Descriptor instead.
func (*ServerPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{8}
}

func (x *ServerPollResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServerPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *ServerPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *ServerPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ServerPollResponse) GetBatchRequest() *RoundInfo {
	if x != nil {
		return x.BatchRequest
	}
	return nil
}

func (x *ServerPollResponse) GetBatch() *BatchReady {
	if x != nil {
		return x.Batch
	}
	return nil
}

type BatchReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId uint64 `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
}

func (x *BatchReady) Reset() {
	*x = BatchReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReady) ProtoMessage() {}

func (x *BatchReady) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReady.ProtoReflect.Descriptor instead.
func (*BatchReady) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{9}
}

func (x *BatchReady) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

// Used as part of Share phase for generation
// of a multi-party Diffie-Helman key
// Node <-> Node message
type SharePiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Piece        []byte                 `protobuf:"bytes,1,opt,name=Piece,proto3" json:"Piece,omitempty"`               // In progress round public key
	Participants [][]byte               `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"` // List of nodes who have participated
	RoundID      uint64                 `protobuf:"varint,3,opt,name=roundID,proto3" json:"roundID,omitempty"`          // Id of round tied to round key generation
	Signature    *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`       // Signature tied to message sent by node
}

func (x *SharePiece) Reset() {
	*x = SharePiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePiece) ProtoMessage() {}

func (x *SharePiece) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePiece.ProtoReflect.Descriptor instead.
func (*SharePiece) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{10}
}

func (x *SharePiece) GetPiece() []byte {
	if x != nil {
		return x.Piece
	}
	return nil
}

func (x *SharePiece) GetParticipants() [][]byte {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *SharePiece) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *SharePiece) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Client -> Gateway request for information about historical rounds
type HistoricalRounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []uint64 `protobuf:"varint,1,rep,packed,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *HistoricalRounds) Reset() {
	*x = HistoricalRounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRounds) ProtoMessage() {}

func (x *HistoricalRounds) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRounds.ProtoReflect.Descriptor instead.
func (*HistoricalRounds) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{11}
}

func (x *HistoricalRounds) GetRounds() []uint64 {
	if x != nil {
		return x.Rounds
	}
	return nil
}

// Gateway's response to client's request for previous (historical) rounds
type HistoricalRoundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []*RoundInfo `protobuf:"bytes,1,rep,name=Rounds,proto3" json:"Rounds,omitempty"`
}

func (x *HistoricalRoundsResponse) Reset() {
	*x = HistoricalRoundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRoundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRoundsResponse) ProtoMessage() {}

func (x *HistoricalRoundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRoundsResponse.ProtoReflect.Descriptor instead.
func (*HistoricalRoundsResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{12}
}

func (x *HistoricalRoundsResponse) GetRounds() []*RoundInfo {
	if x != nil {
		return x.Rounds
	}
	return nil
}

// Client -> Gateway request for available messages
// The query will be a request for all messages
// available in a round.
type GetMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID []byte `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	RoundID  uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target   []byte `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *GetMessages) Reset() {
	*x = GetMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessages) ProtoMessage() {}

func (x *GetMessages) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessages.ProtoReflect.Descriptor instead.
func (*GetMessages) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{13}
}

func (x *GetMessages) GetClientID() []byte {
	if x != nil {
		return x.ClientID
	}
	return nil
}

func (x *GetMessages) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GetMessages) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// Gateway response to a GetMessages request
type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Slot `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	HasRound bool    `protobuf:"varint,2,opt,name=HasRound,proto3" json:"HasRound,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{14}
}

func (x *GetMessagesResponse) GetMessages() []*Slot {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetMessagesResponse) GetHasRound() bool {
	if x != nil {
		return x.HasRound
	}
	return false
}

// Gateway -> Gateway message sharing within a team
type RoundMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId  uint64  `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	Messages []*Slot `protobuf:"bytes,2,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *RoundMessages) Reset() {
	*x = RoundMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMessages) ProtoMessage() {}

func (x *RoundMessages) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMessages.ProtoReflect.Descriptor instead.
func (*RoundMessages) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{15}
}

func (x *RoundMessages) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundMessages) GetMessages() []*Slot {
	if x != nil {
		return x.Messages
	}
	return nil
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *IDList) Reset() {
	*x = IDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDList) ProtoMessage() {}

func (x *IDList) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDList.ProtoReflect.Descriptor instead.
func (*IDList) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{16}
}

func (x *IDList) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

// Represents a single encrypted message in a batch
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"` // 256 bit Sender Id
	PayloadA []byte   `protobuf:"bytes,8,opt,name=PayloadA,proto3" json:"PayloadA,omitempty"` // Len(Prime) bit length payload A (contains part of encrypted payload)
	PayloadB []byte   `protobuf:"bytes,9,opt,name=PayloadB,proto3" json:"PayloadB,omitempty"` // Len(Prime) bit length payload B (contains part of encrypted payload, and associated data)
	Salt     []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`        // Salt to identify message key
	KMACs    [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`      // Individual Key MAC for each node in network
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{17}
}

func (x *Slot) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Slot) GetEncryptedPayloadAKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadAKeys
	}
	return nil
}

func (x *Slot) GetEncryptedPayloadBKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadBKeys
	}
	return nil
}

func (x *Slot) GetPartialPayloadACypherText() []byte {
	if x != nil {
		return x.PartialPayloadACypherText
	}
	return nil
}

func (x *Slot) GetPartialPayloadBCypherText() []byte {
	if x != nil {
		return x.PartialPayloadBCypherText
	}
	return nil
}

func (x *Slot) GetPartialRoundPublicCypherKey() []byte {
	if x != nil {
		return x.PartialRoundPublicCypherKey
	}
	return nil
}

func (x *Slot) GetSenderID() []byte {
	if x != nil {
		return x.SenderID
	}
	return nil
}

func (x *Slot) GetPayloadA() []byte {
	if x != nil {
		return x.PayloadA
	}
	return nil
}

func (x *Slot) GetPayloadB() []byte {
	if x != nil {
		return x.PayloadB
	}
	return nil
}

func (x *Slot) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Slot) GetKMACs() [][]byte {
	if x != nil {
		return x.KMACs
	}
	return nil
}

// Unified Client->Gateway polling message
type GatewayPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partial     *NDFHash `protobuf:"bytes,1,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate  uint64   `protobuf:"varint,2,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	ReceptionID []byte   `protobuf:"bytes,3,opt,name=ReceptionID,proto3" json:"ReceptionID,omitempty"`
	// Define range for ClientBloomFilter searches
	StartTimestamp int64  `protobuf:"varint,4,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	EndTimestamp   int64  `protobuf:"varint,5,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	ClientVersion  []byte `protobuf:"bytes,6,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	// Determines whether client gets filtered network
	// updates or all updates.
	// If true, filtered updates relevant to client (FAILED, COMPLETED, QUEUED)
	// If false, all updates from the network
	FastPolling bool `protobuf:"varint,7,opt,name=FastPolling,proto3" json:"FastPolling,omitempty"`
}

func (x *GatewayPoll) Reset() {
	*x = GatewayPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPoll) ProtoMessage() {}

func (x *GatewayPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPoll.ProtoReflect.Descriptor instead.
func (*GatewayPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{18}
}

func (x *GatewayPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *GatewayPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GatewayPoll) GetReceptionID() []byte {
	if x != nil {
		return x.ReceptionID
	}
	return nil
}

func (x *GatewayPoll) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *GatewayPoll) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *GatewayPoll) GetClientVersion() []byte {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *GatewayPoll) GetFastPolling() bool {
	if x != nil {
		return x.FastPolling
	}
	return false
}

// Unified Client->Gateway polling response
type GatewayPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialNDF    *NDF          `protobuf:"bytes,1,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`        // Empty if no update needed
	Updates       []*RoundInfo  `protobuf:"bytes,2,rep,name=Updates,proto3" json:"Updates,omitempty"`              // Empty if no update needed
	KnownRounds   []byte        `protobuf:"bytes,3,opt,name=KnownRounds,proto3" json:"KnownRounds,omitempty"`      // Rounds gateway knows about
	Filters       *ClientBlooms `protobuf:"bytes,4,opt,name=Filters,proto3" json:"Filters,omitempty"`              // Set of ClientBloomFilters requested by Client
	EarliestRound uint64        `protobuf:"varint,5,opt,name=EarliestRound,proto3" json:"EarliestRound,omitempty"` // The earliest round the gateway still has info for
}

func (x *GatewayPollResponse) Reset() {
	*x = GatewayPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPollResponse) ProtoMessage() {}

func (x *GatewayPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPollResponse.ProtoReflect.Descriptor instead.
func (*GatewayPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{19}
}

func (x *GatewayPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *GatewayPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *GatewayPollResponse) GetKnownRounds() []byte {
	if x != nil {
		return x.KnownRounds
	}
	return nil
}

func (x *GatewayPollResponse) GetFilters() *ClientBlooms {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GatewayPollResponse) GetEarliestRound() uint64 {
	if x != nil {
		return x.EarliestRound
	}
	return 0
}

// Holds a set of ClientBloom and their associated metadata
type ClientBlooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period         int64          `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	FirstTimestamp int64          `protobuf:"varint,2,opt,name=FirstTimestamp,proto3" json:"FirstTimestamp,omitempty"` // Earliest timestamp of the included BloomFilters
	Filters        []*ClientBloom `protobuf:"bytes,3,rep,name=Filters,proto3" json:"Filters,omitempty"`
}

func (x *ClientBlooms) Reset() {
	*x = ClientBlooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBlooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBlooms) ProtoMessage() {}

func (x *ClientBlooms) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBlooms.ProtoReflect.Descriptor instead.
func (*ClientBlooms) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{20}
}

func (x *ClientBlooms) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ClientBlooms) GetFirstTimestamp() int64 {
	if x != nil {
		return x.FirstTimestamp
	}
	return 0
}

func (x *ClientBlooms) GetFilters() []*ClientBloom {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Hold a ClientBloomFilter and its associated metadata
type ClientBloom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     []byte `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	FirstRound uint64 `protobuf:"varint,2,opt,name=FirstRound,proto3" json:"FirstRound,omitempty"`
	RoundRange uint32 `protobuf:"varint,3,opt,name=RoundRange,proto3" json:"RoundRange,omitempty"`
}

func (x *ClientBloom) Reset() {
	*x = ClientBloom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBloom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBloom) ProtoMessage() {}

func (x *ClientBloom) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBloom.ProtoReflect.Descriptor instead.
func (*ClientBloom) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{21}
}

func (x *ClientBloom) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ClientBloom) GetFirstRound() uint64 {
	if x != nil {
		return x.FirstRound
	}
	return 0
}

func (x *ClientBloom) GetRoundRange() uint32 {
	if x != nil {
		return x.RoundRange
	}
	return 0
}

// Client -> Gateway authentication message
type GatewaySlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*GatewaySlot `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	// Below should have same values as all elements in slice (this is assumed)
	RoundID uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target  []byte `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *GatewaySlots) Reset() {
	*x = GatewaySlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlots) ProtoMessage() {}

func (x *GatewaySlots) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlots.ProtoReflect.Descriptor instead.
func (*GatewaySlots) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{22}
}

func (x *GatewaySlots) GetMessages() []*GatewaySlot {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GatewaySlots) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GatewaySlots) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// Client -> Gateway authentication message
type GatewaySlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Slot  `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	RoundID uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	MAC     []byte `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	Target  []byte `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *GatewaySlot) Reset() {
	*x = GatewaySlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlot) ProtoMessage() {}

func (x *GatewaySlot) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlot.ProtoReflect.Descriptor instead.
func (*GatewaySlot) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{23}
}

func (x *GatewaySlot) GetMessage() *Slot {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GatewaySlot) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GatewaySlot) GetMAC() []byte {
	if x != nil {
		return x.MAC
	}
	return nil
}

func (x *GatewaySlot) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// Gateway -> Client authentication response
type GatewaySlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	RoundID  uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
}

func (x *GatewaySlotResponse) Reset() {
	*x = GatewaySlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlotResponse) ProtoMessage() {}

func (x *GatewaySlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlotResponse.ProtoReflect.Descriptor instead.
func (*GatewaySlotResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{24}
}

func (x *GatewaySlotResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *GatewaySlotResponse) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

// Gateway -> Gateway gossip of all Sender IDs in a Batch
type BatchSenders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderIds [][]byte `protobuf:"bytes,1,rep,name=SenderIds,proto3" json:"SenderIds,omitempty"`
	RoundID   uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
}

func (x *BatchSenders) Reset() {
	*x = BatchSenders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSenders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSenders) ProtoMessage() {}

func (x *BatchSenders) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSenders.ProtoReflect.Descriptor instead.
func (*BatchSenders) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{25}
}

func (x *BatchSenders) GetSenderIds() [][]byte {
	if x != nil {
		return x.SenderIds
	}
	return nil
}

func (x *BatchSenders) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

// Gateway -> Gateway gossip of all recipient IDs in a Batch
type Recipients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientIds [][]byte `protobuf:"bytes,1,rep,name=RecipientIds,proto3" json:"RecipientIds,omitempty"`
	RoundID      uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	RoundTS      uint64   `protobuf:"varint,3,opt,name=RoundTS,proto3" json:"RoundTS,omitempty"`
}

func (x *Recipients) Reset() {
	*x = Recipients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipients) ProtoMessage() {}

func (x *Recipients) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipients.ProtoReflect.Descriptor instead.
func (*Recipients) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{26}
}

func (x *Recipients) GetRecipientIds() [][]byte {
	if x != nil {
		return x.RecipientIds
	}
	return nil
}

func (x *Recipients) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *Recipients) GetRoundTS() uint64 {
	if x != nil {
		return x.RoundTS
	}
	return 0
}

// Server -> Permissioning message for whether a node has been registered
type RegisteredNodeConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRegistered bool `protobuf:"varint,1,opt,name=IsRegistered,proto3" json:"IsRegistered,omitempty"`
}

func (x *RegisteredNodeConfirmation) Reset() {
	*x = RegisteredNodeConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredNodeConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredNodeConfirmation) ProtoMessage() {}

func (x *RegisteredNodeConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredNodeConfirmation.ProtoReflect.Descriptor instead.
func (*RegisteredNodeConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{27}
}

func (x *RegisteredNodeConfirmation) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

type RegisteredNodeCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RegisteredNodeCheck) Reset() {
	*x = RegisteredNodeCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredNodeCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredNodeCheck) ProtoMessage() {}

func (x *RegisteredNodeCheck) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredNodeCheck.ProtoReflect.Descriptor instead.
func (*RegisteredNodeCheck) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{28}
}

func (x *RegisteredNodeCheck) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

//The ndf Hash used to compare ndf on permissioning and client
type NDFHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *NDFHash) Reset() {
	*x = NDFHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDFHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDFHash) ProtoMessage() {}

func (x *NDFHash) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDFHash.ProtoReflect.Descriptor instead.
func (*NDFHash) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{29}
}

func (x *NDFHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// The Network Definition File is defined as a
// JSON structure in primitives/ndf. Can be provided in a
// "complete" and "incomplete" format. An incomplete
// NDF is provided to level 4 (ie clients) to protect the inner levels
type NDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ndf       []byte                 `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
	Signature *messages.RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *NDF) Reset() {
	*x = NDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDF) ProtoMessage() {}

func (x *NDF) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDF.ProtoReflect.Descriptor instead.
func (*NDF) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{30}
}

func (x *NDF) GetNdf() []byte {
	if x != nil {
		return x.Ndf
	}
	return nil
}

func (x *NDF) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// NodeRegistration contains information to register a node.
// Note: this includes the desired server and gateway addresses.
// The registration server is free to ignore these addresses and
// derive the address from the network connection.
type NodeRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt             []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ServerTlsCert    string `protobuf:"bytes,2,opt,name=ServerTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	ServerAddress    string `protobuf:"bytes,3,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	ServerPort       uint32 `protobuf:"varint,4,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"` // Note: there is no uint16
	GatewayTlsCert   string `protobuf:"bytes,5,opt,name=GatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	GatewayAddress   string `protobuf:"bytes,6,opt,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	GatewayPort      uint32 `protobuf:"varint,7,opt,name=GatewayPort,proto3" json:"GatewayPort,omitempty"` // Note: there is no uint16
	RegistrationCode string `protobuf:"bytes,8,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
}

func (x *NodeRegistration) Reset() {
	*x = NodeRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistration) ProtoMessage() {}

func (x *NodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistration.ProtoReflect.Descriptor instead.
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{31}
}

func (x *NodeRegistration) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *NodeRegistration) GetServerTlsCert() string {
	if x != nil {
		return x.ServerTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *NodeRegistration) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *NodeRegistration) GetGatewayTlsCert() string {
	if x != nil {
		return x.GatewayTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *NodeRegistration) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *NodeRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

// UserRegistration message to initialize registration process
// Client -> ClientRegistrar
type UserRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationCode         string `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	ClientRSAPubKey          string `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
	ClientReceptionRSAPubKey string `protobuf:"bytes,3,opt,name=ClientReceptionRSAPubKey,proto3" json:"ClientReceptionRSAPubKey,omitempty"`
}

func (x *UserRegistration) Reset() {
	*x = UserRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistration) ProtoMessage() {}

func (x *UserRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistration.ProtoReflect.Descriptor instead.
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{32}
}

func (x *UserRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

func (x *UserRegistration) GetClientRSAPubKey() string {
	if x != nil {
		return x.ClientRSAPubKey
	}
	return ""
}

func (x *UserRegistration) GetClientReceptionRSAPubKey() string {
	if x != nil {
		return x.ClientReceptionRSAPubKey
	}
	return ""
}

// UserRegistrationConfirmation to confirm registration with users
// ClientRegistrar -> Client (Response to UserRegistration)
type UserRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer          *messages.RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	ClientReceptionSignedByServer *messages.RSASignature `protobuf:"bytes,2,opt,name=ClientReceptionSignedByServer,proto3" json:"ClientReceptionSignedByServer,omitempty"`
	Timestamp                     int64                  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Error                         string                 `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *UserRegistrationConfirmation) Reset() {
	*x = UserRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationConfirmation) ProtoMessage() {}

func (x *UserRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{33}
}

func (x *UserRegistrationConfirmation) GetClientSignedByServer() *messages.RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *UserRegistrationConfirmation) GetClientReceptionSignedByServer() *messages.RSASignature {
	if x != nil {
		return x.ClientReceptionSignedByServer
	}
	return nil
}

func (x *UserRegistrationConfirmation) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UserRegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ClientVersion contains a version string for the client
type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{34}
}

func (x *ClientVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// NonceRequest message to request nonce from client to server
type NonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                 []byte                 `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ClientRSAPubKey      string                 `protobuf:"bytes,2,opt,name=ClientRSAPubKey,proto3" json:"ClientRSAPubKey,omitempty"`
	ClientSignedByServer *messages.RSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	TimeStamp            int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	ClientDHPubKey       []byte                 `protobuf:"bytes,5,opt,name=ClientDHPubKey,proto3" json:"ClientDHPubKey,omitempty"`
	RequestSignature     *messages.RSASignature `protobuf:"bytes,6,opt,name=RequestSignature,proto3" json:"RequestSignature,omitempty"`
	Target               []byte                 `protobuf:"bytes,7,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{35}
}

func (x *NonceRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *NonceRequest) GetClientRSAPubKey() string {
	if x != nil {
		return x.ClientRSAPubKey
	}
	return ""
}

func (x *NonceRequest) GetClientSignedByServer() *messages.RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *NonceRequest) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *NonceRequest) GetClientDHPubKey() []byte {
	if x != nil {
		return x.ClientDHPubKey
	}
	return nil
}

func (x *NonceRequest) GetRequestSignature() *messages.RSASignature {
	if x != nil {
		return x.RequestSignature
	}
	return nil
}

func (x *NonceRequest) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// Nonce message to reply to client from server (going through gateway)
type Nonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce    []byte `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	DHPubKey []byte `protobuf:"bytes,2,opt,name=DHPubKey,proto3" json:"DHPubKey,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *Nonce) Reset() {
	*x = Nonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nonce) ProtoMessage() {}

func (x *Nonce) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nonce.ProtoReflect.Descriptor instead.
func (*Nonce) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{36}
}

func (x *Nonce) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Nonce) GetDHPubKey() []byte {
	if x != nil {
		return x.DHPubKey
	}
	return nil
}

func (x *Nonce) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// RequestRegistrationConfirmation returning proof of registration
type RequestRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID              []byte                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	NonceSignedByClient *messages.RSASignature `protobuf:"bytes,2,opt,name=NonceSignedByClient,proto3" json:"NonceSignedByClient,omitempty"`
	Error               string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Target              []byte                 `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *RequestRegistrationConfirmation) Reset() {
	*x = RequestRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistrationConfirmation) ProtoMessage() {}

func (x *RequestRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*RequestRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{37}
}

func (x *RequestRegistrationConfirmation) GetUserID() []byte {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *RequestRegistrationConfirmation) GetNonceSignedByClient() *messages.RSASignature {
	if x != nil {
		return x.NonceSignedByClient
	}
	return nil
}

func (x *RequestRegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RequestRegistrationConfirmation) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// RegistrationConfirmation returning proof of registration
type RegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSignedByServer *messages.RSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	ClientGatewayKey     []byte                 `protobuf:"bytes,2,opt,name=ClientGatewayKey,proto3" json:"ClientGatewayKey,omitempty"`
	Error                string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *RegistrationConfirmation) Reset() {
	*x = RegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationConfirmation) ProtoMessage() {}

func (x *RegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{38}
}

func (x *RegistrationConfirmation) GetClientSignedByServer() *messages.RSASignature {
	if x != nil {
		return x.ClientSignedByServer
	}
	return nil
}

func (x *RegistrationConfirmation) GetClientGatewayKey() []byte {
	if x != nil {
		return x.ClientGatewayKey
	}
	return nil
}

func (x *RegistrationConfirmation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Unified Server->Permissioning polling message
type PermissioningPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full           *NDFHash       `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial        *NDFHash       `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate     uint64         `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Activity       uint32         `protobuf:"varint,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Error          *RoundError    `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
	GatewayAddress string         `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
	GatewayVersion string         `protobuf:"bytes,7,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	ServerAddress  string         `protobuf:"bytes,8,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	ServerVersion  string         `protobuf:"bytes,9,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	ClientErrors   []*ClientError `protobuf:"bytes,10,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"` // Client error information
}

func (x *PermissioningPoll) Reset() {
	*x = PermissioningPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissioningPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissioningPoll) ProtoMessage() {}

func (x *PermissioningPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissioningPoll.ProtoReflect.Descriptor instead.
func (*PermissioningPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{39}
}

func (x *PermissioningPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *PermissioningPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *PermissioningPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *PermissioningPoll) GetActivity() uint32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *PermissioningPoll) GetError() *RoundError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PermissioningPoll) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *PermissioningPoll) GetGatewayVersion() string {
	if x != nil {
		return x.GatewayVersion
	}
	return ""
}

func (x *PermissioningPoll) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *PermissioningPoll) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *PermissioningPoll) GetClientErrors() []*ClientError {
	if x != nil {
		return x.ClientErrors
	}
	return nil
}

// Info containing error among a client
// Passed server -> Permissioning via the poll comm
type ClientError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId []byte `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Source   []byte `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"` // ID of the node that created it
}

func (x *ClientError) Reset() {
	*x = ClientError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientError) ProtoMessage() {}

func (x *ClientError) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientError.ProtoReflect.Descriptor instead.
func (*ClientError) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{40}
}

func (x *ClientError) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *ClientError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ClientError) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

// Unified Server->Permissioning polling response
type PermissionPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullNDF    *NDF         `protobuf:"bytes,1,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`       // Empty if no update needed
	PartialNDF *NDF         `protobuf:"bytes,2,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"` // Empty if no update needed
	Updates    []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`       // Empty if no update needed
}

func (x *PermissionPollResponse) Reset() {
	*x = PermissionPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionPollResponse) ProtoMessage() {}

func (x *PermissionPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionPollResponse.ProtoReflect.Descriptor instead.
func (*PermissionPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{41}
}

func (x *PermissionPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Registration token to be associated with the client
type NotificationRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                 string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IntermediaryId        []byte `protobuf:"bytes,2,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	TransmissionRsa       []byte `protobuf:"bytes,3,opt,name=TransmissionRsa,proto3" json:"TransmissionRsa,omitempty"`
	TransmissionSalt      []byte `protobuf:"bytes,4,opt,name=TransmissionSalt,proto3" json:"TransmissionSalt,omitempty"`
	TransmissionRsaSig    []byte `protobuf:"bytes,5,opt,name=TransmissionRsaSig,proto3" json:"TransmissionRsaSig,omitempty"`
	IIDTransmissionRsaSig []byte `protobuf:"bytes,6,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
	// Timestamp in which user registered with the network (ie permissioning)
	RegistrationTimestamp int64 `protobuf:"varint,7,opt,name=RegistrationTimestamp,proto3" json:"RegistrationTimestamp,omitempty"`
}

func (x *NotificationRegisterRequest) Reset() {
	*x = NotificationRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRegisterRequest) ProtoMessage() {}

func (x *NotificationRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRegisterRequest.ProtoReflect.Descriptor instead.
func (*NotificationRegisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{42}
}

func (x *NotificationRegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NotificationRegisterRequest) GetIntermediaryId() []byte {
	if x != nil {
		return x.IntermediaryId
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionRsa() []byte {
	if x != nil {
		return x.TransmissionRsa
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionSalt() []byte {
	if x != nil {
		return x.TransmissionSalt
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionRsaSig() []byte {
	if x != nil {
		return x.TransmissionRsaSig
	}
	return nil
}

func (x *NotificationRegisterRequest) GetIIDTransmissionRsaSig() []byte {
	if x != nil {
		return x.IIDTransmissionRsaSig
	}
	return nil
}

func (x *NotificationRegisterRequest) GetRegistrationTimestamp() int64 {
	if x != nil {
		return x.RegistrationTimestamp
	}
	return 0
}

type NotificationUnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntermediaryId        []byte `protobuf:"bytes,1,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	IIDTransmissionRsaSig []byte `protobuf:"bytes,2,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
}

func (x *NotificationUnregisterRequest) Reset() {
	*x = NotificationUnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationUnregisterRequest) ProtoMessage() {}

func (x *NotificationUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationUnregisterRequest.ProtoReflect.Descriptor instead.
func (*NotificationUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{43}
}

func (x *NotificationUnregisterRequest) GetIntermediaryId() []byte {
	if x != nil {
		return x.IntermediaryId
	}
	return nil
}

func (x *NotificationUnregisterRequest) GetIIDTransmissionRsaSig() []byte {
	if x != nil {
		return x.IIDTransmissionRsaSig
	}
	return nil
}

// The list of user IDS for notification polling
type UserIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs [][]byte `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *UserIdList) Reset() {
	*x = UserIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdList) ProtoMessage() {}

func (x *UserIdList) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdList.ProtoReflect.Descriptor instead.
func (*UserIdList) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{44}
}

func (x *UserIdList) GetIDs() [][]byte {
	if x != nil {
		return x.IDs
	}
	return nil
}

// Notification data transmitted to the notification bot from gateway
type NotificationBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID       uint64              `protobuf:"varint,1,opt,name=roundID,proto3" json:"roundID,omitempty"`
	Notifications []*NotificationData `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *NotificationBatch) Reset() {
	*x = NotificationBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationBatch) ProtoMessage() {}

func (x *NotificationBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationBatch.ProtoReflect.Descriptor instead.
func (*NotificationBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{45}
}

func (x *NotificationBatch) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *NotificationBatch) GetNotifications() []*NotificationData {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// Data for a single notification
type NotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EphemeralID int64  `protobuf:"varint,1,opt,name=ephemeralID,proto3" json:"ephemeralID,omitempty"`
	IdentityFP  []byte `protobuf:"bytes,2,opt,name=identityFP,proto3" json:"identityFP,omitempty"`
	MessageHash []byte `protobuf:"bytes,3,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
}

func (x *NotificationData) Reset() {
	*x = NotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationData) ProtoMessage() {}

func (x *NotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationData.ProtoReflect.Descriptor instead.
func (*NotificationData) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{46}
}

func (x *NotificationData) GetEphemeralID() int64 {
	if x != nil {
		return x.EphemeralID
	}
	return 0
}

func (x *NotificationData) GetIdentityFP() []byte {
	if x != nil {
		return x.IdentityFP
	}
	return nil
}

func (x *NotificationData) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

// Holds information for a UDB user registration request
type UDBUserRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissioningSignature []byte               `protobuf:"bytes,1,opt,name=PermissioningSignature,proto3" json:"PermissioningSignature,omitempty"`
	RSAPublicPem           string               `protobuf:"bytes,2,opt,name=RSAPublicPem,proto3" json:"RSAPublicPem,omitempty"`
	Timestamp              int64                `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	IdentityRegistration   *Identity            `protobuf:"bytes,4,opt,name=IdentityRegistration,proto3" json:"IdentityRegistration,omitempty"`
	IdentitySignature      []byte               `protobuf:"bytes,5,opt,name=IdentitySignature,proto3" json:"IdentitySignature,omitempty"` // (RSAPublicSign(Data.Digest()))
	Frs                    *FactRegisterRequest `protobuf:"bytes,6,opt,name=frs,proto3" json:"frs,omitempty"`
	UID                    []byte               `protobuf:"bytes,7,opt,name=UID,proto3" json:"UID,omitempty"`
}

func (x *UDBUserRegistration) Reset() {
	*x = UDBUserRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDBUserRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDBUserRegistration) ProtoMessage() {}

func (x *UDBUserRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDBUserRegistration.ProtoReflect.Descriptor instead.
func (*UDBUserRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{47}
}

func (x *UDBUserRegistration) GetPermissioningSignature() []byte {
	if x != nil {
		return x.PermissioningSignature
	}
	return nil
}

func (x *UDBUserRegistration) GetRSAPublicPem() string {
	if x != nil {
		return x.RSAPublicPem
	}
	return ""
}

func (x *UDBUserRegistration) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UDBUserRegistration) GetIdentityRegistration() *Identity {
	if x != nil {
		return x.IdentityRegistration
	}
	return nil
}

func (x *UDBUserRegistration) GetIdentitySignature() []byte {
	if x != nil {
		return x.IdentitySignature
	}
	return nil
}

func (x *UDBUserRegistration) GetFrs() *FactRegisterRequest {
	if x != nil {
		return x.Frs
	}
	return nil
}

func (x *UDBUserRegistration) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

// Identity describes a user and their cryptographic info
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	DhPubKey []byte `protobuf:"bytes,2,opt,name=dhPubKey,proto3" json:"dhPubKey,omitempty"`
	Salt     []byte `protobuf:"bytes,3,opt,name=Salt,proto3" json:"Salt,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{48}
}

func (x *Identity) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Identity) GetDhPubKey() []byte {
	if x != nil {
		return x.DhPubKey
	}
	return nil
}

func (x *Identity) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

// Holds information for a Fact registration request
type FactRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID     []byte `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Fact    *Fact  `protobuf:"bytes,2,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactSig []byte `protobuf:"bytes,3,opt,name=FactSig,proto3" json:"FactSig,omitempty"` // (RSAPublicSign(Fact.Digest()))
}

func (x *FactRegisterRequest) Reset() {
	*x = FactRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRegisterRequest) ProtoMessage() {}

func (x *FactRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRegisterRequest.ProtoReflect.Descriptor instead.
func (*FactRegisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{49}
}

func (x *FactRegisterRequest) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

func (x *FactRegisterRequest) GetFact() *Fact {
	if x != nil {
		return x.Fact
	}
	return nil
}

func (x *FactRegisterRequest) GetFactSig() []byte {
	if x != nil {
		return x.FactSig
	}
	return nil
}

// Fact describes a Fact, namely what it is and what type it is
type Fact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fact     string `protobuf:"bytes,1,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactType uint32 `protobuf:"varint,2,opt,name=FactType,proto3" json:"FactType,omitempty"`
}

func (x *Fact) Reset() {
	*x = Fact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fact) ProtoMessage() {}

func (x *Fact) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fact.ProtoReflect.Descriptor instead.
func (*Fact) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{50}
}

func (x *Fact) GetFact() string {
	if x != nil {
		return x.Fact
	}
	return ""
}

func (x *Fact) GetFactType() uint32 {
	if x != nil {
		return x.FactType
	}
	return 0
}

// FactRegisterResponse describes UDB's handling of a FactRegisterRequest request
type FactRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationID string `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
}

func (x *FactRegisterResponse) Reset() {
	*x = FactRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRegisterResponse) ProtoMessage() {}

func (x *FactRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRegisterResponse.ProtoReflect.Descriptor instead.
func (*FactRegisterResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{51}
}

func (x *FactRegisterResponse) GetConfirmationID() string {
	if x != nil {
		return x.ConfirmationID
	}
	return ""
}

// Holds information for a Fact confirmation request
type FactConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationID string `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
	Code           string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *FactConfirmRequest) Reset() {
	*x = FactConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactConfirmRequest) ProtoMessage() {}

func (x *FactConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactConfirmRequest.ProtoReflect.Descriptor instead.
func (*FactConfirmRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{52}
}

func (x *FactConfirmRequest) GetConfirmationID() string {
	if x != nil {
		return x.ConfirmationID
	}
	return ""
}

func (x *FactConfirmRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Holds information for a Fact removal request
type FactRemovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID         []byte `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	RemovalData *Fact  `protobuf:"bytes,2,opt,name=RemovalData,proto3" json:"RemovalData,omitempty"`
}

func (x *FactRemovalRequest) Reset() {
	*x = FactRemovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRemovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRemovalRequest) ProtoMessage() {}

func (x *FactRemovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRemovalRequest.ProtoReflect.Descriptor instead.
func (*FactRemovalRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{53}
}

func (x *FactRemovalRequest) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

func (x *FactRemovalRequest) GetRemovalData() *Fact {
	if x != nil {
		return x.RemovalData
	}
	return nil
}

// For sending permission address Server -> Gateway
type StrAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *StrAddress) Reset() {
	*x = StrAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrAddress) ProtoMessage() {}

func (x *StrAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrAddress.ProtoReflect.Descriptor instead.
func (*StrAddress) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{54}
}

func (x *StrAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Describes a round
type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateID                   uint64                 `protobuf:"varint,2,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	State                      uint32                 `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"` // Precomp, Standby, Realtime, Completed, Failed
	BatchSize                  uint32                 `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Topology                   [][]byte               `protobuf:"bytes,5,rep,name=Topology,proto3" json:"Topology,omitempty"`             // List of NodeIDs
	Timestamps                 []uint64               `protobuf:"varint,6,rep,packed,name=Timestamps,proto3" json:"Timestamps,omitempty"` // List of state timestamps in UTC
	Errors                     []*RoundError          `protobuf:"bytes,7,rep,name=Errors,proto3" json:"Errors,omitempty"`                 // List of round errors which occurred
	ClientErrors               []*ClientError         `protobuf:"bytes,8,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"`
	ResourceQueueTimeoutMillis uint32                 `protobuf:"varint,9,opt,name=ResourceQueueTimeoutMillis,proto3" json:"ResourceQueueTimeoutMillis,omitempty"` // Timeout for resource queue on nodes
	Signature                  *messages.RSASignature `protobuf:"bytes,10,opt,name=Signature,proto3" json:"Signature,omitempty"`
	AddressSpaceSize           uint32                 `protobuf:"varint,11,opt,name=AddressSpaceSize,proto3" json:"AddressSpaceSize,omitempty"`
	EccSignature               *messages.ECCSignature `protobuf:"bytes,12,opt,name=EccSignature,proto3" json:"EccSignature,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{55}
}

func (x *RoundInfo) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RoundInfo) GetUpdateID() uint64 {
	if x != nil {
		return x.UpdateID
	}
	return 0
}

func (x *RoundInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RoundInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *RoundInfo) GetTopology() [][]byte {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *RoundInfo) GetTimestamps() []uint64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RoundInfo) GetErrors() []*RoundError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RoundInfo) GetClientErrors() []*ClientError {
	if x != nil {
		return x.ClientErrors
	}
	return nil
}

func (x *RoundInfo) GetResourceQueueTimeoutMillis() uint32 {
	if x != nil {
		return x.ResourceQueueTimeoutMillis
	}
	return 0
}

func (x *RoundInfo) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RoundInfo) GetAddressSpaceSize() uint32 {
	if x != nil {
		return x.AddressSpaceSize
	}
	return 0
}

func (x *RoundInfo) GetEccSignature() *messages.ECCSignature {
	if x != nil {
		return x.EccSignature
	}
	return nil
}

// RoundError will be used to describe a round error
// Passed along to gateways (level 2) and clients (level 3)
type RoundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	NodeId    []byte                 `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Error     string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Signature *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *RoundError) Reset() {
	*x = RoundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundError) ProtoMessage() {}

func (x *RoundError) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundError.ProtoReflect.Descriptor instead.
func (*RoundError) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{56}
}

func (x *RoundError) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundError) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *RoundError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RoundError) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AuthorizerAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID    []byte `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Salt      []byte `protobuf:"bytes,2,opt,name=Salt,proto3" json:"Salt,omitempty"`
	PubkeyPem []byte `protobuf:"bytes,3,opt,name=PubkeyPem,proto3" json:"PubkeyPem,omitempty"`
	TimeStamp int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuthorizerAuth) Reset() {
	*x = AuthorizerAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerAuth) ProtoMessage() {}

func (x *AuthorizerAuth) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerAuth.ProtoReflect.Descriptor instead.
func (*AuthorizerAuth) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{57}
}

func (x *AuthorizerAuth) GetNodeID() []byte {
	if x != nil {
		return x.NodeID
	}
	return nil
}

func (x *AuthorizerAuth) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *AuthorizerAuth) GetPubkeyPem() []byte {
	if x != nil {
		return x.PubkeyPem
	}
	return nil
}

func (x *AuthorizerAuth) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AuthorizerAuth) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_mixmessages_proto protoreflect.FileDescriptor

var file_mixmessages_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x33, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a,
	0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22,
	0x38, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x7c, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x09,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44,
	0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x44, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x07, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e,
	0x44, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x05, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x26, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x34,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x22, 0x4a, 0x0a, 0x18, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x0d, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44,
	0x73, 0x22, 0xc4, 0x03, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x43,
	0x79, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x43, 0x79, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43, 0x79, 0x70,
	0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43, 0x79,
	0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x79,
	0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x79, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x4d, 0x41, 0x43, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x05, 0x4b, 0x4d, 0x41, 0x43, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x46, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xf6,
	0x01, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x44, 0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x6f, 0x6d, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7e, 0x0a, 0x0b, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x4d, 0x41, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x22, 0x64, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x53, 0x22, 0x40, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x1d, 0x0a, 0x07, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4d,
	0x0a, 0x03, 0x4e, 0x44, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x64, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x4e, 0x64, 0x66, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb0, 0x02,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6c, 0x73,
	0x43, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x53,
	0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x53,
	0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xba, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x4a, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4f,
	0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xb1, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x13, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x13, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb2,
	0x03, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2e,
	0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44,
	0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x44, 0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x07, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44,
	0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x49,
	0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73,
	0x61, 0x53, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x49, 0x49, 0x44, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x49, 0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x49, 0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x22, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x72, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x10, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x50, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x50,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x55, 0x44, 0x42, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x03, 0x66, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x66, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x55, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x68, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64,
	0x68, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x46,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x61,
	0x63, 0x74, 0x53, 0x69, 0x67, 0x22, 0x36, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a,
	0x14, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x50, 0x0a,
	0x12, 0x46, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x5b, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x03, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x45, 0x63, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x45, 0x43, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x45,
	0x63, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0a,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xa7, 0x0a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22,
	0x00, 0x32, 0x8b, 0x05, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x4a, 0x0a,
	0x0a, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x75, 0x74,
	0x4d, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x32,
	0x6d, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xb4,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x64, 0x66, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x44, 0x46, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x90, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x18, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x32, 0x9a, 0x02, 0x0a, 0x03, 0x55, 0x44, 0x42,
	0x12, 0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x46, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x32, 0x47, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x0d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x42, 0x26,
	0x5a, 0x24, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x69,
	0x78, 0x78, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mixmessages_proto_rawDescOnce sync.Once
	file_mixmessages_proto_rawDescData = file_mixmessages_proto_rawDesc
)

func file_mixmessages_proto_rawDescGZIP() []byte {
	file_mixmessages_proto_rawDescOnce.Do(func() {
		file_mixmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_mixmessages_proto_rawDescData)
	})
	return file_mixmessages_proto_rawDescData
}

var file_mixmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_mixmessages_proto_goTypes = []interface{}{
	(*RoundBufferInfo)(nil),                 // 0: mixmessages.RoundBufferInfo
	(*RoundPublicKey)(nil),                  // 1: mixmessages.RoundPublicKey
	(*RoundMetrics)(nil),                    // 2: mixmessages.RoundMetrics
	(*Batch)(nil),                           // 3: mixmessages.Batch
	(*CompletedBatch)(nil),                  // 4: mixmessages.CompletedBatch
	(*BatchInfo)(nil),                       // 5: mixmessages.BatchInfo
	(*RoundTripPing)(nil),                   // 6: mixmessages.RoundTripPing
	(*ServerPoll)(nil),                      // 7: mixmessages.ServerPoll
	(*ServerPollResponse)(nil),              // 8: mixmessages.ServerPollResponse
	(*BatchReady)(nil),                      // 9: mixmessages.BatchReady
	(*SharePiece)(nil),                      // 10: mixmessages.SharePiece
	(*HistoricalRounds)(nil),                // 11: mixmessages.HistoricalRounds
	(*HistoricalRoundsResponse)(nil),        // 12: mixmessages.HistoricalRoundsResponse
	(*GetMessages)(nil),                     // 13: mixmessages.GetMessages
	(*GetMessagesResponse)(nil),             // 14: mixmessages.GetMessagesResponse
	(*RoundMessages)(nil),                   // 15: mixmessages.RoundMessages
	(*IDList)(nil),                          // 16: mixmessages.IDList
	(*Slot)(nil),                            // 17: mixmessages.Slot
	(*GatewayPoll)(nil),                     // 18: mixmessages.GatewayPoll
	(*GatewayPollResponse)(nil),             // 19: mixmessages.GatewayPollResponse
	(*ClientBlooms)(nil),                    // 20: mixmessages.ClientBlooms
	(*ClientBloom)(nil),                     // 21: mixmessages.ClientBloom
	(*GatewaySlots)(nil),                    // 22: mixmessages.GatewaySlots
	(*GatewaySlot)(nil),                     // 23: mixmessages.GatewaySlot
	(*GatewaySlotResponse)(nil),             // 24: mixmessages.GatewaySlotResponse
	(*BatchSenders)(nil),                    // 25: mixmessages.BatchSenders
	(*Recipients)(nil),                      // 26: mixmessages.Recipients
	(*RegisteredNodeConfirmation)(nil),      // 27: mixmessages.RegisteredNodeConfirmation
	(*RegisteredNodeCheck)(nil),             // 28: mixmessages.RegisteredNodeCheck
	(*NDFHash)(nil),                         // 29: mixmessages.NDFHash
	(*NDF)(nil),                             // 30: mixmessages.NDF
	(*NodeRegistration)(nil),                // 31: mixmessages.NodeRegistration
	(*UserRegistration)(nil),                // 32: mixmessages.UserRegistration
	(*UserRegistrationConfirmation)(nil),    // 33: mixmessages.UserRegistrationConfirmation
	(*ClientVersion)(nil),                   // 34: mixmessages.ClientVersion
	(*NonceRequest)(nil),                    // 35: mixmessages.NonceRequest
	(*Nonce)(nil),                           // 36: mixmessages.Nonce
	(*RequestRegistrationConfirmation)(nil), // 37: mixmessages.RequestRegistrationConfirmation
	(*RegistrationConfirmation)(nil),        // 38: mixmessages.RegistrationConfirmation
	(*PermissioningPoll)(nil),               // 39: mixmessages.PermissioningPoll
	(*ClientError)(nil),                     // 40: mixmessages.ClientError
	(*PermissionPollResponse)(nil),          // 41: mixmessages.PermissionPollResponse
	(*NotificationRegisterRequest)(nil),     // 42: mixmessages.NotificationRegisterRequest
	(*NotificationUnregisterRequest)(nil),   // 43: mixmessages.NotificationUnregisterRequest
	(*UserIdList)(nil),                      // 44: mixmessages.UserIdList
	(*NotificationBatch)(nil),               // 45: mixmessages.NotificationBatch
	(*NotificationData)(nil),                // 46: mixmessages.NotificationData
	(*UDBUserRegistration)(nil),             // 47: mixmessages.UDBUserRegistration
	(*Identity)(nil),                        // 48: mixmessages.Identity
	(*FactRegisterRequest)(nil),             // 49: mixmessages.FactRegisterRequest
	(*Fact)(nil),                            // 50: mixmessages.Fact
	(*FactRegisterResponse)(nil),            // 51: mixmessages.FactRegisterResponse
	(*FactConfirmRequest)(nil),              // 52: mixmessages.FactConfirmRequest
	(*FactRemovalRequest)(nil),              // 53: mixmessages.FactRemovalRequest
	(*StrAddress)(nil),                      // 54: mixmessages.StrAddress
	(*RoundInfo)(nil),                       // 55: mixmessages.RoundInfo
	(*RoundError)(nil),                      // 56: mixmessages.RoundError
	(*AuthorizerAuth)(nil),                  // 57: mixmessages.AuthorizerAuth
	(*any.Any)(nil),                         // 58: google.protobuf.Any
	(*messages.RSASignature)(nil),           // 59: messages.RSASignature
	(*messages.ECCSignature)(nil),           // 60: messages.ECCSignature
	(*messages.Ping)(nil),                   // 61: messages.Ping
	(*messages.AuthenticatedMessage)(nil),   // 62: messages.AuthenticatedMessage
	(*messages.Ack)(nil),                    // 63: messages.Ack
}
var file_mixmessages_proto_depIdxs = []int32{
	55, // 0: mixmessages.RoundPublicKey.Round:type_name -> mixmessages.RoundInfo
	55, // 1: mixmessages.Batch.Round:type_name -> mixmessages.RoundInfo
	17, // 2: mixmessages.Batch.slots:type_name -> mixmessages.Slot
	17, // 3: mixmessages.CompletedBatch.slots:type_name -> mixmessages.Slot
	55, // 4: mixmessages.BatchInfo.Round:type_name -> mixmessages.RoundInfo
	58, // 5: mixmessages.RoundTripPing.Payload:type_name -> google.protobuf.Any
	55, // 6: mixmessages.RoundTripPing.Round:type_name -> mixmessages.RoundInfo
	29, // 7: mixmessages.ServerPoll.Full:type_name -> mixmessages.NDFHash
	29, // 8: mixmessages.ServerPoll.Partial:type_name -> mixmessages.NDFHash
	30, // 9: mixmessages.ServerPollResponse.FullNDF:type_name -> mixmessages.NDF
	30, // 10: mixmessages.ServerPollResponse.PartialNDF:type_name -> mixmessages.NDF
	55, // 11: mixmessages.ServerPollResponse.Updates:type_name -> mixmessages.RoundInfo
	55, // 12: mixmessages.ServerPollResponse.BatchRequest:type_name -> mixmessages.RoundInfo
	9,  // 13: mixmessages.ServerPollResponse.Batch:type_name -> mixmessages.BatchReady
	59, // 14: mixmessages.SharePiece.Signature:type_name -> messages.RSASignature
	55, // 15: mixmessages.HistoricalRoundsResponse.Rounds:type_name -> mixmessages.RoundInfo
	17, // 16: mixmessages.GetMessagesResponse.Messages:type_name -> mixmessages.Slot
	17, // 17: mixmessages.RoundMessages.Messages:type_name -> mixmessages.Slot
	29, // 18: mixmessages.GatewayPoll.Partial:type_name -> mixmessages.NDFHash
	30, // 19: mixmessages.GatewayPollResponse.PartialNDF:type_name -> mixmessages.NDF
	55, // 20: mixmessages.GatewayPollResponse.Updates:type_name -> mixmessages.RoundInfo
	20, // 21: mixmessages.GatewayPollResponse.Filters:type_name -> mixmessages.ClientBlooms
	21, // 22: mixmessages.ClientBlooms.Filters:type_name -> mixmessages.ClientBloom
	23, // 23: mixmessages.GatewaySlots.Messages:type_name -> mixmessages.GatewaySlot
	17, // 24: mixmessages.GatewaySlot.Message:type_name -> mixmessages.Slot
	59, // 25: mixmessages.NDF.Signature:type_name -> messages.RSASignature
	59, // 26: mixmessages.UserRegistrationConfirmation.ClientSignedByServer:type_name -> messages.RSASignature
	59, // 27: mixmessages.UserRegistrationConfirmation.ClientReceptionSignedByServer:type_name -> messages.RSASignature
	59, // 28: mixmessages.NonceRequest.ClientSignedByServer:type_name -> messages.RSASignature
	59, // 29: mixmessages.NonceRequest.RequestSignature:type_name -> messages.RSASignature
	59, // 30: mixmessages.RequestRegistrationConfirmation.NonceSignedByClient:type_name -> messages.RSASignature
	59, // 31: mixmessages.RegistrationConfirmation.ClientSignedByServer:type_name -> messages.RSASignature
	29, // 32: mixmessages.PermissioningPoll.Full:type_name -> mixmessages.NDFHash
	29, // 33: mixmessages.PermissioningPoll.Partial:type_name -> mixmessages.NDFHash
	56, // 34: mixmessages.PermissioningPoll.Error:type_name -> mixmessages.RoundError
	40, // 35: mixmessages.PermissioningPoll.ClientErrors:type_name -> mixmessages.ClientError
	30, // 36: mixmessages.PermissionPollResponse.FullNDF:type_name -> mixmessages.NDF
	30, // 37: mixmessages.PermissionPollResponse.PartialNDF:type_name -> mixmessages.NDF
	55, // 38: mixmessages.PermissionPollResponse.Updates:type_name -> mixmessages.RoundInfo
	46, // 39: mixmessages.NotificationBatch.notifications:type_name -> mixmessages.NotificationData
	48, // 40: mixmessages.UDBUserRegistration.IdentityRegistration:type_name -> mixmessages.Identity
	49, // 41: mixmessages.UDBUserRegistration.frs:type_name -> mixmessages.FactRegisterRequest
	50, // 42: mixmessages.FactRegisterRequest.Fact:type_name -> mixmessages.Fact
	50, // 43: mixmessages.FactRemovalRequest.RemovalData:type_name -> mixmessages.Fact
	56, // 44: mixmessages.RoundInfo.Errors:type_name -> mixmessages.RoundError
	40, // 45: mixmessages.RoundInfo.ClientErrors:type_name -> mixmessages.ClientError
	59, // 46: mixmessages.RoundInfo.Signature:type_name -> messages.RSASignature
	60, // 47: mixmessages.RoundInfo.EccSignature:type_name -> messages.ECCSignature
	59, // 48: mixmessages.RoundError.Signature:type_name -> messages.RSASignature
	61, // 49: mixmessages.Node.AskOnline:input_type -> messages.Ping
	62, // 50: mixmessages.Node.CreateNewRound:input_type -> messages.AuthenticatedMessage
	17, // 51: mixmessages.Node.UploadUnmixedBatch:input_type -> mixmessages.Slot
	62, // 52: mixmessages.Node.FinishRealtime:input_type -> messages.AuthenticatedMessage
	62, // 53: mixmessages.Node.PostPhase:input_type -> messages.AuthenticatedMessage
	17, // 54: mixmessages.Node.StreamPostPhase:input_type -> mixmessages.Slot
	62, // 55: mixmessages.Node.GetRoundBufferInfo:input_type -> messages.AuthenticatedMessage
	62, // 56: mixmessages.Node.RequestNonce:input_type -> messages.AuthenticatedMessage
	62, // 57: mixmessages.Node.ConfirmRegistration:input_type -> messages.AuthenticatedMessage
	62, // 58: mixmessages.Node.PostPrecompResult:input_type -> messages.AuthenticatedMessage
	62, // 59: mixmessages.Node.GetMeasure:input_type -> messages.AuthenticatedMessage
	62, // 60: mixmessages.Node.Poll:input_type -> messages.AuthenticatedMessage
	62, // 61: mixmessages.Node.DownloadMixedBatch:input_type -> messages.AuthenticatedMessage
	62, // 62: mixmessages.Node.SendRoundTripPing:input_type -> messages.AuthenticatedMessage
	62, // 63: mixmessages.Node.RoundError:input_type -> messages.AuthenticatedMessage
	61, // 64: mixmessages.Node.GetPermissioningAddress:input_type -> messages.Ping
	62, // 65: mixmessages.Node.StartSharePhase:input_type -> messages.AuthenticatedMessage
	62, // 66: mixmessages.Node.SharePhaseRound:input_type -> messages.AuthenticatedMessage
	62, // 67: mixmessages.Node.ShareFinalKey:input_type -> messages.AuthenticatedMessage
	23, // 68: mixmessages.Gateway.PutMessage:input_type -> mixmessages.GatewaySlot
	22, // 69: mixmessages.Gateway.PutManyMessages:input_type -> mixmessages.GatewaySlots
	35, // 70: mixmessages.Gateway.RequestNonce:input_type -> mixmessages.NonceRequest
	37, // 71: mixmessages.Gateway.ConfirmNonce:input_type -> mixmessages.RequestRegistrationConfirmation
	18, // 72: mixmessages.Gateway.Poll:input_type -> mixmessages.GatewayPoll
	11, // 73: mixmessages.Gateway.RequestHistoricalRounds:input_type -> mixmessages.HistoricalRounds
	13, // 74: mixmessages.Gateway.RequestMessages:input_type -> mixmessages.GetMessages
	62, // 75: mixmessages.Gateway.ShareMessages:input_type -> messages.AuthenticatedMessage
	32, // 76: mixmessages.clientregistrar.RegisterUser:input_type -> mixmessages.UserRegistration
	31, // 77: mixmessages.Registration.RegisterNode:input_type -> mixmessages.NodeRegistration
	29, // 78: mixmessages.Registration.PollNdf:input_type -> mixmessages.NDFHash
	62, // 79: mixmessages.Registration.Poll:input_type -> messages.AuthenticatedMessage
	28, // 80: mixmessages.Registration.CheckRegistration:input_type -> mixmessages.RegisteredNodeCheck
	43, // 81: mixmessages.NotificationBot.UnregisterForNotifications:input_type -> mixmessages.NotificationUnregisterRequest
	42, // 82: mixmessages.NotificationBot.RegisterForNotifications:input_type -> mixmessages.NotificationRegisterRequest
	62, // 83: mixmessages.NotificationBot.ReceiveNotificationBatch:input_type -> messages.AuthenticatedMessage
	62, // 84: mixmessages.UDB.RegisterUser:input_type -> messages.AuthenticatedMessage
	62, // 85: mixmessages.UDB.RegisterFact:input_type -> messages.AuthenticatedMessage
	62, // 86: mixmessages.UDB.ConfirmFact:input_type -> messages.AuthenticatedMessage
	62, // 87: mixmessages.UDB.RemoveFact:input_type -> messages.AuthenticatedMessage
	57, // 88: mixmessages.Authorizer.Authorize:input_type -> mixmessages.AuthorizerAuth
	63, // 89: mixmessages.Node.AskOnline:output_type -> messages.Ack
	63, // 90: mixmessages.Node.CreateNewRound:output_type -> messages.Ack
	63, // 91: mixmessages.Node.UploadUnmixedBatch:output_type -> messages.Ack
	63, // 92: mixmessages.Node.FinishRealtime:output_type -> messages.Ack
	63, // 93: mixmessages.Node.PostPhase:output_type -> messages.Ack
	63, // 94: mixmessages.Node.StreamPostPhase:output_type -> messages.Ack
	0,  // 95: mixmessages.Node.GetRoundBufferInfo:output_type -> mixmessages.RoundBufferInfo
	36, // 96: mixmessages.Node.RequestNonce:output_type -> mixmessages.Nonce
	38, // 97: mixmessages.Node.ConfirmRegistration:output_type -> mixmessages.RegistrationConfirmation
	63, // 98: mixmessages.Node.PostPrecompResult:output_type -> messages.Ack
	2,  // 99: mixmessages.Node.GetMeasure:output_type -> mixmessages.RoundMetrics
	8,  // 100: mixmessages.Node.Poll:output_type -> mixmessages.ServerPollResponse
	17, // 101: mixmessages.Node.DownloadMixedBatch:output_type -> mixmessages.Slot
	63, // 102: mixmessages.Node.SendRoundTripPing:output_type -> messages.Ack
	63, // 103: mixmessages.Node.RoundError:output_type -> messages.Ack
	54, // 104: mixmessages.Node.GetPermissioningAddress:output_type -> mixmessages.StrAddress
	63, // 105: mixmessages.Node.StartSharePhase:output_type -> messages.Ack
	63, // 106: mixmessages.Node.SharePhaseRound:output_type -> messages.Ack
	63, // 107: mixmessages.Node.ShareFinalKey:output_type -> messages.Ack
	24, // 108: mixmessages.Gateway.PutMessage:output_type -> mixmessages.GatewaySlotResponse
	24, // 109: mixmessages.Gateway.PutManyMessages:output_type -> mixmessages.GatewaySlotResponse
	36, // 110: mixmessages.Gateway.RequestNonce:output_type -> mixmessages.Nonce
	38, // 111: mixmessages.Gateway.ConfirmNonce:output_type -> mixmessages.RegistrationConfirmation
	19, // 112: mixmessages.Gateway.Poll:output_type -> mixmessages.GatewayPollResponse
	12, // 113: mixmessages.Gateway.RequestHistoricalRounds:output_type -> mixmessages.HistoricalRoundsResponse
	14, // 114: mixmessages.Gateway.RequestMessages:output_type -> mixmessages.GetMessagesResponse
	63, // 115: mixmessages.Gateway.ShareMessages:output_type -> messages.Ack
	33, // 116: mixmessages.clientregistrar.RegisterUser:output_type -> mixmessages.UserRegistrationConfirmation
	63, // 117: mixmessages.Registration.RegisterNode:output_type -> messages.Ack
	30, // 118: mixmessages.Registration.PollNdf:output_type -> mixmessages.NDF
	41, // 119: mixmessages.Registration.Poll:output_type -> mixmessages.PermissionPollResponse
	27, // 120: mixmessages.Registration.CheckRegistration:output_type -> mixmessages.RegisteredNodeConfirmation
	63, // 121: mixmessages.NotificationBot.UnregisterForNotifications:output_type -> messages.Ack
	63, // 122: mixmessages.NotificationBot.RegisterForNotifications:output_type -> messages.Ack
	63, // 123: mixmessages.NotificationBot.ReceiveNotificationBatch:output_type -> messages.Ack
	63, // 124: mixmessages.UDB.RegisterUser:output_type -> messages.Ack
	51, // 125: mixmessages.UDB.RegisterFact:output_type -> mixmessages.FactRegisterResponse
	63, // 126: mixmessages.UDB.ConfirmFact:output_type -> messages.Ack
	63, // 127: mixmessages.UDB.RemoveFact:output_type -> messages.Ack
	63, // 128: mixmessages.Authorizer.Authorize:output_type -> messages.Ack
	89, // [89:129] is the sub-list for method output_type
	49, // [49:89] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_mixmessages_proto_init() }
func file_mixmessages_proto_init() {
	if File_mixmessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mixmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundBufferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletedBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundTripPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharePiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRoundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBlooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBloom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSenders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredNodeConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredNodeCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDFHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissioningPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationUnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDBUserRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRemovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mixmessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_mixmessages_proto_goTypes,
		DependencyIndexes: file_mixmessages_proto_depIdxs,
		MessageInfos:      file_mixmessages_proto_msgTypes,
	}.Build()
	File_mixmessages_proto = out.File
	file_mixmessages_proto_rawDesc = nil
	file_mixmessages_proto_goTypes = nil
	file_mixmessages_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*messages.Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// UploadUnmixedBatch sends a batch to be processed in the server's realtime
	// Gateway -> Server
	UploadUnmixedBatch(ctx context.Context, opts ...grpc.CallOption) (Node_UploadUnmixedBatchClient, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	//
	GetMeasure(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error)
	// Streams a completed batch
	// Server -> Gateway
	DownloadMixedBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (Node_DownloadMixedBatchClient, error)
	// Round trip ping comm
	SendRoundTripPing(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Round error comm
	RoundError(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Gateway permissioning address
	GetPermissioningAddress(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*StrAddress, error)
	// Server -> Server initiating multi-party round DH key generation
	StartSharePhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Server passing state of multi-party round DH key generation
	SharePhaseRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Server -> Server received final key
	ShareFinalKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UploadUnmixedBatch(ctx context.Context, opts ...grpc.CallOption) (Node_UploadUnmixedBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/mixmessages.Node/UploadUnmixedBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeUploadUnmixedBatchClient{stream}
	return x, nil
}

type Node_UploadUnmixedBatchClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodeUploadUnmixedBatchClient struct {
	grpc.ClientStream
}

func (x *nodeUploadUnmixedBatchClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeUploadUnmixedBatchClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) FinishRealtime(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/FinishRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/mixmessages.Node/StreamPostPhase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPostPhaseClient{stream}
	return x, nil
}

type Node_StreamPostPhaseClient interface {
	Send(*Slot) error
	CloseAndRecv() (*messages.Ack, error)
	grpc.ClientStream
}

type nodeStreamPostPhaseClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPostPhaseClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseClient) CloseAndRecv() (*messages.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(messages.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestNonce(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmRegistration(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPrecompResult(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPrecompResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMeasure(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*RoundMetrics, error) {
	out := new(RoundMetrics)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*ServerPollResponse, error) {
	out := new(ServerPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DownloadMixedBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (Node_DownloadMixedBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[2], "/mixmessages.Node/DownloadMixedBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeDownloadMixedBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_DownloadMixedBatchClient interface {
	Recv() (*Slot, error)
	grpc.ClientStream
}

type nodeDownloadMixedBatchClient struct {
	grpc.ClientStream
}

func (x *nodeDownloadMixedBatchClient) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SendRoundTripPing(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SendRoundTripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RoundError(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RoundError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetPermissioningAddress(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*StrAddress, error) {
	out := new(StrAddress)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetPermissioningAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StartSharePhase(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/StartSharePhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SharePhaseRound(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/SharePhaseRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ShareFinalKey(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ShareFinalKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *messages.Ping) (*messages.Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// UploadUnmixedBatch sends a batch to be processed in the server's realtime
	// Gateway -> Server
	UploadUnmixedBatch(Node_UploadUnmixedBatchServer) error
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(Node_StreamPostPhaseServer) error
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *messages.AuthenticatedMessage) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *messages.AuthenticatedMessage) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *messages.AuthenticatedMessage) (*RegistrationConfirmation, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	//
	GetMeasure(context.Context, *messages.AuthenticatedMessage) (*RoundMetrics, error)
	// Gateway -> Server unified polling
	Poll(context.Context, *messages.AuthenticatedMessage) (*ServerPollResponse, error)
	// Streams a completed batch
	// Server -> Gateway
	DownloadMixedBatch(*messages.AuthenticatedMessage, Node_DownloadMixedBatchServer) error
	// Round trip ping comm
	SendRoundTripPing(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Round error comm
	RoundError(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Gateway permissioning address
	GetPermissioningAddress(context.Context, *messages.Ping) (*StrAddress, error)
	// Server -> Server initiating multi-party round DH key generation
	StartSharePhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Server passing state of multi-party round DH key generation
	SharePhaseRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Server -> Server received final key
	ShareFinalKey(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AskOnline(context.Context, *messages.Ping) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskOnline not implemented")
}
func (*UnimplementedNodeServer) CreateNewRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRound not implemented")
}
func (*UnimplementedNodeServer) UploadUnmixedBatch(Node_UploadUnmixedBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadUnmixedBatch not implemented")
}
func (*UnimplementedNodeServer) FinishRealtime(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRealtime not implemented")
}
func (*UnimplementedNodeServer) PostPhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPhase not implemented")
}
func (*UnimplementedNodeServer) StreamPostPhase(Node_StreamPostPhaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostPhase not implemented")
}
func (*UnimplementedNodeServer) GetRoundBufferInfo(context.Context, *messages.AuthenticatedMessage) (*RoundBufferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBufferInfo not implemented")
}
func (*UnimplementedNodeServer) RequestNonce(context.Context, *messages.AuthenticatedMessage) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedNodeServer) ConfirmRegistration(context.Context, *messages.AuthenticatedMessage) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegistration not implemented")
}
func (*UnimplementedNodeServer) PostPrecompResult(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrecompResult not implemented")
}
func (*UnimplementedNodeServer) GetMeasure(context.Context, *messages.AuthenticatedMessage) (*RoundMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (*UnimplementedNodeServer) Poll(context.Context, *messages.AuthenticatedMessage) (*ServerPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedNodeServer) DownloadMixedBatch(*messages.AuthenticatedMessage, Node_DownloadMixedBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMixedBatch not implemented")
}
func (*UnimplementedNodeServer) SendRoundTripPing(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoundTripPing not implemented")
}
func (*UnimplementedNodeServer) RoundError(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundError not implemented")
}
func (*UnimplementedNodeServer) GetPermissioningAddress(context.Context, *messages.Ping) (*StrAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissioningAddress not implemented")
}
func (*UnimplementedNodeServer) StartSharePhase(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSharePhase not implemented")
}
func (*UnimplementedNodeServer) SharePhaseRound(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePhaseRound not implemented")
}
func (*UnimplementedNodeServer) ShareFinalKey(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFinalKey not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*messages.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UploadUnmixedBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).UploadUnmixedBatch(&nodeUploadUnmixedBatchServer{stream})
}

type Node_UploadUnmixedBatchServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeUploadUnmixedBatchServer struct {
	grpc.ServerStream
}

func (x *nodeUploadUnmixedBatchServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeUploadUnmixedBatchServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_FinishRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FinishRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/FinishRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FinishRealtime(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPhase(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPostPhase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPostPhase(&nodeStreamPostPhaseServer{stream})
}

type Node_StreamPostPhaseServer interface {
	SendAndClose(*messages.Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeStreamPostPhaseServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPostPhaseServer) SendAndClose(m *messages.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestNonce(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmRegistration(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPrecompResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPrecompResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPrecompResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPrecompResult(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMeasure(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Poll(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DownloadMixedBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.AuthenticatedMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).DownloadMixedBatch(m, &nodeDownloadMixedBatchServer{stream})
}

type Node_DownloadMixedBatchServer interface {
	Send(*Slot) error
	grpc.ServerStream
}

type nodeDownloadMixedBatchServer struct {
	grpc.ServerStream
}

func (x *nodeDownloadMixedBatchServer) Send(m *Slot) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_SendRoundTripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendRoundTripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SendRoundTripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendRoundTripPing(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RoundError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RoundError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RoundError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RoundError(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetPermissioningAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetPermissioningAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetPermissioningAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetPermissioningAddress(ctx, req.(*messages.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StartSharePhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StartSharePhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/StartSharePhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StartSharePhase(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SharePhaseRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SharePhaseRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/SharePhaseRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SharePhaseRound(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ShareFinalKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ShareFinalKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ShareFinalKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ShareFinalKey(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "FinishRealtime",
			Handler:    _Node_FinishRealtime_Handler,
		},
		{
			MethodName: "PostPhase",
			Handler:    _Node_PostPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Node_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _Node_ConfirmRegistration_Handler,
		},
		{
			MethodName: "PostPrecompResult",
			Handler:    _Node_PostPrecompResult_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Node_GetMeasure_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Node_Poll_Handler,
		},
		{
			MethodName: "SendRoundTripPing",
			Handler:    _Node_SendRoundTripPing_Handler,
		},
		{
			MethodName: "RoundError",
			Handler:    _Node_RoundError_Handler,
		},
		{
			MethodName: "GetPermissioningAddress",
			Handler:    _Node_GetPermissioningAddress_Handler,
		},
		{
			MethodName: "StartSharePhase",
			Handler:    _Node_StartSharePhase_Handler,
		},
		{
			MethodName: "SharePhaseRound",
			Handler:    _Node_SharePhaseRound_Handler,
		},
		{
			MethodName: "ShareFinalKey",
			Handler:    _Node_ShareFinalKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadUnmixedBatch",
			Handler:       _Node_UploadUnmixedBatch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPostPhase",
			Handler:       _Node_StreamPostPhase_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadMixedBatch",
			Handler:       _Node_DownloadMixedBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *GatewaySlot, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway
	PutManyMessages(ctx context.Context, in *GatewaySlots, opts ...grpc.CallOption) (*GatewaySlotResponse, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// Client -> Gateway unified polling
	Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error)
	// Client -> Gateway historical round request
	RequestHistoricalRounds(ctx context.Context, in *HistoricalRounds, opts ...grpc.CallOption) (*HistoricalRoundsResponse, error)
	// Client -> Gateway message request
	RequestMessages(ctx context.Context, in *GetMessages, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	// Gateway -> Gateway message sharing within a team
	// Has RoundMessages underlying type
	ShareMessages(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *GatewaySlot, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutManyMessages(ctx context.Context, in *GatewaySlots, opts ...grpc.CallOption) (*GatewaySlotResponse, error) {
	out := new(GatewaySlotResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutManyMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ConfirmNonce(ctx context.Context, in *RequestRegistrationConfirmation, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Poll(ctx context.Context, in *GatewayPoll, opts ...grpc.CallOption) (*GatewayPollResponse, error) {
	out := new(GatewayPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestHistoricalRounds(ctx context.Context, in *HistoricalRounds, opts ...grpc.CallOption) (*HistoricalRoundsResponse, error) {
	out := new(HistoricalRoundsResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestHistoricalRounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestMessages(ctx context.Context, in *GetMessages, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ShareMessages(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ShareMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *GatewaySlot) (*GatewaySlotResponse, error)
	// PutMessage on the cMix Gateway
	PutManyMessages(context.Context, *GatewaySlots) (*GatewaySlotResponse, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *RequestRegistrationConfirmation) (*RegistrationConfirmation, error)
	// Client -> Gateway unified polling
	Poll(context.Context, *GatewayPoll) (*GatewayPollResponse, error)
	// Client -> Gateway historical round request
	RequestHistoricalRounds(context.Context, *HistoricalRounds) (*HistoricalRoundsResponse, error)
	// Client -> Gateway message request
	RequestMessages(context.Context, *GetMessages) (*GetMessagesResponse, error)
	// Gateway -> Gateway message sharing within a team
	// Has RoundMessages underlying type
	ShareMessages(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) PutMessage(context.Context, *GatewaySlot) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedGatewayServer) PutManyMessages(context.Context, *GatewaySlots) (*GatewaySlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutManyMessages not implemented")
}
func (*UnimplementedGatewayServer) RequestNonce(context.Context, *NonceRequest) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedGatewayServer) ConfirmNonce(context.Context, *RequestRegistrationConfirmation) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNonce not implemented")
}
func (*UnimplementedGatewayServer) Poll(context.Context, *GatewayPoll) (*GatewayPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedGatewayServer) RequestHistoricalRounds(context.Context, *HistoricalRounds) (*HistoricalRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestHistoricalRounds not implemented")
}
func (*UnimplementedGatewayServer) RequestMessages(context.Context, *GetMessages) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMessages not implemented")
}
func (*UnimplementedGatewayServer) ShareMessages(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareMessages not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*GatewaySlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutManyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySlots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutManyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutManyMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutManyMessages(ctx, req.(*GatewaySlots))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistrationConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ConfirmNonce(ctx, req.(*RequestRegistrationConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Poll(ctx, req.(*GatewayPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestHistoricalRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalRounds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestHistoricalRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestHistoricalRounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestHistoricalRounds(ctx, req.(*HistoricalRounds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestMessages(ctx, req.(*GetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ShareMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ShareMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ShareMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ShareMessages(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "PutManyMessages",
			Handler:    _Gateway_PutManyMessages_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Gateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _Gateway_ConfirmNonce_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Gateway_Poll_Handler,
		},
		{
			MethodName: "RequestHistoricalRounds",
			Handler:    _Gateway_RequestHistoricalRounds_Handler,
		},
		{
			MethodName: "RequestMessages",
			Handler:    _Gateway_RequestMessages_Handler,
		},
		{
			MethodName: "ShareMessages",
			Handler:    _Gateway_ShareMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// ClientregistrarClient is the client API for Clientregistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientregistrarClient interface {
	// Client uses this to register its user with the system
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
}

type clientregistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewClientregistrarClient(cc grpc.ClientConnInterface) ClientregistrarClient {
	return &clientregistrarClient{cc}
}

func (c *clientregistrarClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.clientregistrar/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientregistrarServer is the server API for Clientregistrar service.
type ClientregistrarServer interface {
	// Client uses this to register its user with the system
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
}

// UnimplementedClientregistrarServer can be embedded to have forward compatible implementations.
type UnimplementedClientregistrarServer struct {
}

func (*UnimplementedClientregistrarServer) RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

func RegisterClientregistrarServer(s *grpc.Server, srv ClientregistrarServer) {
	s.RegisterService(&_Clientregistrar_serviceDesc, srv)
}

func _Clientregistrar_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientregistrarServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.clientregistrar/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientregistrarServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clientregistrar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.clientregistrar",
	HandlerType: (*ClientregistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Clientregistrar_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Node registration for the permissioning server
	RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*messages.Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(ctx context.Context, in *NDFHash, opts ...grpc.CallOption) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) PollNdf(ctx context.Context, in *NDFHash, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/PollNdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) Poll(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*PermissionPollResponse, error) {
	out := new(PermissionPollResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CheckRegistration(ctx context.Context, in *RegisteredNodeCheck, opts ...grpc.CallOption) (*RegisteredNodeConfirmation, error) {
	out := new(RegisteredNodeConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/CheckRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Node registration for the permissioning server
	RegisterNode(context.Context, *NodeRegistration) (*messages.Ack, error)
	// Obtain NDF from the Registration Server
	PollNdf(context.Context, *NDFHash) (*NDF, error)
	// Server -> Permissioning unified polling
	Poll(context.Context, *messages.AuthenticatedMessage) (*PermissionPollResponse, error)
	// Checks if node has been registered
	CheckRegistration(context.Context, *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) RegisterNode(context.Context, *NodeRegistration) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (*UnimplementedRegistrationServer) PollNdf(context.Context, *NDFHash) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollNdf not implemented")
}
func (*UnimplementedRegistrationServer) Poll(context.Context, *messages.AuthenticatedMessage) (*PermissionPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedRegistrationServer) CheckRegistration(context.Context, *RegisteredNodeCheck) (*RegisteredNodeConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegistration not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterNode(ctx, req.(*NodeRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_PollNdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NDFHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).PollNdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/PollNdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).PollNdf(ctx, req.(*NDFHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Poll(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CheckRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredNodeCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CheckRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/CheckRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CheckRegistration(ctx, req.(*RegisteredNodeCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Registration_RegisterNode_Handler,
		},
		{
			MethodName: "PollNdf",
			Handler:    _Registration_PollNdf_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Registration_Poll_Handler,
		},
		{
			MethodName: "CheckRegistration",
			Handler:    _Registration_CheckRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// NotificationBotClient is the client API for NotificationBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationBotClient interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(ctx context.Context, in *NotificationUnregisterRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*messages.Ack, error)
	// Gateway -> Notifications notification data
	ReceiveNotificationBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type notificationBotClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationBotClient(cc grpc.ClientConnInterface) NotificationBotClient {
	return &notificationBotClient{cc}
}

func (c *notificationBotClient) UnregisterForNotifications(ctx context.Context, in *NotificationUnregisterRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/UnregisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) RegisterForNotifications(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/RegisterForNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationBotClient) ReceiveNotificationBatch(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.NotificationBot/ReceiveNotificationBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationBotServer is the server API for NotificationBot service.
type NotificationBotServer interface {
	// Unregister clients from push notifications
	UnregisterForNotifications(context.Context, *NotificationUnregisterRequest) (*messages.Ack, error)
	// Register clients from push notifications
	RegisterForNotifications(context.Context, *NotificationRegisterRequest) (*messages.Ack, error)
	// Gateway -> Notifications notification data
	ReceiveNotificationBatch(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedNotificationBotServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationBotServer struct {
}

func (*UnimplementedNotificationBotServer) UnregisterForNotifications(context.Context, *NotificationUnregisterRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) RegisterForNotifications(context.Context, *NotificationRegisterRequest) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterForNotifications not implemented")
}
func (*UnimplementedNotificationBotServer) ReceiveNotificationBatch(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveNotificationBatch not implemented")
}

func RegisterNotificationBotServer(s *grpc.Server, srv NotificationBotServer) {
	s.RegisterService(&_NotificationBot_serviceDesc, srv)
}

func _NotificationBot_UnregisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/UnregisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).UnregisterForNotifications(ctx, req.(*NotificationUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_RegisterForNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/RegisterForNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).RegisterForNotifications(ctx, req.(*NotificationRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationBot_ReceiveNotificationBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationBotServer).ReceiveNotificationBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.NotificationBot/ReceiveNotificationBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationBotServer).ReceiveNotificationBatch(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.NotificationBot",
	HandlerType: (*NotificationBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnregisterForNotifications",
			Handler:    _NotificationBot_UnregisterForNotifications_Handler,
		},
		{
			MethodName: "RegisterForNotifications",
			Handler:    _NotificationBot_RegisterForNotifications_Handler,
		},
		{
			MethodName: "ReceiveNotificationBatch",
			Handler:    _NotificationBot_ReceiveNotificationBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// UDBClient is the client API for UDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UDBClient interface {
	// Handles a UDB user registration request
	RegisterUser(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Handles a request to register a Fact into the Fact database
	RegisterFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*FactRegisterResponse, error)
	// Handles a request to confirm a Fact against the Fact database
	ConfirmFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
	// Handles a request to remove a Fact from the Fact database
	RemoveFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error)
}

type uDBClient struct {
	cc grpc.ClientConnInterface
}

func NewUDBClient(cc grpc.ClientConnInterface) UDBClient {
	return &uDBClient{cc}
}

func (c *uDBClient) RegisterUser(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RegisterFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*FactRegisterResponse, error) {
	out := new(FactRegisterResponse)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RegisterFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) ConfirmFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/ConfirmFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDBClient) RemoveFact(ctx context.Context, in *messages.AuthenticatedMessage, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.UDB/RemoveFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDBServer is the server API for UDB service.
type UDBServer interface {
	// Handles a UDB user registration request
	RegisterUser(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Handles a request to register a Fact into the Fact database
	RegisterFact(context.Context, *messages.AuthenticatedMessage) (*FactRegisterResponse, error)
	// Handles a request to confirm a Fact against the Fact database
	ConfirmFact(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
	// Handles a request to remove a Fact from the Fact database
	RemoveFact(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error)
}

// UnimplementedUDBServer can be embedded to have forward compatible implementations.
type UnimplementedUDBServer struct {
}

func (*UnimplementedUDBServer) RegisterUser(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedUDBServer) RegisterFact(context.Context, *messages.AuthenticatedMessage) (*FactRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFact not implemented")
}
func (*UnimplementedUDBServer) ConfirmFact(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFact not implemented")
}
func (*UnimplementedUDBServer) RemoveFact(context.Context, *messages.AuthenticatedMessage) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFact not implemented")
}

func RegisterUDBServer(s *grpc.Server, srv UDBServer) {
	s.RegisterService(&_UDB_serviceDesc, srv)
}

func _UDB_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RegisterUser(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RegisterFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RegisterFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RegisterFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RegisterFact(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_ConfirmFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).ConfirmFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/ConfirmFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).ConfirmFact(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDB_RemoveFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthenticatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDBServer).RemoveFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.UDB/RemoveFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDBServer).RemoveFact(ctx, req.(*messages.AuthenticatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _UDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.UDB",
	HandlerType: (*UDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UDB_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterFact",
			Handler:    _UDB_RegisterFact_Handler,
		},
		{
			MethodName: "ConfirmFact",
			Handler:    _UDB_ConfirmFact_Handler,
		},
		{
			MethodName: "RemoveFact",
			Handler:    _UDB_RemoveFact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// AuthorizerClient is the client API for Authorizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizerClient interface {
	Authorize(ctx context.Context, in *AuthorizerAuth, opts ...grpc.CallOption) (*messages.Ack, error)
}

type authorizerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizerClient(cc grpc.ClientConnInterface) AuthorizerClient {
	return &authorizerClient{cc}
}

func (c *authorizerClient) Authorize(ctx context.Context, in *AuthorizerAuth, opts ...grpc.CallOption) (*messages.Ack, error) {
	out := new(messages.Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Authorizer/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizerServer is the server API for Authorizer service.
type AuthorizerServer interface {
	Authorize(context.Context, *AuthorizerAuth) (*messages.Ack, error)
}

// UnimplementedAuthorizerServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizerServer struct {
}

func (*UnimplementedAuthorizerServer) Authorize(context.Context, *AuthorizerAuth) (*messages.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}

func RegisterAuthorizerServer(s *grpc.Server, srv AuthorizerServer) {
	s.RegisterService(&_Authorizer_serviceDesc, srv)
}

func _Authorizer_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizerAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizerServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Authorizer/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizerServer).Authorize(ctx, req.(*AuthorizerAuth))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Authorizer",
	HandlerType: (*AuthorizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Authorizer_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
