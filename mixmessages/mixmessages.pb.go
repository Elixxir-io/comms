// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Response to gateway for providing certs signed by the Permissioning CA
type SignedCerts struct {
	GatewayCertPEM       string   `protobuf:"bytes,1,opt,name=GatewayCertPEM,json=gatewayCertPEM,proto3" json:"GatewayCertPEM,omitempty"`
	ServerCertPEM        string   `protobuf:"bytes,2,opt,name=ServerCertPEM,json=serverCertPEM,proto3" json:"ServerCertPEM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedCerts) Reset()         { *m = SignedCerts{} }
func (m *SignedCerts) String() string { return proto.CompactTextString(m) }
func (*SignedCerts) ProtoMessage()    {}
func (*SignedCerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *SignedCerts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedCerts.Unmarshal(m, b)
}
func (m *SignedCerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedCerts.Marshal(b, m, deterministic)
}
func (m *SignedCerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedCerts.Merge(m, src)
}
func (m *SignedCerts) XXX_Size() int {
	return xxx_messageInfo_SignedCerts.Size(m)
}
func (m *SignedCerts) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedCerts.DiscardUnknown(m)
}

var xxx_messageInfo_SignedCerts proto.InternalMessageInfo

func (m *SignedCerts) GetGatewayCertPEM() string {
	if m != nil {
		return m.GatewayCertPEM
	}
	return ""
}

func (m *SignedCerts) GetServerCertPEM() string {
	if m != nil {
		return m.ServerCertPEM
	}
	return ""
}

// The request message asking if server is online
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// The message for Init Round
type RoundInfo struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,json=roundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (m *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(m, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

//
type RoundPublicKey struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,json=round,proto3" json:"Round,omitempty"`
	Key                  []byte     `protobuf:"bytes,2,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoundPublicKey) Reset()         { *m = RoundPublicKey{} }
func (m *RoundPublicKey) String() string { return proto.CompactTextString(m) }
func (*RoundPublicKey) ProtoMessage()    {}
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *RoundPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundPublicKey.Unmarshal(m, b)
}
func (m *RoundPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundPublicKey.Marshal(b, m, deterministic)
}
func (m *RoundPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundPublicKey.Merge(m, src)
}
func (m *RoundPublicKey) XXX_Size() int {
	return xxx_messageInfo_RoundPublicKey.Size(m)
}
func (m *RoundPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_RoundPublicKey proto.InternalMessageInfo

func (m *RoundPublicKey) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *RoundPublicKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// Contains network information about all Nodes
type NodeTopology struct {
	Topology             []*NodeInfo `protobuf:"bytes,1,rep,name=Topology,json=topology,proto3" json:"Topology,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NodeTopology) Reset()         { *m = NodeTopology{} }
func (m *NodeTopology) String() string { return proto.CompactTextString(m) }
func (*NodeTopology) ProtoMessage()    {}
func (*NodeTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *NodeTopology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeTopology.Unmarshal(m, b)
}
func (m *NodeTopology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeTopology.Marshal(b, m, deterministic)
}
func (m *NodeTopology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTopology.Merge(m, src)
}
func (m *NodeTopology) XXX_Size() int {
	return xxx_messageInfo_NodeTopology.Size(m)
}
func (m *NodeTopology) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTopology.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTopology proto.InternalMessageInfo

func (m *NodeTopology) GetTopology() []*NodeInfo {
	if m != nil {
		return m.Topology
	}
	return nil
}

// Contains network information about a single Node
type NodeInfo struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	IpAddress            string   `protobuf:"bytes,3,opt,name=IpAddress,json=ipAddress,proto3" json:"IpAddress,omitempty"`
	ServerTlsCert        string   `protobuf:"bytes,4,opt,name=ServerTlsCert,json=serverTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	GatewayTlsCert       string   `protobuf:"bytes,5,opt,name=GatewayTlsCert,json=gatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NodeInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NodeInfo) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *NodeInfo) GetServerTlsCert() string {
	if m != nil {
		return m.ServerTlsCert
	}
	return ""
}

func (m *NodeInfo) GetGatewayTlsCert() string {
	if m != nil {
		return m.GatewayTlsCert
	}
	return ""
}

type RoundMetrics struct {
	RoundMetricJSON      string   `protobuf:"bytes,1,opt,name=RoundMetricJSON,json=roundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundMetrics) Reset()         { *m = RoundMetrics{} }
func (m *RoundMetrics) String() string { return proto.CompactTextString(m) }
func (*RoundMetrics) ProtoMessage()    {}
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *RoundMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundMetrics.Unmarshal(m, b)
}
func (m *RoundMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundMetrics.Marshal(b, m, deterministic)
}
func (m *RoundMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundMetrics.Merge(m, src)
}
func (m *RoundMetrics) XXX_Size() int {
	return xxx_messageInfo_RoundMetrics.Size(m)
}
func (m *RoundMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_RoundMetrics proto.InternalMessageInfo

func (m *RoundMetrics) GetRoundMetricJSON() string {
	if m != nil {
		return m.RoundMetricJSON
	}
	return ""
}

// ClientRequest message for clients to poll new CMIX messages
type ClientRequest struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	LastMessageID        string   `protobuf:"bytes,2,opt,name=LastMessageID,json=lastMessageID,proto3" json:"LastMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientRequest) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,json=iDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *IDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDList.Unmarshal(m, b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return xxx_messageInfo_IDList.Size(m)
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func (m *IDList) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// DSAPublicKey is a public key for the digital signature algorithm
type DSAPublicKey struct {
	Y                    []byte   `protobuf:"bytes,1,opt,name=Y,json=y,proto3" json:"Y,omitempty"`
	P                    []byte   `protobuf:"bytes,2,opt,name=P,json=p,proto3" json:"P,omitempty"`
	Q                    []byte   `protobuf:"bytes,3,opt,name=Q,json=q,proto3" json:"Q,omitempty"`
	G                    []byte   `protobuf:"bytes,4,opt,name=G,json=g,proto3" json:"G,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSAPublicKey) Reset()         { *m = DSAPublicKey{} }
func (m *DSAPublicKey) String() string { return proto.CompactTextString(m) }
func (*DSAPublicKey) ProtoMessage()    {}
func (*DSAPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *DSAPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSAPublicKey.Unmarshal(m, b)
}
func (m *DSAPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSAPublicKey.Marshal(b, m, deterministic)
}
func (m *DSAPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSAPublicKey.Merge(m, src)
}
func (m *DSAPublicKey) XXX_Size() int {
	return xxx_messageInfo_DSAPublicKey.Size(m)
}
func (m *DSAPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DSAPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_DSAPublicKey proto.InternalMessageInfo

func (m *DSAPublicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *DSAPublicKey) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *DSAPublicKey) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *DSAPublicKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

// RegisterNode to register a node with needed attributes
type NodeRegistration struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	ServerTlsCert        string   `protobuf:"bytes,2,opt,name=ServerTlsCert,json=serverTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	GatewayTlsCert       string   `protobuf:"bytes,3,opt,name=GatewayTlsCert,json=gatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	RegistrationCode     string   `protobuf:"bytes,4,opt,name=RegistrationCode,json=registrationCode,proto3" json:"RegistrationCode,omitempty"`
	Port                 string   `protobuf:"bytes,5,opt,name=Port,json=port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRegistration) Reset()         { *m = NodeRegistration{} }
func (m *NodeRegistration) String() string { return proto.CompactTextString(m) }
func (*NodeRegistration) ProtoMessage()    {}
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *NodeRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRegistration.Unmarshal(m, b)
}
func (m *NodeRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRegistration.Marshal(b, m, deterministic)
}
func (m *NodeRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRegistration.Merge(m, src)
}
func (m *NodeRegistration) XXX_Size() int {
	return xxx_messageInfo_NodeRegistration.Size(m)
}
func (m *NodeRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRegistration proto.InternalMessageInfo

func (m *NodeRegistration) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *NodeRegistration) GetServerTlsCert() string {
	if m != nil {
		return m.ServerTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetGatewayTlsCert() string {
	if m != nil {
		return m.GatewayTlsCert
	}
	return ""
}

func (m *NodeRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *NodeRegistration) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// DSASignature is a digital signature for the digital signature algorithm
type DSASignature struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,json=hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,json=r,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,json=s,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSASignature) Reset()         { *m = DSASignature{} }
func (m *DSASignature) String() string { return proto.CompactTextString(m) }
func (*DSASignature) ProtoMessage()    {}
func (*DSASignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *DSASignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSASignature.Unmarshal(m, b)
}
func (m *DSASignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSASignature.Marshal(b, m, deterministic)
}
func (m *DSASignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSASignature.Merge(m, src)
}
func (m *DSASignature) XXX_Size() int {
	return xxx_messageInfo_DSASignature.Size(m)
}
func (m *DSASignature) XXX_DiscardUnknown() {
	xxx_messageInfo_DSASignature.DiscardUnknown(m)
}

var xxx_messageInfo_DSASignature proto.InternalMessageInfo

func (m *DSASignature) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *DSASignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *DSASignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// UserRegistration message to initialize registration process
type UserRegistration struct {
	RegistrationCode     string        `protobuf:"bytes,1,opt,name=RegistrationCode,json=registrationCode,proto3" json:"RegistrationCode,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,json=client,proto3" json:"Client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistration) Reset()         { *m = UserRegistration{} }
func (m *UserRegistration) String() string { return proto.CompactTextString(m) }
func (*UserRegistration) ProtoMessage()    {}
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *UserRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistration.Unmarshal(m, b)
}
func (m *UserRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistration.Marshal(b, m, deterministic)
}
func (m *UserRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistration.Merge(m, src)
}
func (m *UserRegistration) XXX_Size() int {
	return xxx_messageInfo_UserRegistration.Size(m)
}
func (m *UserRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistration proto.InternalMessageInfo

func (m *UserRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *UserRegistration) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

// UserRegistrationConfirmation to confirm registration with users
type UserRegistrationConfirmation struct {
	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,json=clientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,json=error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistrationConfirmation) Reset()         { *m = UserRegistrationConfirmation{} }
func (m *UserRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*UserRegistrationConfirmation) ProtoMessage()    {}
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *UserRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistrationConfirmation.Unmarshal(m, b)
}
func (m *UserRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *UserRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistrationConfirmation.Merge(m, src)
}
func (m *UserRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_UserRegistrationConfirmation.Size(m)
}
func (m *UserRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistrationConfirmation proto.InternalMessageInfo

func (m *UserRegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *UserRegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// NonceRequest message to request nonce from client to server
type NonceRequest struct {
	Salt                 []byte        `protobuf:"bytes,1,opt,name=Salt,json=salt,proto3" json:"Salt,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,json=client,proto3" json:"Client,omitempty"`
	ClientSignedByServer *DSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,json=clientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NonceRequest) Reset()         { *m = NonceRequest{} }
func (m *NonceRequest) String() string { return proto.CompactTextString(m) }
func (*NonceRequest) ProtoMessage()    {}
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *NonceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NonceRequest.Unmarshal(m, b)
}
func (m *NonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NonceRequest.Marshal(b, m, deterministic)
}
func (m *NonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceRequest.Merge(m, src)
}
func (m *NonceRequest) XXX_Size() int {
	return xxx_messageInfo_NonceRequest.Size(m)
}
func (m *NonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NonceRequest proto.InternalMessageInfo

func (m *NonceRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *NonceRequest) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *NonceRequest) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

// Nonce message to reply to client from server
type Nonce struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,json=nonce,proto3" json:"Nonce,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,json=error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Nonce) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// RegistrationConfirmation returning proof of registration
type RegistrationConfirmation struct {
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,json=clientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Server               *DSAPublicKey `protobuf:"bytes,2,opt,name=Server,json=server,proto3" json:"Server,omitempty"`
	Error                string        `protobuf:"bytes,3,opt,name=Error,json=error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(m, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *RegistrationConfirmation) GetServer() *DSAPublicKey {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *RegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Ack generic message containing an Error field
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,json=error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Batch struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,json=round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,json=fromPhase,proto3" json:"FromPhase,omitempty"`
	Slots                []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{19}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Batch) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *Batch) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// Used as part of header for streaming post phase
type BatchInfo struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,json=round,proto3" json:"Round,omitempty"`
	FromPhase            int32      `protobuf:"varint,2,opt,name=FromPhase,json=fromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize            uint32     `protobuf:"varint,3,opt,name=BatchSize,json=batchSize,proto3" json:"BatchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchInfo) Reset()         { *m = BatchInfo{} }
func (m *BatchInfo) String() string { return proto.CompactTextString(m) }
func (*BatchInfo) ProtoMessage()    {}
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{20}
}

func (m *BatchInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInfo.Unmarshal(m, b)
}
func (m *BatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInfo.Marshal(b, m, deterministic)
}
func (m *BatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInfo.Merge(m, src)
}
func (m *BatchInfo) XXX_Size() int {
	return xxx_messageInfo_BatchInfo.Size(m)
}
func (m *BatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInfo proto.InternalMessageInfo

func (m *BatchInfo) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *BatchInfo) GetFromPhase() int32 {
	if m != nil {
		return m.FromPhase
	}
	return 0
}

func (m *BatchInfo) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type Slot struct {
	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,json=encryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,json=encryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,json=partialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,json=partialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,json=partialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,7,opt,name=SenderID,json=senderID,proto3" json:"SenderID,omitempty"`
	PayloadA             []byte   `protobuf:"bytes,8,opt,name=PayloadA,json=payloadA,proto3" json:"PayloadA,omitempty"`
	PayloadB             []byte   `protobuf:"bytes,9,opt,name=PayloadB,json=payloadB,proto3" json:"PayloadB,omitempty"`
	Salt                 []byte   `protobuf:"bytes,10,opt,name=Salt,json=salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,11,rep,name=KMACs,json=kMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{21}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Slot) GetEncryptedPayloadAKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadAKeys
	}
	return nil
}

func (m *Slot) GetEncryptedPayloadBKeys() []byte {
	if m != nil {
		return m.EncryptedPayloadBKeys
	}
	return nil
}

func (m *Slot) GetPartialPayloadACypherText() []byte {
	if m != nil {
		return m.PartialPayloadACypherText
	}
	return nil
}

func (m *Slot) GetPartialPayloadBCypherText() []byte {
	if m != nil {
		return m.PartialPayloadBCypherText
	}
	return nil
}

func (m *Slot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *Slot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *Slot) GetPayloadA() []byte {
	if m != nil {
		return m.PayloadA
	}
	return nil
}

func (m *Slot) GetPayloadB() []byte {
	if m != nil {
		return m.PayloadB
	}
	return nil
}

func (m *Slot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Slot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

type SignedMessage struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Message              *any.Any `protobuf:"bytes,3,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedMessage) Reset()         { *m = SignedMessage{} }
func (m *SignedMessage) String() string { return proto.CompactTextString(m) }
func (*SignedMessage) ProtoMessage()    {}
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{22}
}

func (m *SignedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedMessage.Unmarshal(m, b)
}
func (m *SignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedMessage.Marshal(b, m, deterministic)
}
func (m *SignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMessage.Merge(m, src)
}
func (m *SignedMessage) XXX_Size() int {
	return xxx_messageInfo_SignedMessage.Size(m)
}
func (m *SignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMessage proto.InternalMessageInfo

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMessage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SignedMessage) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedCerts)(nil), "mixmessages.SignedCerts")
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*RoundInfo)(nil), "mixmessages.RoundInfo")
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*RoundPublicKey)(nil), "mixmessages.RoundPublicKey")
	proto.RegisterType((*NodeTopology)(nil), "mixmessages.NodeTopology")
	proto.RegisterType((*NodeInfo)(nil), "mixmessages.NodeInfo")
	proto.RegisterType((*RoundMetrics)(nil), "mixmessages.RoundMetrics")
	proto.RegisterType((*ClientRequest)(nil), "mixmessages.ClientRequest")
	proto.RegisterType((*IDList)(nil), "mixmessages.IDList")
	proto.RegisterType((*DSAPublicKey)(nil), "mixmessages.DSAPublicKey")
	proto.RegisterType((*NodeRegistration)(nil), "mixmessages.NodeRegistration")
	proto.RegisterType((*DSASignature)(nil), "mixmessages.DSASignature")
	proto.RegisterType((*UserRegistration)(nil), "mixmessages.UserRegistration")
	proto.RegisterType((*UserRegistrationConfirmation)(nil), "mixmessages.UserRegistrationConfirmation")
	proto.RegisterType((*NonceRequest)(nil), "mixmessages.NonceRequest")
	proto.RegisterType((*Nonce)(nil), "mixmessages.Nonce")
	proto.RegisterType((*RegistrationConfirmation)(nil), "mixmessages.RegistrationConfirmation")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*Batch)(nil), "mixmessages.Batch")
	proto.RegisterType((*BatchInfo)(nil), "mixmessages.BatchInfo")
	proto.RegisterType((*Slot)(nil), "mixmessages.Slot")
	proto.RegisterType((*SignedMessage)(nil), "mixmessages.SignedMessage")
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5) }

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 1362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xf7, 0x66, 0xbd, 0x4e, 0xf6, 0xc4, 0x4e, 0x9d, 0x69, 0x5a, 0x39, 0x4e, 0x2a, 0x55, 0xa3,
	0xff, 0x47, 0xfe, 0x7f, 0xa1, 0x54, 0x75, 0x11, 0x42, 0xb4, 0x14, 0xfc, 0x91, 0x06, 0x93, 0x3a,
	0x35, 0xeb, 0x72, 0x51, 0xb8, 0xda, 0xd8, 0x27, 0xf6, 0x2a, 0xeb, 0x5d, 0x77, 0x66, 0x4c, 0x6a,
	0xc4, 0x1d, 0xaf, 0xc1, 0x25, 0xb7, 0x48, 0x88, 0x67, 0xe0, 0x19, 0x10, 0x8f, 0x83, 0x66, 0x76,
	0xd6, 0xde, 0xb5, 0xd7, 0xa5, 0x2d, 0x88, 0xbb, 0x9d, 0xf3, 0x35, 0x67, 0x7e, 0xe7, 0x73, 0x61,
	0x77, 0xec, 0xbd, 0x1a, 0x23, 0xe7, 0xee, 0x10, 0xf9, 0xf1, 0x84, 0x85, 0x22, 0x24, 0xdb, 0x09,
	0x52, 0x75, 0x7f, 0x18, 0x86, 0x43, 0x1f, 0xef, 0x29, 0xd6, 0xc5, 0xf4, 0xf2, 0x9e, 0x1b, 0xcc,
	0x22, 0x39, 0xfa, 0x35, 0x6c, 0xf7, 0xbc, 0x61, 0x80, 0x83, 0x26, 0x32, 0xc1, 0xc9, 0x7f, 0x60,
	0xe7, 0xd4, 0x15, 0x78, 0xed, 0xce, 0xe4, 0xb9, 0x7b, 0xd2, 0xa9, 0x18, 0x77, 0x8d, 0x23, 0xdb,
	0xd9, 0x19, 0xa6, 0xa8, 0xe4, 0x5f, 0x50, 0xea, 0x21, 0xfb, 0x06, 0x59, 0x2c, 0xb6, 0xa1, 0xc4,
	0x4a, 0x3c, 0x49, 0xa4, 0x05, 0xc8, 0x77, 0xbd, 0x60, 0x48, 0x0f, 0xc0, 0x76, 0xc2, 0x69, 0x30,
	0x68, 0x07, 0x97, 0x21, 0xd9, 0x81, 0x8d, 0x76, 0x4b, 0x99, 0xcd, 0x3b, 0x1b, 0x5e, 0x8b, 0x3e,
	0x84, 0x1b, 0x8a, 0xd9, 0x98, 0x5e, 0x5e, 0x22, 0x53, 0x22, 0x47, 0x29, 0x52, 0xcf, 0xfb, 0x16,
	0x95, 0x7c, 0xc9, 0xb9, 0xc1, 0xd2, 0x64, 0xda, 0x85, 0x1d, 0x25, 0xd9, 0x9d, 0x5e, 0xf8, 0x5e,
	0xff, 0x0c, 0x67, 0xe4, 0x3d, 0xb0, 0x14, 0x45, 0x69, 0x6c, 0xd7, 0x6e, 0x1f, 0x27, 0xb1, 0x99,
	0x7b, 0xe1, 0x58, 0xca, 0x12, 0x29, 0x83, 0x79, 0x86, 0x33, 0xe5, 0x7d, 0xd1, 0x31, 0xaf, 0x70,
	0x46, 0xeb, 0x50, 0x3c, 0x0f, 0x07, 0xf8, 0x3c, 0x9c, 0x84, 0x7e, 0x38, 0x9c, 0x91, 0xfb, 0xb0,
	0x15, 0x7f, 0x57, 0x8c, 0xbb, 0xe6, 0xd1, 0x76, 0xed, 0x56, 0xca, 0xa4, 0x14, 0x56, 0x16, 0xb7,
	0x84, 0x16, 0xa3, 0x3f, 0x18, 0xb0, 0x15, 0x93, 0xd5, 0x73, 0x23, 0x67, 0x8a, 0xce, 0x86, 0x37,
	0x20, 0x7b, 0x60, 0xb5, 0x83, 0x01, 0xbe, 0x52, 0x77, 0x96, 0x1c, 0xcb, 0x93, 0x07, 0x72, 0x08,
	0x76, 0x7b, 0x52, 0x1f, 0x0c, 0x18, 0x72, 0x5e, 0x31, 0x15, 0x96, 0xb6, 0x17, 0x13, 0x16, 0x68,
	0x3f, 0xf7, 0xb9, 0xc4, 0xb6, 0x92, 0x4f, 0xa2, 0xad, 0x89, 0x89, 0xd8, 0xc5, 0x62, 0x56, 0x2a,
	0x76, 0x9a, 0x4a, 0x3f, 0x84, 0xa2, 0xc2, 0xa1, 0x83, 0x82, 0x79, 0x7d, 0x3e, 0x47, 0x3b, 0x3a,
	0x7f, 0xde, 0x7b, 0x76, 0xae, 0x83, 0x1e, 0xa1, 0xbd, 0x20, 0xd3, 0x0e, 0x94, 0x9a, 0xbe, 0x87,
	0x81, 0x70, 0xf0, 0xe5, 0x14, 0xb9, 0x20, 0xb7, 0xa1, 0xf0, 0x25, 0x47, 0xa6, 0xe3, 0x59, 0x74,
	0x0a, 0x53, 0x75, 0x92, 0x0e, 0x3f, 0x75, 0xb9, 0xe8, 0x44, 0x20, 0xb5, 0x5b, 0x71, 0x7a, 0xf8,
	0x49, 0x22, 0xad, 0x42, 0xa1, 0xdd, 0x7a, 0xea, 0x71, 0x21, 0xc3, 0xd0, 0x6e, 0x71, 0x85, 0xaf,
	0xed, 0x98, 0x5e, 0x8b, 0xd3, 0x27, 0x50, 0x6c, 0xf5, 0xea, 0x8b, 0xb0, 0x16, 0xc1, 0x78, 0xa1,
	0x2f, 0x31, 0xd4, 0xa9, 0xab, 0x83, 0x66, 0x4c, 0xe4, 0xe9, 0x0b, 0x05, 0x5a, 0xd1, 0x31, 0x5e,
	0xca, 0xd3, 0xa9, 0x02, 0xa8, 0xe8, 0x18, 0x43, 0xfa, 0xb3, 0x01, 0x65, 0x19, 0x0b, 0x07, 0x87,
	0x1e, 0x17, 0xcc, 0x15, 0x5e, 0x18, 0x24, 0x52, 0x50, 0xc6, 0xa4, 0xb5, 0x8a, 0xef, 0xc6, 0x9b,
	0xe1, 0x6b, 0x66, 0xe1, 0x4b, 0xfe, 0x0f, 0xe5, 0xe4, 0x6d, 0xcd, 0x70, 0x80, 0x3a, 0x60, 0x65,
	0xb6, 0x44, 0x27, 0x04, 0xf2, 0xdd, 0x70, 0x1e, 0xa9, 0xfc, 0x24, 0x64, 0x82, 0x3e, 0x56, 0x4f,
	0x97, 0x55, 0xe9, 0x8a, 0x29, 0x53, 0x32, 0x9f, 0xb9, 0x7c, 0xa4, 0xfd, 0xcd, 0x8f, 0x5c, 0x3e,
	0x92, 0x8f, 0x74, 0x62, 0x00, 0x98, 0x3c, 0xf5, 0x62, 0x00, 0x38, 0x7d, 0x09, 0x65, 0x19, 0x94,
	0xd4, 0x8b, 0xb3, 0x7c, 0x32, 0xd6, 0xf8, 0x74, 0x1f, 0x0a, 0x51, 0x94, 0xd5, 0x05, 0xdb, 0xb5,
	0xfd, 0x54, 0xbe, 0x27, 0xa3, 0xe2, 0x14, 0xfa, 0x4a, 0x90, 0x7e, 0x6f, 0xc0, 0xe1, 0xf2, 0x9d,
	0xcd, 0x30, 0xb8, 0xf4, 0xd8, 0x38, 0xba, 0xbf, 0x03, 0x7b, 0x91, 0xcd, 0xa8, 0xd9, 0x34, 0x66,
	0x11, 0xde, 0xba, 0x48, 0x57, 0x6e, 0x98, 0x3f, 0xde, 0xd9, 0xeb, 0x67, 0xa8, 0xc9, 0x22, 0x3a,
	0x61, 0x2c, 0x64, 0x3a, 0x50, 0x16, 0xca, 0x03, 0xfd, 0xd1, 0x90, 0xb5, 0x1b, 0xf4, 0x31, 0x4e,
	0x4f, 0x02, 0xf9, 0x9e, 0xeb, 0x8b, 0x18, 0x39, 0xee, 0xfa, 0xe2, 0x1d, 0x5e, 0xb7, 0xd6, 0x79,
	0xf3, 0x9d, 0x9c, 0xa7, 0x0f, 0xc0, 0x52, 0x5e, 0xca, 0x57, 0xa8, 0x0f, 0xed, 0x9f, 0x15, 0xc4,
	0xd4, 0x8c, 0xb7, 0xfd, 0x62, 0x40, 0xe5, 0x9f, 0x42, 0xf7, 0x3e, 0x14, 0xb4, 0x81, 0x3f, 0x87,
	0x88, 0x2f, 0x05, 0xc4, 0x4c, 0x3a, 0x7d, 0x00, 0x66, 0xbd, 0x7f, 0xb5, 0x60, 0x1a, 0x49, 0xe6,
	0x77, 0x60, 0x35, 0x5c, 0xd1, 0x1f, 0xbd, 0x65, 0xc7, 0x3e, 0x04, 0xfb, 0x09, 0x0b, 0xc7, 0xdd,
	0x91, 0xcb, 0x51, 0xf9, 0x67, 0x39, 0xf6, 0x65, 0x4c, 0x20, 0xff, 0x05, 0x8b, 0xfb, 0xa1, 0x90,
	0x3d, 0x54, 0xb6, 0xea, 0xdd, 0x94, 0xad, 0x9e, 0x1f, 0x0a, 0x27, 0xe2, 0xd3, 0x29, 0xd8, 0xea,
	0x76, 0xd5, 0xa3, 0xff, 0x4e, 0x0f, 0x0e, 0xb5, 0x61, 0x35, 0xb5, 0x4c, 0xd5, 0xe3, 0xed, 0x8b,
	0x98, 0x40, 0x7f, 0x35, 0x21, 0x2f, 0xdd, 0x58, 0x8c, 0x01, 0x23, 0x39, 0x06, 0xde, 0x87, 0x5b,
	0x27, 0x41, 0x9f, 0xcd, 0x26, 0x02, 0x07, 0x5d, 0x77, 0xe6, 0x87, 0xee, 0xa0, 0x7e, 0x86, 0x33,
	0xae, 0x4b, 0xfd, 0x16, 0x66, 0x31, 0xb3, 0xb4, 0x1a, 0x4a, 0xcb, 0xcc, 0xd6, 0x52, 0x4c, 0xf2,
	0x08, 0xf6, 0xbb, 0x2e, 0x13, 0x9e, 0xeb, 0xc7, 0xc6, 0x9a, 0xb3, 0xc9, 0x08, 0xd9, 0x73, 0x7c,
	0x25, 0x74, 0xff, 0xdc, 0x9f, 0xac, 0x13, 0x58, 0xd5, 0x6e, 0x24, 0xb4, 0xad, 0x2c, 0xed, 0x84,
	0x00, 0xf9, 0x14, 0x0e, 0xb4, 0x76, 0x62, 0x7a, 0x47, 0x7c, 0x39, 0x8e, 0x0b, 0x4a, 0xff, 0x60,
	0xb2, 0x5e, 0x84, 0x54, 0x61, 0xab, 0x87, 0xc1, 0x40, 0xcd, 0x9e, 0x4d, 0x25, 0xbe, 0xc5, 0xf5,
	0x59, 0xf2, 0x62, 0x8f, 0x2b, 0x5b, 0x11, 0x6f, 0xa2, 0xcf, 0x09, 0x5e, 0xa3, 0x62, 0xa7, 0x78,
	0x8d, 0x79, 0xbb, 0x80, 0x44, 0xbb, 0xd8, 0x03, 0xeb, 0xac, 0x53, 0x6f, 0xf2, 0xca, 0xf6, 0x5d,
	0x53, 0xd6, 0xe8, 0x95, 0x3c, 0xd0, 0x31, 0x94, 0xa2, 0x9a, 0xd1, 0xc3, 0x4c, 0x46, 0x7d, 0x5e,
	0x55, 0xba, 0x9c, 0x6d, 0x3e, 0xef, 0xe0, 0xd1, 0xbc, 0x89, 0xea, 0x59, 0xce, 0x9b, 0x63, 0xd8,
	0xd4, 0x8a, 0xba, 0x87, 0xec, 0x1d, 0x47, 0x1b, 0xda, 0x71, 0xbc, 0xa1, 0x1d, 0xd7, 0x83, 0x99,
	0xb3, 0xa9, 0x73, 0xb0, 0xf6, 0xfb, 0x26, 0xe4, 0xe5, 0x10, 0x23, 0x35, 0xb0, 0xeb, 0xfc, 0xea,
	0x59, 0xe0, 0x7b, 0x01, 0x92, 0x74, 0x72, 0xcb, 0x45, 0xab, 0x5a, 0x4e, 0x91, 0xea, 0xfd, 0x2b,
	0x9a, 0x23, 0x8f, 0x60, 0xa7, 0xc9, 0xd0, 0x15, 0x78, 0x8e, 0xd7, 0x0a, 0x4a, 0xb2, 0x26, 0xbf,
	0x33, 0xb5, 0x3f, 0x80, 0x62, 0x37, 0xe4, 0xe2, 0x1c, 0xaf, 0xa3, 0x62, 0x25, 0x29, 0x19, 0x45,
	0x5b, 0x77, 0xeb, 0x13, 0x2f, 0xf0, 0xf8, 0xc8, 0x41, 0xd7, 0x17, 0xde, 0x18, 0xdf, 0xea, 0xd6,
	0x07, 0x60, 0xcb, 0x5b, 0xa3, 0x8a, 0x7a, 0xd3, 0x2b, 0x3f, 0x82, 0x1b, 0x3d, 0xc1, 0xd0, 0x1d,
	0x2f, 0x54, 0x57, 0xeb, 0x3f, 0x4b, 0xf3, 0xc8, 0x20, 0x0e, 0x90, 0x53, 0x14, 0xcb, 0x7b, 0xe8,
	0xe1, 0xaa, 0xcb, 0x0b, 0x6e, 0xf5, 0xb5, 0x5c, 0x9a, 0x23, 0x9f, 0x40, 0x51, 0x0f, 0xa2, 0xa8,
	0xdd, 0xef, 0x2f, 0xed, 0x8d, 0x8b, 0x41, 0x55, 0x25, 0xab, 0x2c, 0x9a, 0x23, 0x2f, 0xe0, 0xa6,
	0x6e, 0xf3, 0xa9, 0x59, 0xbe, 0xbe, 0x9f, 0x57, 0xff, 0x9d, 0x76, 0x69, 0xcd, 0xbc, 0xa0, 0x39,
	0x72, 0x02, 0x44, 0xa2, 0xb4, 0xb4, 0x3b, 0x1f, 0xac, 0xbe, 0x68, 0xce, 0xcc, 0x84, 0xfc, 0x21,
	0xec, 0x2a, 0xb0, 0x19, 0xf6, 0xc3, 0xf1, 0xc4, 0x41, 0x3e, 0xf5, 0xc5, 0x5b, 0xa4, 0xc8, 0xee,
	0x29, 0x8a, 0x66, 0x38, 0x9e, 0xf8, 0x28, 0x70, 0x10, 0xe5, 0x57, 0x46, 0x52, 0x67, 0xd8, 0xa3,
	0x39, 0xd2, 0x80, 0x72, 0x2b, 0xbc, 0x0e, 0x64, 0xe5, 0xce, 0x77, 0xf5, 0x6a, 0x3a, 0xdc, 0xc9,
	0x0a, 0xcd, 0xf4, 0xa0, 0x0e, 0x70, 0x8a, 0xa2, 0x83, 0x2e, 0x97, 0x55, 0xba, 0x2e, 0x41, 0xf7,
	0x57, 0xe9, 0x7a, 0x75, 0xa6, 0x39, 0xf2, 0x18, 0x4a, 0xa7, 0x28, 0x16, 0xbf, 0x50, 0x59, 0x0f,
	0xa8, 0x64, 0xb8, 0xa5, 0x7e, 0xb7, 0x68, 0xae, 0xf6, 0xdb, 0x06, 0x6c, 0xea, 0xad, 0x92, 0x34,
	0xa0, 0xd4, 0x1c, 0x61, 0xff, 0x4a, 0xbb, 0xcc, 0x97, 0xde, 0x93, 0x5a, 0xbd, 0xab, 0x37, 0x53,
	0xbc, 0x68, 0x8f, 0xa6, 0x39, 0xf2, 0xb1, 0x7e, 0x52, 0xd4, 0x96, 0x5e, 0x67, 0x60, 0xb5, 0x36,
	0x54, 0xe1, 0x41, 0x77, 0x3a, 0x57, 0x7f, 0xb3, 0xf2, 0xf9, 0xeb, 0x89, 0xee, 0x40, 0x51, 0xe7,
	0x67, 0x96, 0x81, 0x77, 0xca, 0xf0, 0xda, 0x4f, 0x86, 0xf4, 0x2a, 0x51, 0x36, 0x5f, 0xc5, 0x67,
	0x64, 0x72, 0x55, 0x25, 0x77, 0x52, 0x96, 0x96, 0xb7, 0xd7, 0xea, 0xff, 0x5e, 0xcb, 0x5e, 0x2a,
	0xa7, 0xfa, 0xc2, 0xb6, 0xea, 0xd3, 0x77, 0x56, 0x7e, 0x11, 0x53, 0xb6, 0x33, 0x40, 0xbc, 0x28,
	0xa8, 0xd6, 0xff, 0xe0, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x15, 0xa6, 0xe5, 0xcc, 0x0f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(ctx context.Context, in *RoundPublicKey, opts ...grpc.CallOption) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Batch, error)
	// Obtains a network topology from the Permissioning Server
	DownloadTopology(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*Ack, error)
	//
	GetMeasure(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*RoundMetrics, error)
	// Gateway -> Server polling for CA-signed certificates
	GetSignedCert(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*SignedCerts, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostNewBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostNewBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FinishRealtime(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/FinishRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPhase(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPostPhase(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPostPhaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/mixmessages.Node/StreamPostPhase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPostPhaseClient{stream}
	return x, nil
}

type Node_StreamPostPhaseClient interface {
	Send(*Slot) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type nodeStreamPostPhaseClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPostPhaseClient) Send(m *Slot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostRoundPublicKey(ctx context.Context, in *RoundPublicKey, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostRoundPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PostPrecompResult(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/PostPrecompResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCompletedBatch(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetCompletedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DownloadTopology(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/DownloadTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMeasure(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*RoundMetrics, error) {
	out := new(RoundMetrics)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetSignedCert(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*SignedCerts, error) {
	out := new(SignedCerts)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetSignedCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *RoundInfo) (*Ack, error)
	// PostNewBatch sends a batch to be processed in the server's realtime
	PostNewBatch(context.Context, *Batch) (*Ack, error)
	// FinishRealtime broadcasts when realtime is complete
	FinishRealtime(context.Context, *RoundInfo) (*Ack, error)
	// PostPhase runs a cMix phase on another node
	PostPhase(context.Context, *Batch) (*Ack, error)
	// StreamPostPhase runs a cMix phase on another node
	// by using unary streaming of slots
	StreamPostPhase(Node_StreamPostPhaseServer) error
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *RoundBufferInfo) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *DSASignature) (*RegistrationConfirmation, error)
	// PostRoundPublicKey sets the public cypher key for a round on other nodes
	PostRoundPublicKey(context.Context, *RoundPublicKey) (*Ack, error)
	// PostPrecompResult finalizes the precomputation results with each node from the last node
	// sending the final PayloadA and PayloadB precomputations
	PostPrecompResult(context.Context, *Batch) (*Ack, error)
	// The gateway calls GetCompletedBatch to get any finished batch from a node
	GetCompletedBatch(context.Context, *Ping) (*Batch, error)
	// Obtains a network topology from the Permissioning Server
	DownloadTopology(context.Context, *SignedMessage) (*Ack, error)
	//
	GetMeasure(context.Context, *RoundInfo) (*RoundMetrics, error)
	// Gateway -> Server polling for CA-signed certificates
	GetSignedCert(context.Context, *Ping) (*SignedCerts, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AskOnline(ctx context.Context, req *Ping) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskOnline not implemented")
}
func (*UnimplementedNodeServer) CreateNewRound(ctx context.Context, req *RoundInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRound not implemented")
}
func (*UnimplementedNodeServer) PostNewBatch(ctx context.Context, req *Batch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewBatch not implemented")
}
func (*UnimplementedNodeServer) FinishRealtime(ctx context.Context, req *RoundInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRealtime not implemented")
}
func (*UnimplementedNodeServer) PostPhase(ctx context.Context, req *Batch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPhase not implemented")
}
func (*UnimplementedNodeServer) StreamPostPhase(srv Node_StreamPostPhaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostPhase not implemented")
}
func (*UnimplementedNodeServer) GetRoundBufferInfo(ctx context.Context, req *RoundBufferInfo) (*RoundBufferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBufferInfo not implemented")
}
func (*UnimplementedNodeServer) RequestNonce(ctx context.Context, req *NonceRequest) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedNodeServer) ConfirmRegistration(ctx context.Context, req *DSASignature) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegistration not implemented")
}
func (*UnimplementedNodeServer) PostRoundPublicKey(ctx context.Context, req *RoundPublicKey) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRoundPublicKey not implemented")
}
func (*UnimplementedNodeServer) PostPrecompResult(ctx context.Context, req *Batch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPrecompResult not implemented")
}
func (*UnimplementedNodeServer) GetCompletedBatch(ctx context.Context, req *Ping) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedBatch not implemented")
}
func (*UnimplementedNodeServer) DownloadTopology(ctx context.Context, req *SignedMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTopology not implemented")
}
func (*UnimplementedNodeServer) GetMeasure(ctx context.Context, req *RoundInfo) (*RoundMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (*UnimplementedNodeServer) GetSignedCert(ctx context.Context, req *Ping) (*SignedCerts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedCert not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostNewBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostNewBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostNewBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostNewBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FinishRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FinishRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/FinishRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FinishRealtime(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPhase(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPostPhase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPostPhase(&nodeStreamPostPhaseServer{stream})
}

type Node_StreamPostPhaseServer interface {
	SendAndClose(*Ack) error
	Recv() (*Slot, error)
	grpc.ServerStream
}

type nodeStreamPostPhaseServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPostPhaseServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPostPhaseServer) Recv() (*Slot, error) {
	m := new(Slot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBufferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*RoundBufferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmRegistration(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostRoundPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundPublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostRoundPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostRoundPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostRoundPublicKey(ctx, req.(*RoundPublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PostPrecompResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostPrecompResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/PostPrecompResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostPrecompResult(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCompletedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCompletedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetCompletedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCompletedBatch(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DownloadTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DownloadTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/DownloadTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DownloadTopology(ctx, req.(*SignedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMeasure(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetSignedCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetSignedCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetSignedCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetSignedCert(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "PostNewBatch",
			Handler:    _Node_PostNewBatch_Handler,
		},
		{
			MethodName: "FinishRealtime",
			Handler:    _Node_FinishRealtime_Handler,
		},
		{
			MethodName: "PostPhase",
			Handler:    _Node_PostPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Node_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _Node_ConfirmRegistration_Handler,
		},
		{
			MethodName: "PostRoundPublicKey",
			Handler:    _Node_PostRoundPublicKey_Handler,
		},
		{
			MethodName: "PostPrecompResult",
			Handler:    _Node_PostPrecompResult_Handler,
		},
		{
			MethodName: "GetCompletedBatch",
			Handler:    _Node_GetCompletedBatch_Handler,
		},
		{
			MethodName: "DownloadTopology",
			Handler:    _Node_DownloadTopology_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Node_GetMeasure_Handler,
		},
		{
			MethodName: "GetSignedCert",
			Handler:    _Node_GetSignedCert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPostPhase",
			Handler:       _Node_StreamPostPhase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Slot, error) {
	out := new(Slot)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientRequest) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(context.Context, *ClientRequest) (*Slot, error)
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *Slot) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *DSASignature) (*RegistrationConfirmation, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) CheckMessages(ctx context.Context, req *ClientRequest) (*IDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMessages not implemented")
}
func (*UnimplementedGatewayServer) GetMessage(ctx context.Context, req *ClientRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedGatewayServer) PutMessage(ctx context.Context, req *Slot) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedGatewayServer) RequestNonce(ctx context.Context, req *NonceRequest) (*Nonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNonce not implemented")
}
func (*UnimplementedGatewayServer) ConfirmNonce(ctx context.Context, req *DSASignature) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNonce not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CheckMessages(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ConfirmNonce(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _Gateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Gateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Gateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _Gateway_ConfirmNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client & RegistrationServer Communication
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
	//Node registration for the permissioning server
	RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterNode(ctx context.Context, in *NodeRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client & RegistrationServer Communication
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
	//Node registration for the permissioning server
	RegisterNode(context.Context, *NodeRegistration) (*Ack, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) RegisterUser(ctx context.Context, req *UserRegistration) (*UserRegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedRegistrationServer) RegisterNode(ctx context.Context, req *NodeRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterNode(ctx, req.(*NodeRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Registration_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
