// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixmessages.proto

package mixmessages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message asking if server is online
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// The request message asking server to add their time
type TimePing struct {
	Times                []int64  `protobuf:"varint,1,rep,packed,name=Times,proto3" json:"Times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimePing) Reset()         { *m = TimePing{} }
func (m *TimePing) String() string { return proto.CompactTextString(m) }
func (*TimePing) ProtoMessage()    {}
func (*TimePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{1}
}

func (m *TimePing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePing.Unmarshal(m, b)
}
func (m *TimePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePing.Marshal(b, m, deterministic)
}
func (m *TimePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePing.Merge(m, src)
}
func (m *TimePing) XXX_Size() int {
	return xxx_messageInfo_TimePing.Size(m)
}
func (m *TimePing) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePing.DiscardUnknown(m)
}

var xxx_messageInfo_TimePing proto.InternalMessageInfo

func (m *TimePing) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

// The message containing the server metrics from all visited nodes
type ServerMetrics struct {
	MemUsage             []uint32 `protobuf:"varint,1,rep,packed,name=MemUsage,proto3" json:"MemUsage,omitempty"`
	ThreadUsage          []uint32 `protobuf:"varint,2,rep,packed,name=ThreadUsage,proto3" json:"ThreadUsage,omitempty"`
	CpuUsage             []uint32 `protobuf:"varint,3,rep,packed,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`
	UpSince              []int64  `protobuf:"varint,4,rep,packed,name=UpSince,proto3" json:"UpSince,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMetrics) Reset()         { *m = ServerMetrics{} }
func (m *ServerMetrics) String() string { return proto.CompactTextString(m) }
func (*ServerMetrics) ProtoMessage()    {}
func (*ServerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{2}
}

func (m *ServerMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMetrics.Unmarshal(m, b)
}
func (m *ServerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMetrics.Marshal(b, m, deterministic)
}
func (m *ServerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetrics.Merge(m, src)
}
func (m *ServerMetrics) XXX_Size() int {
	return xxx_messageInfo_ServerMetrics.Size(m)
}
func (m *ServerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetrics proto.InternalMessageInfo

func (m *ServerMetrics) GetMemUsage() []uint32 {
	if m != nil {
		return m.MemUsage
	}
	return nil
}

func (m *ServerMetrics) GetThreadUsage() []uint32 {
	if m != nil {
		return m.ThreadUsage
	}
	return nil
}

func (m *ServerMetrics) GetCpuUsage() []uint32 {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *ServerMetrics) GetUpSince() []int64 {
	if m != nil {
		return m.UpSince
	}
	return nil
}

// The message for Init Round
type RoundInfo struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{3}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	RoundBufferSize      uint32   `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundBufferInfo) Reset()         { *m = RoundBufferInfo{} }
func (m *RoundBufferInfo) String() string { return proto.CompactTextString(m) }
func (*RoundBufferInfo) ProtoMessage()    {}
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{4}
}

func (m *RoundBufferInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundBufferInfo.Unmarshal(m, b)
}
func (m *RoundBufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundBufferInfo.Marshal(b, m, deterministic)
}
func (m *RoundBufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundBufferInfo.Merge(m, src)
}
func (m *RoundBufferInfo) XXX_Size() int {
	return xxx_messageInfo_RoundBufferInfo.Size(m)
}
func (m *RoundBufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundBufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundBufferInfo proto.InternalMessageInfo

func (m *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if m != nil {
		return m.RoundBufferSize
	}
	return 0
}

// ClientRequest message for clients to poll new CMIX messages
type ClientRequest struct {
	UserID               []byte   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LastMessageID        string   `protobuf:"bytes,2,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{5}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetUserID() []byte {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *ClientRequest) GetLastMessageID() string {
	if m != nil {
		return m.LastMessageID
	}
	return ""
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{6}
}

func (m *IDList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDList.Unmarshal(m, b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return xxx_messageInfo_IDList.Size(m)
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func (m *IDList) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Input messages are a list of messages run as a batch
type Input struct {
	Messages             []*Batch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{7}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetMessages() []*Batch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Output messages are a list of messages run as a batch
type Output struct {
	Messages             []*Batch `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{8}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetMessages() []*Batch {
	if m != nil {
		return m.Messages
	}
	return nil
}

// DSAPublicKey is a public key for the digital signature algorithm
type DSAPublicKey struct {
	Y                    []byte   `protobuf:"bytes,1,opt,name=Y,proto3" json:"Y,omitempty"`
	P                    []byte   `protobuf:"bytes,2,opt,name=P,proto3" json:"P,omitempty"`
	Q                    []byte   `protobuf:"bytes,3,opt,name=Q,proto3" json:"Q,omitempty"`
	G                    []byte   `protobuf:"bytes,4,opt,name=G,proto3" json:"G,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSAPublicKey) Reset()         { *m = DSAPublicKey{} }
func (m *DSAPublicKey) String() string { return proto.CompactTextString(m) }
func (*DSAPublicKey) ProtoMessage()    {}
func (*DSAPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{9}
}

func (m *DSAPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSAPublicKey.Unmarshal(m, b)
}
func (m *DSAPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSAPublicKey.Marshal(b, m, deterministic)
}
func (m *DSAPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSAPublicKey.Merge(m, src)
}
func (m *DSAPublicKey) XXX_Size() int {
	return xxx_messageInfo_DSAPublicKey.Size(m)
}
func (m *DSAPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DSAPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_DSAPublicKey proto.InternalMessageInfo

func (m *DSAPublicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *DSAPublicKey) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *DSAPublicKey) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *DSAPublicKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

// DSASignature is a digital signature for the digital signature algorithm
type DSASignature struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSASignature) Reset()         { *m = DSASignature{} }
func (m *DSASignature) String() string { return proto.CompactTextString(m) }
func (*DSASignature) ProtoMessage()    {}
func (*DSASignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{10}
}

func (m *DSASignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DSASignature.Unmarshal(m, b)
}
func (m *DSASignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DSASignature.Marshal(b, m, deterministic)
}
func (m *DSASignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSASignature.Merge(m, src)
}
func (m *DSASignature) XXX_Size() int {
	return xxx_messageInfo_DSASignature.Size(m)
}
func (m *DSASignature) XXX_DiscardUnknown() {
	xxx_messageInfo_DSASignature.DiscardUnknown(m)
}

var xxx_messageInfo_DSASignature proto.InternalMessageInfo

func (m *DSASignature) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *DSASignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *DSASignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// UserRegistration message to initialize registration process
type UserRegistration struct {
	RegistrationCode     string        `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,proto3" json:"Client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistration) Reset()         { *m = UserRegistration{} }
func (m *UserRegistration) String() string { return proto.CompactTextString(m) }
func (*UserRegistration) ProtoMessage()    {}
func (*UserRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{11}
}

func (m *UserRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistration.Unmarshal(m, b)
}
func (m *UserRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistration.Marshal(b, m, deterministic)
}
func (m *UserRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistration.Merge(m, src)
}
func (m *UserRegistration) XXX_Size() int {
	return xxx_messageInfo_UserRegistration.Size(m)
}
func (m *UserRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistration proto.InternalMessageInfo

func (m *UserRegistration) GetRegistrationCode() string {
	if m != nil {
		return m.RegistrationCode
	}
	return ""
}

func (m *UserRegistration) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

// UserRegistrationConfirmation to confirm registration with users
type UserRegistrationConfirmation struct {
	// RegistrationServer-Signed Client Public Key
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Error                string        `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserRegistrationConfirmation) Reset()         { *m = UserRegistrationConfirmation{} }
func (m *UserRegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*UserRegistrationConfirmation) ProtoMessage()    {}
func (*UserRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{12}
}

func (m *UserRegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRegistrationConfirmation.Unmarshal(m, b)
}
func (m *UserRegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *UserRegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegistrationConfirmation.Merge(m, src)
}
func (m *UserRegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_UserRegistrationConfirmation.Size(m)
}
func (m *UserRegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegistrationConfirmation proto.InternalMessageInfo

func (m *UserRegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *UserRegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// NonceRequest message to request nonce from client to server
type NonceRequest struct {
	Salt                 []byte        `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	Client               *DSAPublicKey `protobuf:"bytes,2,opt,name=Client,proto3" json:"Client,omitempty"`
	ClientSignedByServer *DSASignature `protobuf:"bytes,3,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NonceRequest) Reset()         { *m = NonceRequest{} }
func (m *NonceRequest) String() string { return proto.CompactTextString(m) }
func (*NonceRequest) ProtoMessage()    {}
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{13}
}

func (m *NonceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NonceRequest.Unmarshal(m, b)
}
func (m *NonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NonceRequest.Marshal(b, m, deterministic)
}
func (m *NonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceRequest.Merge(m, src)
}
func (m *NonceRequest) XXX_Size() int {
	return xxx_messageInfo_NonceRequest.Size(m)
}
func (m *NonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NonceRequest proto.InternalMessageInfo

func (m *NonceRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *NonceRequest) GetClient() *DSAPublicKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *NonceRequest) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

// Nonce message to reply to client from server
type Nonce struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{14}
}

func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Nonce) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// RegistrationConfirmation returning proof of registration
type RegistrationConfirmation struct {
	ClientSignedByServer *DSASignature `protobuf:"bytes,1,opt,name=ClientSignedByServer,proto3" json:"ClientSignedByServer,omitempty"`
	Server               *DSAPublicKey `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
	Error                string        `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{15}
}

func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(m, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetClientSignedByServer() *DSASignature {
	if m != nil {
		return m.ClientSignedByServer
	}
	return nil
}

func (m *RegistrationConfirmation) GetServer() *DSAPublicKey {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *RegistrationConfirmation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Ack generic message containing an Error field
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{16}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Batch struct {
	Round                *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	ForPhase             int32      `protobuf:"varint,2,opt,name=ForPhase,proto3" json:"ForPhase,omitempty"`
	Slots                []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{17}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetRound() *RoundInfo {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Batch) GetForPhase() int32 {
	if m != nil {
		return m.ForPhase
	}
	return 0
}

func (m *Batch) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type Slot struct {
	// Precomputation fields
	EncryptedMessageKeys            []byte `protobuf:"bytes,1,opt,name=EncryptedMessageKeys,proto3" json:"EncryptedMessageKeys,omitempty"`
	EncryptedAssociatedDataKeys     []byte `protobuf:"bytes,2,opt,name=EncryptedAssociatedDataKeys,proto3" json:"EncryptedAssociatedDataKeys,omitempty"`
	PartialMessageCypherText        []byte `protobuf:"bytes,3,opt,name=PartialMessageCypherText,proto3" json:"PartialMessageCypherText,omitempty"`
	PartialAssociatedDataCypherText []byte `protobuf:"bytes,4,opt,name=PartialAssociatedDataCypherText,proto3" json:"PartialAssociatedDataCypherText,omitempty"`
	PartialRoundPublicCypherKey     []byte `protobuf:"bytes,5,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID             []byte   `protobuf:"bytes,6,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	MessagePayload       []byte   `protobuf:"bytes,7,opt,name=MessagePayload,proto3" json:"MessagePayload,omitempty"`
	AssociatedData       []byte   `protobuf:"bytes,8,opt,name=AssociatedData,proto3" json:"AssociatedData,omitempty"`
	Salt                 []byte   `protobuf:"bytes,9,opt,name=Salt,proto3" json:"Salt,omitempty"`
	KMACs                [][]byte `protobuf:"bytes,10,rep,name=KMACs,proto3" json:"KMACs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f858aeec3eb2fbf5, []int{18}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetEncryptedMessageKeys() []byte {
	if m != nil {
		return m.EncryptedMessageKeys
	}
	return nil
}

func (m *Slot) GetEncryptedAssociatedDataKeys() []byte {
	if m != nil {
		return m.EncryptedAssociatedDataKeys
	}
	return nil
}

func (m *Slot) GetPartialMessageCypherText() []byte {
	if m != nil {
		return m.PartialMessageCypherText
	}
	return nil
}

func (m *Slot) GetPartialAssociatedDataCypherText() []byte {
	if m != nil {
		return m.PartialAssociatedDataCypherText
	}
	return nil
}

func (m *Slot) GetPartialRoundPublicCypherKey() []byte {
	if m != nil {
		return m.PartialRoundPublicCypherKey
	}
	return nil
}

func (m *Slot) GetSenderID() []byte {
	if m != nil {
		return m.SenderID
	}
	return nil
}

func (m *Slot) GetMessagePayload() []byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

func (m *Slot) GetAssociatedData() []byte {
	if m != nil {
		return m.AssociatedData
	}
	return nil
}

func (m *Slot) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Slot) GetKMACs() [][]byte {
	if m != nil {
		return m.KMACs
	}
	return nil
}

func init() {
	proto.RegisterType((*Ping)(nil), "mixmessages.Ping")
	proto.RegisterType((*TimePing)(nil), "mixmessages.TimePing")
	proto.RegisterType((*ServerMetrics)(nil), "mixmessages.ServerMetrics")
	proto.RegisterType((*RoundInfo)(nil), "mixmessages.RoundInfo")
	proto.RegisterType((*RoundBufferInfo)(nil), "mixmessages.RoundBufferInfo")
	proto.RegisterType((*ClientRequest)(nil), "mixmessages.ClientRequest")
	proto.RegisterType((*IDList)(nil), "mixmessages.IDList")
	proto.RegisterType((*Input)(nil), "mixmessages.Input")
	proto.RegisterType((*Output)(nil), "mixmessages.Output")
	proto.RegisterType((*DSAPublicKey)(nil), "mixmessages.DSAPublicKey")
	proto.RegisterType((*DSASignature)(nil), "mixmessages.DSASignature")
	proto.RegisterType((*UserRegistration)(nil), "mixmessages.UserRegistration")
	proto.RegisterType((*UserRegistrationConfirmation)(nil), "mixmessages.UserRegistrationConfirmation")
	proto.RegisterType((*NonceRequest)(nil), "mixmessages.NonceRequest")
	proto.RegisterType((*Nonce)(nil), "mixmessages.Nonce")
	proto.RegisterType((*RegistrationConfirmation)(nil), "mixmessages.RegistrationConfirmation")
	proto.RegisterType((*Ack)(nil), "mixmessages.Ack")
	proto.RegisterType((*Batch)(nil), "mixmessages.Batch")
	proto.RegisterType((*Slot)(nil), "mixmessages.Slot")
}

func init() { proto.RegisterFile("mixmessages.proto", fileDescriptor_f858aeec3eb2fbf5) }

var fileDescriptor_f858aeec3eb2fbf5 = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0x22, 0xdb, 0x89, 0x4f, 0xec, 0x2c, 0x65, 0xb3, 0x42, 0x73, 0x3a, 0xcc, 0x10, 0xf6,
	0x93, 0x0d, 0x43, 0x80, 0xba, 0x03, 0x5a, 0x74, 0x40, 0x37, 0xc7, 0x6e, 0x5d, 0x23, 0x75, 0xea,
	0x52, 0xc9, 0x45, 0x76, 0xc7, 0xca, 0x27, 0xb1, 0x16, 0x47, 0x72, 0x29, 0xaa, 0xad, 0x7b, 0xbb,
	0x27, 0xd8, 0x3b, 0xec, 0x09, 0xf6, 0x20, 0x7b, 0x80, 0x3d, 0xcd, 0x40, 0x52, 0x72, 0x44, 0x47,
	0x71, 0x8b, 0x0c, 0xe8, 0x1d, 0xbf, 0xf3, 0xc7, 0xf3, 0xc3, 0x73, 0x78, 0xe0, 0xd6, 0x45, 0xf0,
	0xee, 0x02, 0xe3, 0x98, 0x9d, 0x61, 0xbc, 0x37, 0xe5, 0x91, 0x88, 0xc8, 0x46, 0x8e, 0xe4, 0x56,
	0xa0, 0x34, 0x0c, 0xc2, 0x33, 0xb7, 0x09, 0xeb, 0x47, 0xc1, 0x05, 0xca, 0x33, 0xd9, 0x86, 0xb2,
	0x3c, 0xc7, 0x8e, 0xd5, 0xb4, 0x77, 0x6d, 0xaa, 0x81, 0xfb, 0x87, 0x05, 0x75, 0x0f, 0xf9, 0x1b,
	0xe4, 0x03, 0x14, 0x3c, 0xf0, 0x63, 0xd2, 0x80, 0xf5, 0x01, 0x5e, 0x1c, 0x4b, 0x43, 0x4a, 0xb4,
	0x4e, 0xe7, 0x98, 0x34, 0x61, 0xe3, 0x68, 0xcc, 0x91, 0x8d, 0x34, 0x7b, 0x55, 0xb1, 0xf3, 0x24,
	0xa9, 0xdd, 0x99, 0x26, 0x9a, 0x6d, 0x6b, 0xed, 0x0c, 0x13, 0x07, 0xd6, 0x8e, 0xa7, 0x5e, 0x10,
	0xfa, 0xe8, 0x94, 0x94, 0x0f, 0x19, 0x74, 0x77, 0xa0, 0x4a, 0xa3, 0x24, 0x1c, 0xf5, 0xc3, 0xd3,
	0x88, 0x6c, 0xc2, 0x6a, 0xbf, 0xeb, 0x58, 0x4d, 0x6b, 0xb7, 0x44, 0x57, 0xfb, 0x5d, 0xf7, 0x67,
	0xf8, 0x4c, 0x31, 0xf7, 0x93, 0xd3, 0x53, 0xe4, 0x4a, 0x64, 0xd7, 0x20, 0x79, 0xc1, 0x7b, 0x54,
	0xf2, 0x75, 0xba, 0x48, 0x76, 0x07, 0x50, 0xef, 0x4c, 0x02, 0x0c, 0x05, 0xc5, 0xd7, 0x09, 0xc6,
	0x82, 0xdc, 0x81, 0xca, 0x71, 0x8c, 0x3c, 0xbd, 0xa1, 0x46, 0x53, 0x44, 0xbe, 0x86, 0xfa, 0x73,
	0x16, 0x8b, 0x81, 0x4e, 0x61, 0xbf, 0xeb, 0xac, 0x36, 0xad, 0xdd, 0x2a, 0x35, 0x89, 0x6e, 0x03,
	0x2a, 0xfd, 0xee, 0xf3, 0x20, 0x16, 0x64, 0x0b, 0xec, 0x7e, 0x57, 0x27, 0xb3, 0x4a, 0xe5, 0xd1,
	0x7d, 0x00, 0xe5, 0x7e, 0x38, 0x4d, 0x04, 0xd9, 0x93, 0x19, 0xd4, 0x95, 0x50, 0xfc, 0x8d, 0x16,
	0xd9, 0xcb, 0x17, 0x6c, 0x9f, 0x09, 0x7f, 0x4c, 0xe7, 0x32, 0xee, 0x43, 0xa8, 0xbc, 0x48, 0xc4,
	0x4d, 0x34, 0x9f, 0x42, 0xad, 0xeb, 0xb5, 0x87, 0xc9, 0xab, 0x49, 0xe0, 0x1f, 0xe0, 0x8c, 0xd4,
	0xc0, 0x3a, 0x49, 0xe3, 0xb2, 0x4e, 0x24, 0x1a, 0xaa, 0x30, 0x6a, 0xd4, 0x1a, 0x4a, 0xf4, 0xd2,
	0xb1, 0x35, 0x7a, 0x29, 0x51, 0xcf, 0x29, 0x69, 0xd4, 0x73, 0x1f, 0x2b, 0x3b, 0x5e, 0x70, 0x16,
	0x32, 0x91, 0x70, 0x24, 0x04, 0x4a, 0xcf, 0x58, 0x3c, 0x4e, 0x4d, 0xa9, 0xb3, 0xd4, 0xa0, 0x99,
	0x35, 0x2a, 0x91, 0x97, 0x59, 0xf3, 0xdc, 0xd7, 0xb0, 0x25, 0xd3, 0x48, 0xf1, 0x2c, 0x88, 0x05,
	0x67, 0x22, 0x88, 0x42, 0xf2, 0x03, 0x6c, 0xe5, 0x71, 0x27, 0x1a, 0xe9, 0x22, 0x55, 0xe9, 0x15,
	0x3a, 0xb9, 0x07, 0x15, 0x5d, 0x25, 0x75, 0xc1, 0x46, 0xeb, 0x0b, 0x23, 0xea, 0x7c, 0x88, 0x34,
	0x15, 0x94, 0x0f, 0xf7, 0xee, 0xe2, 0x9d, 0x9d, 0x28, 0x3c, 0x0d, 0xf8, 0x85, 0xbe, 0x7f, 0x00,
	0xdb, 0x5a, 0x54, 0x86, 0x85, 0xa3, 0xfd, 0x99, 0x7e, 0xe6, 0xca, 0x87, 0x82, 0x1b, 0xe6, 0xc1,
	0xd3, 0x42, 0x35, 0xd9, 0x3e, 0x4f, 0x38, 0x8f, 0x78, 0xfa, 0x2e, 0x34, 0x70, 0xff, 0xb2, 0xa0,
	0x76, 0x18, 0x85, 0x3e, 0x66, 0xcf, 0x8b, 0x40, 0xc9, 0x63, 0x13, 0x91, 0x65, 0x4e, 0x9e, 0x6f,
	0x10, 0xdd, 0xb5, 0xce, 0xdb, 0x37, 0x72, 0xde, 0xbd, 0x0f, 0x65, 0xe5, 0xa5, 0x8c, 0x42, 0x1d,
	0x52, 0xff, 0x2e, 0xa9, 0x05, 0xb1, 0xfd, 0x6d, 0x81, 0xf3, 0xa9, 0xb2, 0x7b, 0x0f, 0x2a, 0xa9,
	0x81, 0x0f, 0xa7, 0x68, 0xb1, 0x20, 0x76, 0xde, 0xe9, 0x1d, 0xb0, 0xdb, 0xfe, 0xf9, 0x25, 0xd3,
	0xca, 0x33, 0xdf, 0x43, 0x59, 0x75, 0x10, 0xf9, 0x11, 0xca, 0x6a, 0x50, 0xa4, 0xee, 0xde, 0x31,
	0x6e, 0x9b, 0x4f, 0x22, 0xaa, 0x85, 0xe4, 0x4c, 0x7b, 0x1a, 0xf1, 0xe1, 0x98, 0xc5, 0xa8, 0xdc,
	0x2b, 0xd3, 0x39, 0x26, 0xdf, 0x41, 0x39, 0x9e, 0x44, 0x22, 0x56, 0xc3, 0x6e, 0xa3, 0x75, 0xcb,
	0xb0, 0xe4, 0x4d, 0x22, 0x41, 0x35, 0xdf, 0xfd, 0xd7, 0x86, 0x92, 0xc4, 0xa4, 0x05, 0xdb, 0x4f,
	0x42, 0x9f, 0xcf, 0xa6, 0x02, 0x47, 0x69, 0x23, 0x1f, 0xe0, 0x2c, 0x4e, 0x2b, 0x52, 0xc8, 0x23,
	0xbf, 0xc2, 0xce, 0x9c, 0xde, 0x8e, 0xe3, 0xc8, 0x0f, 0x98, 0xc0, 0x51, 0x97, 0x09, 0xa6, 0x54,
	0x75, 0x57, 0x2e, 0x13, 0x21, 0x8f, 0xc0, 0x19, 0x32, 0x2e, 0x02, 0x36, 0x49, 0xed, 0x76, 0x66,
	0xd3, 0x31, 0xf2, 0x23, 0x7c, 0x27, 0xd2, 0x36, 0xbe, 0x96, 0x4f, 0x9e, 0xc1, 0x57, 0x29, 0xcf,
	0x34, 0x9c, 0x33, 0xa1, 0x27, 0xc9, 0x87, 0xc4, 0x64, 0x1c, 0xa9, 0x88, 0xca, 0xac, 0x2e, 0xaa,
	0xe6, 0x1f, 0xe0, 0xcc, 0x29, 0xeb, 0x38, 0x96, 0x88, 0xc8, 0x5a, 0x78, 0x18, 0x8e, 0xd4, 0x00,
	0xaf, 0x28, 0xf1, 0x39, 0x26, 0xdf, 0xc2, 0x66, 0xea, 0xfc, 0x90, 0xcd, 0x26, 0x11, 0x1b, 0x39,
	0x6b, 0x4a, 0x62, 0x81, 0x2a, 0xe5, 0x4c, 0x0f, 0x9d, 0x75, 0x2d, 0x67, 0x52, 0xe7, 0xbd, 0x5c,
	0xcd, 0xf5, 0xf2, 0x36, 0x94, 0x0f, 0x06, 0xed, 0x4e, 0xec, 0x40, 0xd3, 0x96, 0x0d, 0xa4, 0x40,
	0xeb, 0x9f, 0x12, 0x94, 0x0e, 0xe5, 0x20, 0x6b, 0x41, 0xb5, 0x1d, 0x9f, 0xbf, 0x08, 0x27, 0x41,
	0x88, 0xc4, 0x7c, 0x0c, 0xf2, 0x13, 0x6e, 0x6c, 0x19, 0xa4, 0xb6, 0x7f, 0xee, 0xae, 0x90, 0x47,
	0x50, 0x57, 0xa1, 0x0a, 0x1e, 0x4c, 0xd5, 0x4f, 0xfd, 0xb9, 0x21, 0x94, 0x7d, 0xe0, 0x85, 0xba,
	0xfb, 0xb0, 0xd5, 0x43, 0xb1, 0xf0, 0x81, 0x9b, 0x6f, 0x30, 0xcf, 0x2b, 0xb4, 0xf1, 0x10, 0x36,
	0x3b, 0x1c, 0x99, 0xc0, 0x43, 0x7c, 0xab, 0x1f, 0x7c, 0xc1, 0xa7, 0x53, 0xa8, 0xf9, 0x13, 0x80,
	0x27, 0x18, 0x17, 0x45, 0x5a, 0xea, 0x2b, 0x2c, 0xd4, 0x6a, 0xc1, 0x3a, 0x4d, 0x42, 0xdd, 0x3e,
	0x1f, 0x7b, 0x13, 0x05, 0xd2, 0x43, 0xb1, 0xb8, 0x06, 0xdc, 0xbd, 0xda, 0xb7, 0x97, 0xdc, 0xc6,
	0x52, 0xae, 0xbb, 0x42, 0x7e, 0x81, 0x5a, 0x3a, 0xb5, 0xf5, 0x14, 0x34, 0x67, 0x4e, 0x7e, 0xaa,
	0x37, 0xc8, 0x55, 0x96, 0xbb, 0x42, 0x4e, 0xe0, 0x76, 0x3a, 0x13, 0x8d, 0x8f, 0xef, 0xfa, 0xe1,
	0xd7, 0xf8, 0xc6, 0x74, 0xe9, 0x9a, 0xe1, 0xea, 0xae, 0xb4, 0xfe, 0xb4, 0x61, 0xad, 0xc7, 0x04,
	0xbe, 0x65, 0x33, 0xb2, 0x0f, 0xf5, 0xce, 0x18, 0xfd, 0xf3, 0xec, 0xd7, 0x5f, 0x28, 0xb0, 0xb1,
	0xde, 0x34, 0x6e, 0x9b, 0x45, 0x50, 0xbb, 0x8a, 0xbb, 0x42, 0x1e, 0x03, 0xf4, 0x30, 0xdb, 0x63,
	0x96, 0x1a, 0x28, 0xa8, 0x88, 0xae, 0xf4, 0x30, 0x99, 0xeb, 0x7f, 0x6c, 0xd5, 0x1e, 0xc8, 0x0c,
	0xfb, 0x18, 0xbc, 0x41, 0x3d, 0x76, 0x4d, 0xe7, 0xf4, 0xce, 0x53, 0xa8, 0xf8, 0xbf, 0x4b, 0x43,
	0xa1, 0x96, 0x66, 0xb4, 0xc8, 0xc0, 0xcd, 0x6a, 0xf2, 0xbb, 0x74, 0x2a, 0x57, 0xe7, 0xdf, 0x32,
	0x8c, 0x5c, 0x2e, 0x22, 0xe4, 0x4b, 0xc3, 0xd0, 0xe2, 0x6e, 0xd2, 0xf8, 0x7e, 0x29, 0xdb, 0xbc,
	0xeb, 0x55, 0x45, 0x2d, 0xf5, 0xf7, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x8d, 0x46, 0x1e,
	0xe9, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Handles AskOnline
	AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error)
	// GetServerMetrics returns server metrics
	GetServerMetrics(ctx context.Context, in *ServerMetrics, opts ...grpc.CallOption) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// StartRound begins a round with these messages (if len(msgs) == batch size)
	StartRound(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ack, error)
	// RunPhase a cMix phase on another node
	RunPhase(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AskOnline(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/AskOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RoundtripPing(ctx context.Context, in *TimePing, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RoundtripPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetServerMetrics(ctx context.Context, in *ServerMetrics, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetServerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateNewRound(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/CreateNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StartRound(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RunPhase(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RunPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRoundBufferInfo(ctx context.Context, in *RoundBufferInfo, opts ...grpc.CallOption) (*RoundBufferInfo, error) {
	out := new(RoundBufferInfo)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/GetRoundBufferInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ConfirmRegistration(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Node/ConfirmRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Handles AskOnline
	AskOnline(context.Context, *Ping) (*Ack, error)
	// Handles RoundtripPing
	RoundtripPing(context.Context, *TimePing) (*Ack, error)
	// GetServerMetrics returns server metrics
	GetServerMetrics(context.Context, *ServerMetrics) (*Ack, error)
	// CreatesNewRound makes a new round with a certain ID
	CreateNewRound(context.Context, *Batch) (*Ack, error)
	// StartRound begins a round with these messages (if len(msgs) == batch size)
	StartRound(context.Context, *Input) (*Ack, error)
	// RunPhase a cMix phase on another node
	RunPhase(context.Context, *Batch) (*Ack, error)
	// GetRoundBufferInfo returns the # of rounds ready for messages
	GetRoundBufferInfo(context.Context, *RoundBufferInfo) (*RoundBufferInfo, error)
	// RequestNonce generates a nonce for user registration
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmRegistration uses a nonce confirmation to finalize user registration
	ConfirmRegistration(context.Context, *DSASignature) (*RegistrationConfirmation, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AskOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AskOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/AskOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AskOnline(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RoundtripPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RoundtripPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RoundtripPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RoundtripPing(ctx, req.(*TimePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetServerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetServerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetServerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetServerMetrics(ctx, req.(*ServerMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/CreateNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateNewRound(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StartRound(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RunPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RunPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RunPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RunPhase(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRoundBufferInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundBufferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/GetRoundBufferInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRoundBufferInfo(ctx, req.(*RoundBufferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Node/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ConfirmRegistration(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOnline",
			Handler:    _Node_AskOnline_Handler,
		},
		{
			MethodName: "RoundtripPing",
			Handler:    _Node_RoundtripPing_Handler,
		},
		{
			MethodName: "GetServerMetrics",
			Handler:    _Node_GetServerMetrics_Handler,
		},
		{
			MethodName: "CreateNewRound",
			Handler:    _Node_CreateNewRound_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _Node_StartRound_Handler,
		},
		{
			MethodName: "RunPhase",
			Handler:    _Node_RunPhase_Handler,
		},
		{
			MethodName: "GetRoundBufferInfo",
			Handler:    _Node_GetRoundBufferInfo_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Node_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _Node_ConfirmRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Batch, error)
	// PutMessage on the cMix Gateway
	PutMessage(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error)
	// ReceiveBatch of messages from the server
	ReceiveBatch(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CheckMessages(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/CheckMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PutMessage(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ReceiveBatch(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ReceiveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RequestNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/RequestNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ConfirmNonce(ctx context.Context, in *DSASignature, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Gateway/ConfirmNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// Request a list of MessageIDs from the gateway for the given UserID
	CheckMessages(context.Context, *ClientRequest) (*IDList, error)
	// GetMessage a Batch from the gateway for the given message information
	GetMessage(context.Context, *ClientRequest) (*Batch, error)
	// PutMessage on the cMix Gateway
	PutMessage(context.Context, *Batch) (*Ack, error)
	// ReceiveBatch of messages from the server
	ReceiveBatch(context.Context, *Output) (*Ack, error)
	// RequestNonce returns a Nonce to the user
	RequestNonce(context.Context, *NonceRequest) (*Nonce, error)
	// ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
	ConfirmNonce(context.Context, *DSASignature) (*RegistrationConfirmation, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_CheckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CheckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/CheckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CheckMessages(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PutMessage(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ReceiveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ReceiveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ReceiveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ReceiveBatch(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RequestNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RequestNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/RequestNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RequestNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ConfirmNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSASignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ConfirmNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Gateway/ConfirmNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ConfirmNonce(ctx, req.(*DSASignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMessages",
			Handler:    _Gateway_CheckMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Gateway_GetMessage_Handler,
		},
		{
			MethodName: "PutMessage",
			Handler:    _Gateway_PutMessage_Handler,
		},
		{
			MethodName: "ReceiveBatch",
			Handler:    _Gateway_ReceiveBatch_Handler,
		},
		{
			MethodName: "RequestNonce",
			Handler:    _Gateway_RequestNonce_Handler,
		},
		{
			MethodName: "ConfirmNonce",
			Handler:    _Gateway_ConfirmNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Client & RegistrationServer Communication
	RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterUser(ctx context.Context, in *UserRegistration, opts ...grpc.CallOption) (*UserRegistrationConfirmation, error) {
	out := new(UserRegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/mixmessages.Registration/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Client & RegistrationServer Communication
	RegisterUser(context.Context, *UserRegistration) (*UserRegistrationConfirmation, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mixmessages.Registration/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterUser(ctx, req.(*UserRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mixmessages.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Registration_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixmessages.proto",
}
