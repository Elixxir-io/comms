// Copyright Â© 2018 Privategrity Corporation
//
// All rights reserved.


syntax = "proto3";

package mixmessages;

// This service is for servers talking to servers
service MixMessageService {
    // Handles ErrorMessage
    rpc NetworkError (ErrorMessage) returns (ErrorAck) {
    }
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Pong) {
    }
    // Handles Init Round
    rpc NewRound (InitRound) returns (InitRoundAck) {
    }
    // Handles Precomp Decrypt
    rpc PrecompDecrypt (PrecompDecryptMessage) returns (Ack) {
    }
    // Handles Precomp Encrypt
    rpc PrecompEncrypt (PrecompEncryptMessage) returns (Ack) {
    }
    // Handles Precomp Reveal
    rpc PrecompReveal (PrecompRevealMessage) returns (Ack) {
    }
    // Handles Precomp Permute
    rpc PrecompPermute (PrecompPermuteMessage) returns (Ack) {
    }
    // Handles Precomp Share
    rpc PrecompShare (PrecompShareMessage) returns (Ack) {
    }
    // Handles Realtime Decrypt
    rpc RealtimeDecrypt (RealtimeDecryptMessage) returns (Ack) {
    }
    // Handles Realtime Encrypt
    rpc RealtimeEncrypt (RealtimeEncryptMessage) returns (Ack) {
    }
    // Handles Realtime Permute
    rpc RealtimePermute (RealtimePermuteMessage) returns (Ack) {
    }
    // Set the public key
    rpc SetPublicKey (PublicKeyMessage) returns (Ack) {
    }
}

// This service is for servers talking to clients
service ClientService {
    rpc SendMessageToClient(CmixMessage) returns (Ack) {
    }
    rpc ReceiveMessageFromClient(CmixMessage) returns (Ack) {
    }
    rpc PollMessage(RequestMessage) returns (CmixMessage) {
    }
}

// Generic empty Ack message
message Ack {
}

// The request message asking if server is online
message Ping {
}

// The response message containing the online confirmation
message Pong {
}

// The message for Init Round
message InitRound {
}

// The response for Init Round
message InitRoundAck {
}

// The standard CMIX message type
message CmixMessage {
    bytes MessagePayload = 1; // Designed to conform to 4096 bit length
    bytes RecipientID = 2; // Designed to conform to 4096 bit length
}

// The message for requesting new CMIX messages
message RequestMessage {
    fixed64 UserID = 1; // 64 bit length
}

// Message for individual Precomp Decrypt Slot
message PrecompDecryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedRecipientIDKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Decrypt Slots
message PrecompDecryptMessage {
    string RoundID = 1;
    repeated PrecompDecryptSlot Slots = 2;
}

// Message for individual Precomp Encrypt Slot
message PrecompEncryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes PartialMessageCypherText = 3;
}

// Message for batch of Precomp Encrypt Slots
message PrecompEncryptMessage {
    string RoundID = 1;
    repeated PrecompEncryptSlot Slots = 2;
}

// Message for individual Precomp Reveal Slot
message PrecompRevealSlot {
    uint64 Slot = 1;
    bytes PartialMessageCypherText = 2;
    bytes PartialRecipientCypherText = 3;
}

// Message for batch of Precomp Reveal Slots
message PrecompRevealMessage {
    string RoundID = 1;
    repeated PrecompRevealSlot Slots = 2;
}

// Message for individual Precomp Permute Slot
message PrecompPermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedRecipientIDKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Permute Slots
message PrecompPermuteMessage {
    string RoundID = 1;
    repeated PrecompPermuteSlot Slots = 2;
}

// Message for individual Precomp Share Slot
message PrecompShareSlot {
    uint64 Slot = 1;
    bytes PartialRoundPublicCypherKey = 2;
}

// Message for batch of Precomp Share Slots
message PrecompShareMessage {
    string RoundID = 1;
    repeated PrecompShareSlot Slots = 2;
}

// Message for individual Realtime Decrypt Slot
message RealtimeDecryptSlot {
    uint64 Slot = 1;
    uint64 SenderID = 2;
    bytes EncryptedMessage = 3;
    bytes EncryptedRecipientID = 4;
}

// Message for batch of Realtime Decrypt Slots
message RealtimeDecryptMessage {
    string RoundID = 1;
    repeated RealtimeDecryptSlot Slots = 2;
}

// Message for individual Realtime Encrypt Slot
message RealtimeEncryptSlot {
    uint64 Slot = 1;
    uint64 RecipientID = 2;
    bytes EncryptedMessage = 3;
}

// Message for batch of Realtime Encrypt Slots
message RealtimeEncryptMessage {
    string RoundID = 1;
    repeated RealtimeEncryptSlot Slots = 2;
}

// Message for individual Realtime Permute Slot
message RealtimePermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessage = 2;
    bytes EncryptedRecipientID = 3;
}

// Message for batch of Realtime Permute Slots
message RealtimePermuteMessage {
    string RoundID = 1;
    repeated RealtimePermuteSlot Slots = 2;
}

// Message for setting public key
message PublicKeyMessage {
    string RoundID = 1;
    bytes PublicKey = 2;
}

// ErrorMessage encodes an error message
message ErrorMessage {
    string Message = 1;
}

// ErrorAck returns the length of the received messages
message ErrorAck {
    int32 MsgLen = 1;
}
