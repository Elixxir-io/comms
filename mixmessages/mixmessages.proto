////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package mixmessages;

// SERVER MESSAGE SERVICE ------------------------------------------------------

service MixMessageNode {
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Ack) {
    }
    // Handles RoundtripPing
    rpc RoundtripPing (TimePing) returns (Ack) {
    }
    // Handles ServerMetrics
    rpc ServerMetrics (ServerMetricsMessage) returns (Ack) {
    }
    // Handles Init Round
    rpc NewRound (InitRound) returns (Ack) {
    }
    // Handles Precomp Decrypt
    rpc PrecompDecrypt (PrecompDecryptMessage) returns (Ack) {
    }
    // Handles Precomp Encrypt
    rpc PrecompEncrypt (PrecompEncryptMessage) returns (Ack) {
    }
    // Handles Precomp Reveal
    rpc PrecompReveal (PrecompRevealMessage) returns (Ack) {
    }
    // Handles Precomp Permute
    rpc PrecompPermute (PrecompPermuteMessage) returns (Ack) {
    }
    // Handles Precomp Share
    rpc PrecompShare (PrecompShareMessage) returns (Ack) {
    }
    // Handles Precomp Share Initialization
    rpc PrecompShareInit (PrecompShareInitMessage) returns (Ack) {
    }
    // Handles Precomp Share Comparison
    rpc PrecompShareCompare (PrecompShareCompareMessage) returns (Ack) {
    }
    // Handles Precomp Share Confirmation
    rpc PrecompShareConfirm (PrecompShareConfirmMessage) returns (Ack) {
    }
    // Handles Realtime Decrypt
    rpc RealtimeDecrypt (RealtimeDecryptMessage) returns (Ack) {
    }
    // Handles Realtime Encrypt
    rpc RealtimeEncrypt (RealtimeEncryptMessage) returns (Ack) {
    }
    // Handles Realtime Permute
    rpc RealtimePermute (RealtimePermuteMessage) returns (Ack) {
    }
    // Set the public key
    rpc SetPublicKey (PublicKeyMessage) returns (Ack) {
    }
    // Starts a new round with these messages (if len(msgs) == batch size)
    rpc StartRound (InputMessages) returns (Ack) {
    }
    // Handles Registration Nonce Communication
    rpc RequestNonce (RequestNonceMessage) returns (NonceMessage) {
    }
    // Handles Registration Nonce Confirmation
    rpc ConfirmNonce (ConfirmNonceMessage) returns (RegistrationConfirmation) {
    }
}

// The request message asking if server is online
message Ping {
}

// The request message asking server to add their time
message TimePing {
    repeated int64 Times = 1;
}

// The message containing the server metrics from all visited nodes
message ServerMetricsMessage {
    repeated uint32 MemUsage = 1;
    repeated uint32 ThreadUsage = 2;
    repeated uint32 CpuUsage = 3;
    repeated int64 UpSince = 4;
}

// The message for Init Round
message InitRound {
    string RoundID = 1;
}

// GATEWAY MESSAGE SERVICE -----------------------------------------------------

service MixMessageGateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientPollMessage) returns (ClientMessages) {
    }
    // Request a CmixMessage from the gateway for the given message information
    rpc GetMessage (ClientPollMessage) returns (CmixMessage) {
    }
    // Put a message on the cMix Gateway
    rpc PutMessage(CmixMessage) returns (Ack) {
    }
    // Receives a batch of messages from the server
    rpc ReceiveBatch(OutputMessages) returns (Ack) {
    }
}

// The message for clients to poll new CMIX messages
message ClientPollMessage {
    bytes UserID = 1; // 128 bit length
    string MessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message ClientMessages {
    repeated string MessageIDs = 1;
}

// Message for setting public key
message PublicKeyMessage {
    string RoundID = 1;
    bytes PublicKey = 2;
}

// Input messages are a list of messages run as a batch
message InputMessages {
    repeated CmixMessage Messages = 1;
}

// Output messages are a list of messages run as a batch
message OutputMessages {
    repeated CmixMessage Messages = 1;
}

// REGISTRATION MESSAGE SERVICE ------------------------------------------------

service Registration {
    // Client & RegistrationServer Communication
    rpc RegisterUser (RegisterUserMessage) returns (ConfirmRegisterUserMessage) {
    }
}

// Client -> RegistrationServer message to initialize registration process
message RegisterUserMessage {
    string RegistrationCode = 1;
    // Client Public Key
    bytes Y = 2;
    bytes P = 3;
    bytes Q = 4;
    bytes G = 5;
}

// RegistrationServer -> Client response to RegisterUserMessage
message ConfirmRegisterUserMessage {
    // RegistrationServer-Signed Client Public Key
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
    string Error = 4;
}

// Client -> Server message to request nonce
message RequestNonceMessage {
    bytes Salt = 1;
    bytes DiffieKey = 2;
    // Client Public Key
    bytes Y = 3;
    bytes P = 4;
    bytes Q = 5;
    bytes G = 6;
    // RegistrationServer-Signed Client Public Key
    bytes Hash = 7;
    bytes R = 8;
    bytes S = 9;
}

// Server -> Client response to RequestNonceMessage
message NonceMessage {
    bytes Nonce = 1;
    string Error = 2;
}

// Client -> Server message to confirm nonce
message ConfirmNonceMessage {
    // Client-Signed Nonce
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
}

// Server -> Client response to ConfirmNonceMessage
message RegistrationConfirmation {
    // Server-Signed Client Public Key
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
    string Error = 4;
}

// GENERAL USE MESSAGES --------------------------------------------------------

// Generic Ack message containing an Error field
message Ack {
    string Error = 1;
}

// The standard CMIX message type
message CmixMessage {
    bytes SenderID = 1;       // 128 bit Sender Identity
    bytes MessagePayload = 2; // Len(Prime) bit length Encrypted Payload
    // TODO When we increase the size of the prime, the payload and associated
    // data should become part of the
    bytes AssociatedData = 3; // Len(Prime) bit length associated data
    bytes Salt = 4;           // Salt to identify message key
    repeated bytes KMACs = 5; // Individual Key MAC for each node in network
}

// PRECOMPUTATION MESSAGES -----------------------------------------------------

// Message for individual Precomp Decrypt Slot
message PrecompDecryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedAssociatedDataKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialAssociatedDataCypherText = 5;
}

// Message for batch of Precomp Decrypt Slots
message PrecompDecryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompDecryptSlot Slots = 3;
}

// Message for individual Precomp Encrypt Slot
message PrecompEncryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes PartialMessageCypherText = 3;
}

// Message for batch of Precomp Encrypt Slots
message PrecompEncryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompEncryptSlot Slots = 3;
}

// Message for individual Precomp Reveal Slot
message PrecompRevealSlot {
    uint64 Slot = 1;
    bytes PartialMessageCypherText = 2;
    bytes PartialAssociatedDataCypherText = 3;
}

// Message for batch of Precomp Reveal Slots
message PrecompRevealMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompRevealSlot Slots = 3;
}

// Message for individual Precomp Permute Slot
message PrecompPermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedAssociatedDataKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialAssociatedDataCypherText = 5;
}

// Message for batch of Precomp Permute Slots
message PrecompPermuteMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompPermuteSlot Slots = 3;
}

// Message from last node to indicate share phase is beginning
message PrecompShareInitMessage {
    string RoundID = 1;
    uint64 NodeID = 2;
    bytes SignedRoundID = 3;
}

// Message from each node to every other node to compare results of share phase
message PrecompShareCompareMessage {
    bytes RoundCypherKey = 1;
    uint64 NodeID = 2;
    bytes SignedCypherKey = 3;
}

// Message from each node after it has confirmed the round cypher key
message PrecompShareConfirmMessage {
    bytes HashedCypherKey = 1;
    uint64 NodeID = 2;
    bytes ComparisonResult = 3;
    bytes SignedCypherConfirm = 4;
}

// Message for individual Precomp Share Slot
message PrecompShareSlot {
    uint64 Slot = 1;
    bytes PartialRoundPublicCypherKey = 2;
}

// Message for batch of Precomp Share Slots
message PrecompShareMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompShareSlot Slots = 3;
}

// REALTIME MESSAGES -----------------------------------------------------------

// Message for batch of Realtime Decrypt Slots
message RealtimeDecryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated CmixMessage Slots = 3;
}

// Message for batch of Realtime Encrypt Slots
message RealtimeEncryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated CmixMessage Slots = 3;
}

// Message for individual Realtime Permute Slot
message RealtimePermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessage = 2;
    bytes EncryptedAssociatedData = 3;
}

// Message for batch of Realtime Permute Slots
message RealtimePermuteMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated RealtimePermuteSlot Slots = 3;
}
