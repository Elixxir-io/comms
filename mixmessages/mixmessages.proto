// Copyright Â© 2018 Privategrity Corporation
//
// All rights reserved.


syntax = "proto3";

package mixmessages;

// The greeting service definition.
service MixMessageService {
  // Handles an error message
  rpc NetworkError (ErrorMessage) returns (ErrorAck) {}
  // Handles an AskOnline message
  rpc AskOnline (Ping) returns (Pong) {}
  // Handles Precomp Decrypt
  rpc PrecompDecrypt (PrecompDecryptMessage) returns (Ack) {}
  // Handles Precomp Encrypt
  rpc PrecompEncrypt (PrecompEncryptMessage) returns (Ack) {}
  // Handles Precomp Permute
  rpc PrecompPermute (PrecompPermuteMessage) returns (Ack) {}
  // Handles Realtime Decrypt
  rpc RealtimeDecrypt (RealtimeDecryptMessage) returns (Ack) {}
  // Handles Realtime Encrypt
  rpc RealtimeEncrypt (RealtimeEncryptMessage) returns (Ack) {}
}

// Generic empty Ack message
message Ack {}

// The request message asking if server is online
message Ping {}

// The response message containing the online confirmation
message Pong {}

// Message for individual Precomp Decrypt Slot
message PrecompDecryptSlot {
  uint64 Slot = 1;
  bytes EncryptedMessageKeys = 2;
  bytes EncryptedRecipientIDKeys = 3;
  bytes PartialMessageCypherText = 4;
  bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Decrypt Slots
message PrecompDecryptMessage {
  string RoundID = 1;
  repeated PrecompDecryptSlot Slots = 2;
}

// Message for individual Precomp Encrypt Slot
message PrecompEncryptSlot {
  uint64 Slot = 1;
  bytes EncryptedMessageKeys = 2;
  bytes PartialMessageCypherText = 3;
}

// Message for batch of Precomp Encrypt Slots
message PrecompEncryptMessage {
  string RoundID = 1;
  repeated PrecompEncryptSlot Slots = 2;
}

// Message for individual Precomp Permute Slot
message PrecompPermuteSlot {
  uint64 Slot = 1;
  bytes EncryptedMessageKeys = 2;
  bytes EncryptedRecipientIDKeys = 3;
  bytes PartialMessageCypherText = 4;
  bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Permute Slots
message PrecompPermuteMessage {
  string RoundID = 1;
  repeated PrecompPermuteSlot Slots = 2;
}

// Message for individual Realtime Decrypt Slot
message RealtimeDecryptSlot {
  uint64 Slot = 1;
  bytes SenderID = 2;
  bytes EncryptedMessage = 3;
  bytes EncryptedRecipientID = 4;
}

// Message for batch of Realtime Decrypt Slots
message RealtimeDecryptMessage {
  string RoundID = 1;
  repeated RealtimeDecryptSlot Slots = 2;
}

// Message for individual Realtime Encrypt Slot
message RealtimeEncryptSlot {
  uint64 Slot = 1;
  bytes RecipientID = 2;
  bytes EncryptedMessage = 3;
}

// Message for batch of Realtime Encrypt Slots
message RealtimeEncryptMessage {
  string RoundID = 1;
  repeated RealtimeEncryptSlot Slots = 2;
}

// ErrorMessage encodes an error message
message ErrorMessage {
  string Message = 1;
}

// ErrorAck returns the length of the received messages
message ErrorAck {
  int32 MsgLen = 1;
}
