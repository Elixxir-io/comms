////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2019 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package mixmessages;

import "google/protobuf/any.proto";

// SERVER MESSAGE SERVICE ------------------------------------------------------

service Node {
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Ack) {
    }

    // CreatesNewRound makes a new round with a certain ID
    rpc CreateNewRound (RoundInfo) returns (Ack) {
    }

    // PostNewBatch sends a batch to be processed in the server's realtime
    rpc PostNewBatch (Batch) returns (Ack) {
    }

    // FinishRealtime broadcasts when realtime is complete
    rpc FinishRealtime (RoundInfo) returns (Ack) {
    }

    // PostPhase runs a cMix phase on another node
    rpc PostPhase (Batch) returns (Ack) {
    }

    // StreamPostPhase runs a cMix phase on another node
    // by using unary streaming of slots
    rpc StreamPostPhase (stream Slot) returns (Ack) {
    }

    // GetRoundBufferInfo returns the # of rounds ready for messages
    rpc GetRoundBufferInfo (RoundBufferInfo) returns (RoundBufferInfo) {
    }

    // RequestNonce generates a nonce for user registration
    rpc RequestNonce (NonceRequest) returns (Nonce) {
    }

    // ConfirmRegistration uses a nonce confirmation to finalize user registration
    rpc ConfirmRegistration (RSASignature) returns (RegistrationConfirmation) {
    }

    // PostRoundPublicKey sets the public cypher key for a round on other nodes
    rpc PostRoundPublicKey (RoundPublicKey) returns (Ack) {
    }

    // PostPrecompResult finalizes the precomputation results with each node from the last node
    // sending the final Message and AD precomputations
    rpc PostPrecompResult (Batch) returns (Ack) {
    }

    // The gateway calls GetCompletedBatch to get any finished batch from a node
    rpc GetCompletedBatch (Ping) returns (Batch) {
    }

    // Obtains a network topology from the Permissioning Server
    rpc DownloadTopology (SignedMessage) returns (Ack) {
    }

    //
    rpc GetMeasure (RoundInfo) returns (RoundMetrics) {
    }

    // Gateway -> Server polling for CA-signed certificates
    rpc GetSignedCert (Ping) returns (SignedCerts) {
    }
}

// Response to gateway for providing certs signed by the Permissioning CA
message SignedCerts {
    string GatewayCertPEM = 1;
    string ServerCertPEM = 2;
}

// The request message asking if server is online
message Ping {
}

// The message for Init Round
message RoundInfo {
    uint64 ID = 1;
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
message RoundBufferInfo {
    uint32 RoundBufferSize = 1;
}

//
message RoundPublicKey {
    RoundInfo Round = 1;
    bytes Key = 2;
}

// Contains network information about all Nodes
message NodeTopology {
    repeated NodeInfo Topology = 1;
}

// Contains network information about a single Node
message NodeInfo {
    bytes Id = 1;
    uint32 Index = 2;
    string IpAddress = 3;
    string ServerTlsCert = 4;
    string GatewayTlsCert = 5;
}

message RoundMetrics {
    string RoundMetricJSON = 1;
}

// GATEWAY MESSAGE SERVICE -----------------------------------------------------

service Gateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientRequest) returns (IDList) {
    }

    // GetMessage a Batch from the gateway for the given message information
    rpc GetMessage (ClientRequest) returns (Slot) {
    }

    // PutMessage on the cMix Gateway
    rpc PutMessage (Slot) returns (Ack) {
    }

    // RequestNonce returns a Nonce to the user
    rpc RequestNonce (NonceRequest) returns (Nonce) {
    }

    // ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
    rpc ConfirmNonce (RSASignature) returns (RegistrationConfirmation) {
    }
}

// ClientRequest message for clients to poll new CMIX messages
message ClientRequest {
    bytes UserID = 1; // 128 bit length
    string LastMessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message IDList {
    repeated string IDs = 1;
}

// REGISTRATION MESSAGE SERVICE ------------------------------------------------

// Registration service definition
service Registration {
    // Client & RegistrationServer Communication
    rpc RegisterUser (UserRegistration) returns (UserRegistrationConfirmation) {
    }

    //Node registration for the permissioning server
    rpc RegisterNode (NodeRegistration) returns (Ack){
    }
}

// RegisterNode to register a node with needed attributes
message NodeRegistration {
      bytes ID = 1;
      string NodeCsr = 2;
      string GatewayCsr = 3;
      string RegistrationCode = 4;
      string Port = 5;
}

// RSASignature is a digital signature for the RSA algorithm
message RSASignature {
    bytes Signature = 1;
}

// UserRegistration message to initialize registration process
message UserRegistration {
    string RegistrationCode = 1;
    string ClientRSAPubKey = 2;
}

// UserRegistrationConfirmation to confirm registration with users
message UserRegistrationConfirmation {
    // RegistrationServer-Signed Client Public Key
    RSASignature ClientSignedByServer = 1;
    string Error = 2;
}

// NonceRequest message to request nonce from client to server
message NonceRequest {
    bytes Salt = 1;
    string ClientRSAPubKey = 2;
    RSASignature ClientSignedByServer = 3;
    bytes ClientDHPubKey = 4;
    RSASignature RequestSignature = 5;
}

// Nonce message to reply to client from server
message Nonce {
    bytes Nonce = 1;
    string Error = 2;
}

// RegistrationConfirmation returning proof of registration
message RegistrationConfirmation {
    RSASignature ClientSignedByServer = 1;
    string Error = 2;
}

// GENERAL USE MESSAGES --------------------------------------------------------

// Ack generic message containing an Error field
message Ack {
    string Error = 1;
}

message Batch {
    RoundInfo Round = 1;
    int32 FromPhase = 2;
    repeated Slot slots = 3;
}

// Used as part of header for streaming post phase
message BatchInfo {
    RoundInfo Round = 1;
    int32 FromPhase = 2;
    uint32 BatchSize = 3;
}

message Slot {
    // Index in batch this slot belongs in
    uint32 Index = 1;

    // Precomputation fields
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedAssociatedDataKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialAssociatedDataCypherText = 5;
    bytes PartialRoundPublicCypherKey = 6;

    // Realtime/client fields
    bytes SenderID = 7;        // 256 bit Sender Id
    bytes MessagePayload = 8;  // Len(Prime) bit length Encrypted Payload
    bytes AssociatedData = 9;  // Len(Prime) bit length associated data
    bytes Salt = 10;           // Salt to identify message key
    repeated bytes KMACs = 11; // Individual Key MAC for each node in network
}

message SignedMessage {
    bytes Signature = 1;
    string ID = 2;
    google.protobuf.Any Message = 3;
}
