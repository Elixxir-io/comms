////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package mixmessages;

// SERVER MESSAGE SERVICE ------------------------------------------------------

service MixMessageNode {
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Ack) {
    }
    // Handles RoundtripPing
    rpc RoundtripPing (TimePing) returns (Ack) {
    }
    // Handles ServerMetrics
    rpc ServerMetrics (ServerMetricsMessage) returns (Ack) {
    }
    // Creates a new round with a certain ID
    rpc NewRound (CmixMessage) returns (Ack) {
    }
    // Starts a new round with these messages (if len(msgs) == batch size)
    rpc StartRound (InputMessages) returns (Ack) {
    }
    // Runs a cMix phase on another node
    rpc Phase (CmixMessage) returns (Ack) {
    }
    // GetRoundBufferInfo returns the # of rounds ready for messages
    rpc GetRoundBufferInfo (Ping) returns (RoundBufferInfo) {
    }
    // Handles Registration Nonce Communication
    rpc RequestNonce (RequestNonceMessage) returns (NonceMessage) {
    }
    // Handles Registration Nonce Confirmation
    rpc ConfirmNonce (ConfirmNonceMessage) returns (RegistrationConfirmation) {
    }
}

// The request message asking if server is online
message Ping {
}

// The request message asking server to add their time
message TimePing {
    repeated int64 Times = 1;
}

// The message containing the server metrics from all visited nodes
message ServerMetricsMessage {
    repeated uint32 MemUsage = 1;
    repeated uint32 ThreadUsage = 2;
    repeated uint32 CpuUsage = 3;
    repeated int64 UpSince = 4;
}

// The message for Init Round
message RoundIDMessage {
    string RoundID = 1;
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
message RoundBufferInfo {
    uint32 RoundBufferSize = 1;
}

// GATEWAY MESSAGE SERVICE -----------------------------------------------------

service MixMessageGateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientPollMessage) returns (ClientMessages) {
    }
    // Request a CmixMessage from the gateway for the given message information
    rpc GetMessage (ClientPollMessage) returns (CmixMessage) {
    }
    // Put a message on the cMix Gateway
    rpc PutMessage (CmixMessage) returns (Ack) {
    }
    // Receives a batch of messages from the server
    rpc ReceiveBatch (OutputMessages) returns (Ack) {
    }
    // Pass-through for Registration Nonce Communication
    rpc RequestNonce (RequestNonceMessage) returns (NonceMessage) {
    }
    // Pass-through for Registration Nonce Confirmation
    rpc ConfirmNonce (ConfirmNonceMessage) returns (RegistrationConfirmation) {
    }
}

// The message for clients to poll new CMIX messages
message ClientPollMessage {
    bytes UserID = 1; // 128 bit length
    string MessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message ClientMessages {
    repeated string MessageIDs = 1;
}

// Input messages are a list of messages run as a batch
message InputMessages {
    repeated CmixMessage Messages = 1;
}

// Output messages are a list of messages run as a batch
message OutputMessages {
    repeated CmixMessage Messages = 1;
}

// REGISTRATION MESSAGE SERVICE ------------------------------------------------

service Registration {
    // Client & RegistrationServer Communication
    rpc RegisterUser (RegisterUserMessage) returns (ConfirmRegisterUserMessage) {
    }
}

// Client -> RegistrationServer message to initialize registration process
message RegisterUserMessage {
    string RegistrationCode = 1;
    // Client Public Key
    bytes Y = 2;
    bytes P = 3;
    bytes Q = 4;
    bytes G = 5;
}

// RegistrationServer -> Client response to RegisterUserMessage
message ConfirmRegisterUserMessage {
    // RegistrationServer-Signed Client Public Key
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
    string Error = 4;
}

// Client -> Gateway -> Server message to request nonce
message RequestNonceMessage {
    bytes Salt = 1;
    // Client Public Key
    bytes Y = 2;
    bytes P = 3;
    bytes Q = 4;
    bytes G = 5;
    // RegistrationServer-Signed Client Public Key
    bytes Hash = 6;
    bytes R = 7;
    bytes S = 8;
}

// Server -> Gateway -> Client response to RequestNonceMessage
message NonceMessage {
    bytes Nonce = 1;
    string Error = 2;
}

// Client -> Gateway -> Server message to confirm nonce
message ConfirmNonceMessage {
    // Client-Signed Nonce
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
}

// Server -> Gateway -> Client response to ConfirmNonceMessage
message RegistrationConfirmation {
    // Server-Signed Client Public Key
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
    // Server Public Key
    bytes Y = 4;
    bytes P = 5;
    bytes Q = 6;
    bytes G = 7;
    string Error = 8;
}

// GENERAL USE MESSAGES --------------------------------------------------------

// Generic Ack message containing an Error field
message Ack {
    string Error = 1;
}

enum Phase {
    // Off: An Initialized round which hasn't been started by the master yet
    OFF = 0;
    // Precomputation Generation: Initializes all the random values in round
    PRECOMP_GENERATION = 1;
    // Precomputation Share: Combine partial recipient public cypher keys
    PRECOMP_SHARE = 2;
    // Precomputation Share Set: Set public keys at the end of the share phase
    PRECOMP_SHARE_SET = 3;
    // Precomputation Decrypt: Adds in first set of encrypted keys
    PRECOMP_DECRYPT = 4;
    // Precomputation Decrypt: Adds in second set of encrypted keys and permutes
    PRECOMP_PERMUTE = 5;
    // Precomputation Encrypt: Adds in last set of encrypted keys
    PRECOMP_ENCRYPT = 6;
    // Precomputation Reveal: Generates public key to decrypt keys
    PRECOMP_REVEAL = 7;
    // Precomputation Strip: Decrypts the Precomputation
    PRECOMP_STRIP = 8;
    // Precomputation Complete: Precomputation has finished but Realtime hasn't
    //                          started
    PRECOMP_COMPLETE = 9;
    // Realtime Decrypt: Removes Transmission Keys and add first Keys
    REAL_DECRYPT = 10;
    // Realtime Permute: Permutes Slots and add in second keys
    REAL_PERMUTE = 11;
    // Realtime Identify: Uses Precomputation to reveal Recipient, broadcasts
    REAL_IDENTIFY = 12;
    // Realtime Encrypt: Add in Reception Keys and Last Keys
    REAL_ENCRYPT = 13;
    // Realtime Peel: Uses Precomputation to prepare slots for Reception
    REAL_PEEL = 14;
    // Realtime Complete: Round has been completed
    REAL_COMPLETE = 15;
    // Error: A Fatal Error has occurred, cannot continue
    // To kill a round, call Phase() on all other nodes with the round ID and
    // this Phase
    ERROR = 16;
}

message CmixMessage {
    string RoundID = 1;
    Phase ForPhase = 2;
    bytes PublicKey = 3;
    repeated CmixSlot slots = 4;
}

message CmixSlot {
    uint64 SlotID = 1;
    // Precomputation fields
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedAssociatedDataKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialAssociatedDataCypherText = 5;
    bytes PartialRoundPublicCypherKey = 6;
    // Realtime/client fields
    bytes SenderID = 7;        // 256 bit Sender Id
    bytes MessagePayload = 8;  // Len(Prime) bit length Encrypted Payload
    bytes AssociatedData = 9;  // Len(Prime) bit length associated data
    bytes Salt = 10;           // Salt to identify message key
    repeated bytes KMACs = 11; // Individual Key MAC for each node in network
}

