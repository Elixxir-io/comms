// Copyright Â© 2018 Privategrity Corporation
//
// All rights reserved.

syntax = "proto3";

package mixmessages;

// This service is for servers talking to servers
service MixMessageNode {
    // Handles ErrorMessage
    rpc NetworkError (ErrorMessage) returns (ErrorAck) {
    }
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Pong) {
    }
    // Handles RoundtripPing
    rpc RoundtripPing (TimePing) returns (Ack) {
    }
    // Handles ServerMetrics
    rpc ServerMetrics (ServerMetricsMessage) returns (Ack) {
    }
    // Handles Init Round
    rpc NewRound (InitRound) returns (InitRoundAck) {
    }
    // Handles Precomp Decrypt
    rpc PrecompDecrypt (PrecompDecryptMessage) returns (Ack) {
    }
    // Handles Precomp Encrypt
    rpc PrecompEncrypt (PrecompEncryptMessage) returns (Ack) {
    }
    // Handles Precomp Reveal
    rpc PrecompReveal (PrecompRevealMessage) returns (Ack) {
    }
    // Handles Precomp Permute
    rpc PrecompPermute (PrecompPermuteMessage) returns (Ack) {
    }
    // Handles Precomp Share
    rpc PrecompShare (PrecompShareMessage) returns (Ack) {
    }
    // Handles Precomp Share Initialization
    rpc PrecompShareInit (PrecompShareInitMessage) returns (Ack) {
    }
    // Handles Precomp Share Comparison
    rpc PrecompShareCompare (PrecompShareCompareMessage) returns (Ack) {
    }
    // Handles Precomp Share Confirmation
    rpc PrecompShareConfirm (PrecompShareConfirmMessage) returns (Ack) {
    }
    // Handles Realtime Decrypt
    rpc RealtimeDecrypt (RealtimeDecryptMessage) returns (Ack) {
    }
    // Handles Realtime Encrypt
    rpc RealtimeEncrypt (RealtimeEncryptMessage) returns (Ack) {
    }
    // Handles Realtime Permute
    rpc RealtimePermute (RealtimePermuteMessage) returns (Ack) {
    }
    // Set the public key
    rpc SetPublicKey (PublicKeyMessage) returns (Ack) {
    }
    // Send CmixMessage from Client to Server
    rpc ClientSendMessageToServer (CmixMessage) returns (Ack) {
    }
    // Request a CmixMessage from the server for the given User
    rpc ClientPoll (ClientPollMessage) returns (CmixMessage) {
    }
    // Request a list of contacts from the server
    rpc RequestContactList (ContactPoll) returns (ContactMessage) {
    }
    // Set a single user's nick on the server
    rpc SetNick (Contact) returns (Ack) {
    }
    // Broadcasts user information to all other nodes
    rpc UserUpsert (UpsertUserMessage) returns (Ack) {
    }
    // Starts a new round with these messages (if len(msgs) == batch size)
    rpc StartRound(InputMessages) returns (Ack) {
    }
}

// This service is for servers talking to gateway
service MixMessageGateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientPollMessage) returns (ClientMessages) {
    }
    // Request a CmixMessage from the gateway for the given message information
    rpc GetMessage (ClientPollMessage) returns (CmixMessage) {
    }
    // Put a message on the cMix Gateway
    rpc PutMessage(CmixMessage) returns (Ack) {
    }
}

// Generic empty Ack message
message Ack {
}

// The request message asking if server is online
message Ping {
}

// The response message containing the online confirmation
message Pong {
}

// The request message asking server to add their time
message TimePing {
    repeated int64 Times = 1;
}

// The message containing the server metrics from all visited nodes
message ServerMetricsMessage {
    repeated int32 RamUsage = 1;
    repeated int32 MemUsage = 2;
    repeated int32 CpuUsage = 3;
    repeated int64 UpSince = 4;
}

// The message for Init Round
message InitRound {
    string RoundID = 1;
}

// The response for Init Round
message InitRoundAck {
}

// The standard CMIX message type
message CmixMessage {
    fixed64 SenderID = 1; // 64 bit length
    bytes MessagePayload = 2; // Designed to conform to 4096 bit length
    bytes RecipientID = 3; // Designed to conform to 4096 bit length
}

// The message for clients to poll new CMIX messages
message ClientPollMessage {
    fixed64 UserID = 1; // 64 bit length
    string MessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message ClientMessages {
    repeated string MessageIDs = 1;
}

// Message for polling for the contact list
message ContactPoll {
}

// Message for broadcasting user information to all other nodes
message UpsertUserMessage {
    fixed64 NodeID = 1; // 64-bit
    bytes UserID = 2; // 128-bit
    bytes UserPublicKey = 3; // Length of Prime
    bytes Nonce = 4; // 256-bits
    bytes DsaSignature = 5; // 2 x Length of Prime
}

// Message for individual contacts
message Contact {
    uint64 userID = 1;
    string nick = 2;
}

// Message for list of contacts
message ContactMessage {
    repeated Contact Contacts = 1;
}

// Message for individual Precomp Decrypt Slot
message PrecompDecryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedRecipientIDKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Decrypt Slots
message PrecompDecryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompDecryptSlot Slots = 3;
}

// Message for individual Precomp Encrypt Slot
message PrecompEncryptSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes PartialMessageCypherText = 3;
}

// Message for batch of Precomp Encrypt Slots
message PrecompEncryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompEncryptSlot Slots = 3;
}

// Message for individual Precomp Reveal Slot
message PrecompRevealSlot {
    uint64 Slot = 1;
    bytes PartialMessageCypherText = 2;
    bytes PartialRecipientCypherText = 3;
}

// Message for batch of Precomp Reveal Slots
message PrecompRevealMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompRevealSlot Slots = 3;
}

// Message for individual Precomp Permute Slot
message PrecompPermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessageKeys = 2;
    bytes EncryptedRecipientIDKeys = 3;
    bytes PartialMessageCypherText = 4;
    bytes PartialRecipientIDCypherText = 5;
}

// Message for batch of Precomp Permute Slots
message PrecompPermuteMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompPermuteSlot Slots = 3;
}

// Message from last node to indicate share phase is beginning
message PrecompShareInitMessage {
    string RoundID = 1;
    uint64 NodeID = 2;
    bytes SignedRoundID = 3;
}

// Message from each node to every other node to compare results of share phase
message PrecompShareCompareMessage {
    bytes RoundCypherKey = 1;
    uint64 NodeID = 2;
    bytes SignedCypherKey = 3;
}

// Message from each node after it has confirmed the round cypher key
message PrecompShareConfirmMessage {
    bytes HashedCypherKey = 1;
    uint64 NodeID = 2;
    bytes ComparisonResult = 3;
    bytes SignedCypherConfirm = 4;
}

// Message for individual Precomp Share Slot
message PrecompShareSlot {
    uint64 Slot = 1;
    bytes PartialRoundPublicCypherKey = 2;
}

// Message for batch of Precomp Share Slots
message PrecompShareMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated PrecompShareSlot Slots = 3;
}

// Message for individual Realtime Decrypt Slot
message RealtimeDecryptSlot {
    uint64 Slot = 1;
    uint64 SenderID = 2;
    bytes EncryptedMessage = 3;
    bytes EncryptedRecipientID = 4;
}

// Message for batch of Realtime Decrypt Slots
message RealtimeDecryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated RealtimeDecryptSlot Slots = 3;
}

// Message for individual Realtime Encrypt Slot
message RealtimeEncryptSlot {
    uint64 Slot = 1;
    uint64 RecipientID = 2;
    bytes EncryptedMessage = 3;
}

// Message for batch of Realtime Encrypt Slots
message RealtimeEncryptMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated RealtimeEncryptSlot Slots = 3;
}

// Message for individual Realtime Permute Slot
message RealtimePermuteSlot {
    uint64 Slot = 1;
    bytes EncryptedMessage = 2;
    bytes EncryptedRecipientID = 3;
}

// Message for batch of Realtime Permute Slots
message RealtimePermuteMessage {
    string RoundID = 1;
    int32 LastOp = 2;
    repeated RealtimePermuteSlot Slots = 3;
}

// Message for setting public key
message PublicKeyMessage {
    string RoundID = 1;
    bytes PublicKey = 2;
}

// ErrorMessage encodes an error message
message ErrorMessage {
    string Message = 1;
}

// ErrorAck returns the length of the received messages
message ErrorAck {
    int32 MsgLen = 1;
}


// Input messages are a list of messages run as a batch
message InputMessages {
    repeated CmixMessage Messages = 1;
}
