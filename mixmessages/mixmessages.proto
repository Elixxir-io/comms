////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package mixmessages;

// SERVER MESSAGE SERVICE ------------------------------------------------------

service MixNode {
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Ack) {
    }
    // Handles RoundtripPing
    rpc RoundtripPing (TimePing) returns (Ack) {
    }

    // GetServerMetrics returns server metrics
    rpc GetServerMetrics (ServerMetrics) returns (Ack) {
    }

    // CreatesNewRound makes a new round with a certain ID
    rpc CreateNewRound (CmixBatch) returns (Ack) {
    }

    // StartRound begins a round with these messages (if len(msgs) == batch size)
    rpc StartRound (CmixInput) returns (Ack) {
    }

    // RunPhase a cMix phase on another node
    rpc RunPhase (CmixBatch) returns (Ack) {
    }

    // GetRoundBufferInfo returns the # of rounds ready for messages
    rpc GetRoundBufferInfo (RoundBufferInfo) returns (RoundBufferInfo) {
    }

    // RequestNonce generates a nonce for user registration
    rpc RequestNonce (NonceRequest) returns (Nonce) {
    }

    // ConfirmRegistration uses a nonce confirmation to finalize user registration
    rpc ConfirmRegistration (DSASignature) returns (RegistrationConfirmation) {
    }
}

// The request message asking if server is online
message Ping {
}

// The request message asking server to add their time
message TimePing {
    repeated int64 Times = 1;
}

// The message containing the server metrics from all visited nodes
message ServerMetrics {
    repeated uint32 MemUsage = 1;
    repeated uint32 ThreadUsage = 2;
    repeated uint32 CpuUsage = 3;
    repeated int64 UpSince = 4;
}

// The message for Init Round
message RoundInfo {
    uint64 ID = 1;
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
message RoundBufferInfo {
    uint32 RoundBufferSize = 1;
}

// GATEWAY MESSAGE SERVICE -----------------------------------------------------

service MixMessageGateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientRequest) returns (IDList) {
    }

    // GetMessage a CmixBatch from the gateway for the given message information
    rpc GetMessage (ClientRequest) returns (CmixBatch) {
    }

    // PutMessage on the cMix Gateway
    rpc PutMessage (CmixBatch) returns (Ack) {
    }

    // ReceiveBatch of messages from the server
    rpc ReceiveBatch (CmixOutput) returns (Ack) {
    }

    // RequestNonce returns a Nonce to the user
    rpc RequestNonce (NonceRequest) returns (Nonce) {
    }

    // ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
    rpc ConfirmNonce (DSASignature) returns (RegistrationConfirmation) {
    }
}

// ClientRequest message for clients to poll new CMIX messages
message ClientRequest {
    bytes UserID = 1; // 128 bit length
    string LastMessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message IDList {
    repeated string IDs = 1;
}

// Input messages are a list of messages run as a batch
message CmixInput {
    repeated CmixBatch Messages = 1;
}

// Output messages are a list of messages run as a batch
message CmixOutput {
    repeated CmixBatch Messages = 1;
}

// REGISTRATION MESSAGE SERVICE ------------------------------------------------

// Registration service definition
service Registration {
    // Client & RegistrationServer Communication
    rpc RegisterUser (UserRegistration) returns (UserRegistrationConfirmation) {
    }
}

// DSAPublicKey is a public key for the digital signature algorithm
message DSAPublicKey {
    bytes Y = 1;
    bytes P = 2;
    bytes Q = 3;
    bytes G = 4;
}

// DSASignature is a digital signature for the digital signature algorithm
message DSASignature {
    bytes Hash = 1;
    bytes R = 2;
    bytes S = 3;
}

// UserRegistration message to initialize registration process
message UserRegistration {
    string RegistrationCode = 1;
    DSAPublicKey Client = 2;
}

// UserRegistrationConfirmation to confirm registration with users
message UserRegistrationConfirmation {
    // RegistrationServer-Signed Client Public Key
    DSASignature ClientSignedByServer = 1;
    string Error = 2;
}

// Client -> Gateway -> Server message to request nonce
message NonceRequest {
    bytes Salt = 1;
    DSAPublicKey Client = 2;
    DSASignature ClientSignedByServer = 3;
}

// Server -> Gateway -> Client response to RequestNonceMessage
message Nonce {
    bytes Nonce = 1;
    string Error = 2;
}

// Server -> Gateway -> Client response to ConfirmNonceMessage
message RegistrationConfirmation {
    DSASignature ClientSignedByServer = 1;
    DSAPublicKey Server = 2;
    string Error = 3;
}

// GENERAL USE MESSAGES --------------------------------------------------------

// Generic Ack message containing an Error field
message Ack {
    string Error = 1;
}

message CmixBatch {
    RoundInfo Round = 1;
    int32 ForPhase = 2;
    repeated CmixSlot slots = 3;
}

message CmixSlot {
    // Precomputation fields
    bytes EncryptedMessageKeys = 1;
    bytes EncryptedAssociatedDataKeys = 2;
    bytes PartialMessageCypherText = 3;
    bytes PartialAssociatedDataCypherText = 4;
    bytes PartialRoundPublicCypherKey = 5;
    // Realtime/client fields
    bytes SenderID = 6;        // 256 bit Sender Id
    bytes MessagePayload = 7;  // Len(Prime) bit length Encrypted Payload
    bytes AssociatedData = 8;  // Len(Prime) bit length associated data
    bytes Salt = 9;           // Salt to identify message key
    repeated bytes KMACs = 10; // Individual Key MAC for each node in network
}

