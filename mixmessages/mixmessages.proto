////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2019 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package mixmessages;

import "google/protobuf/any.proto";

// SERVER MESSAGE SERVICE ------------------------------------------------------

service Node {
    // Handles AskOnline
    rpc AskOnline (Ping) returns (Ack) {
    }

    // CreatesNewRound makes a new round with a certain ID
    rpc CreateNewRound (AuthenticatedMessage) returns (Ack) {
    }

    // PostNewBatch sends a batch to be processed in the server's realtime
    rpc PostNewBatch (AuthenticatedMessage) returns (Ack) {
    }

    // FinishRealtime broadcasts when realtime is complete
    rpc FinishRealtime (AuthenticatedMessage) returns (Ack) {
    }

    // PostPhase runs a cMix phase on another node
    rpc PostPhase (AuthenticatedMessage) returns (Ack) {
    }

    // StreamPostPhase runs a cMix phase on another node
    // by using unary streaming of slots
    rpc StreamPostPhase (stream Slot) returns (Ack) {
    }

    // GetRoundBufferInfo returns the # of rounds ready for messages
    rpc GetRoundBufferInfo (AuthenticatedMessage) returns (RoundBufferInfo) {
    }

    // RequestNonce generates a nonce for user registration
    rpc RequestNonce (AuthenticatedMessage) returns (Nonce) {
    }

    // ConfirmRegistration uses a nonce confirmation to finalize user registration
    rpc ConfirmRegistration (AuthenticatedMessage) returns (RegistrationConfirmation) {
    }

    // PostRoundPublicKey sets the public cypher key for a round on other nodes
    rpc PostRoundPublicKey (AuthenticatedMessage) returns (Ack) {
    }

    // PostPrecompResult finalizes the precomputation results with each node from the last node
    // sending the final PayloadA and PayloadB precomputations
    rpc PostPrecompResult (AuthenticatedMessage) returns (Ack) {
    }

    // The gateway calls GetCompletedBatch to get any finished batch from a node
    rpc GetCompletedBatch (AuthenticatedMessage) returns (Batch) {
    }

    //
    rpc GetMeasure (AuthenticatedMessage) returns (RoundMetrics) {
    }

    // Gateway -> Server polling for NDF
    rpc PollNdf (AuthenticatedMessage) returns (GatewayNdf) {
    }

    // Round trip ping comm
    rpc SendRoundTripPing (AuthenticatedMessage) returns (Ack) {
    }
}

// The message for Init Round
message RoundInfo {
    uint64 ID = 1;
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
message RoundBufferInfo {
    uint32 RoundBufferSize = 1;
}

//
message RoundPublicKey {
    RoundInfo Round = 1;
    bytes Key = 2;
}

//
message RoundMetrics {
    string RoundMetricJSON = 1;
}

// Contains the complete set of messages/slots for a round
message Batch {
    RoundInfo Round = 1;
    int32 FromPhase = 2;
    repeated Slot slots = 3;
}

// Used as part of header for streaming post phase
message BatchInfo {
    RoundInfo Round = 1;
    int32 FromPhase = 2;
    uint32 BatchSize = 3;
}

// Contains the NDF as well as the corresponding Node ID for the Gateway
message GatewayNdf {
    bytes Id = 1;
    NDF Ndf = 2;
}

// Used for collecting metrics on a round trip of the system
message RoundTripPing {
    google.protobuf.Any Payload = 1;
    RoundInfo Round = 2;
}

// GATEWAY MESSAGE SERVICE -----------------------------------------------------

service Gateway {
    // Request a list of MessageIDs from the gateway for the given UserID
    rpc CheckMessages (ClientRequest) returns (IDList) {
    }

    // GetMessage a Batch from the gateway for the given message information
    rpc GetMessage (ClientRequest) returns (Slot) {
    }

    // PutMessage on the cMix Gateway
    rpc PutMessage (Slot) returns (Ack) {
    }

    // RequestNonce returns a Nonce to the user
    rpc RequestNonce (NonceRequest) returns (Nonce) {
    }

    // ConfirmNonce takes a client signed nonce for Registration Nonce Confirmation
    rpc ConfirmNonce (RequestRegistrationConfirmation) returns (RegistrationConfirmation) {
    }
}

// ClientRequest message for clients to poll new CMIX messages
message ClientRequest {
    bytes UserID = 1; // 128 bit length
    string LastMessageID = 2;
}

// The message for clients to poll the gateway for Message IDs
message IDList {
    repeated string IDs = 1;
}

// Represents a single encrypted message in a batch
message Slot {
    // Index in batch this slot belongs in
    uint32 Index = 1;

    // Precomputation fields
    bytes EncryptedPayloadAKeys = 2;
    bytes EncryptedPayloadBKeys = 3;
    bytes PartialPayloadACypherText = 4;
    bytes PartialPayloadBCypherText = 5;
    bytes PartialRoundPublicCypherKey = 6;

    // Realtime/client fields
    bytes SenderID = 7; // 256 bit Sender Id
    bytes PayloadA = 8; // Len(Prime) bit length payload A (contains part of encrypted payload)
    bytes PayloadB = 9; // Len(Prime) bit length payload B (contains part of encrypted payload, and associated data)
    bytes Salt = 10; // Salt to identify message key
    repeated bytes KMACs = 11; // Individual Key MAC for each node in network
}

// REGISTRATION MESSAGE SERVICE ------------------------------------------------

// Registration service definition
service Registration {
    // Client uses this to register its user with the system
    rpc RegisterUser (UserRegistration) returns (UserRegistrationConfirmation) {
    }

    // Client uses this to check if the version needs to be updated
    rpc GetCurrentClientVersion (Ping) returns (ClientVersion) {
    }

    // Node registration for the permissioning server
    rpc RegisterNode (NodeRegistration) returns (Ack) {
    }

    // Obtain NDF from the Registration Server
    rpc PollNdf (AuthenticatedMessage) returns (NDF) {
    }
}

//The ndf Hash used to compare ndf on permissioning and client
message NDFHash {
    bytes Hash = 1;
}

// Message type containing the network definition file
message NDF {
    bytes Ndf = 1;
}

// RegisterNode to register a node with needed attributes
message NodeRegistration {
      bytes ID = 1;
      string ServerTlsCert = 2;
      string GatewayTlsCert = 3;
      string GatewayAddress = 4;
      string RegistrationCode = 5;
}

// RSASignature is a digital signature for the RSA algorithm
message RSASignature {
    bytes Signature = 1;
}

// UserRegistration message to initialize registration process
message UserRegistration {
    string RegistrationCode = 1;
    string ClientRSAPubKey = 2;
}

// UserRegistrationConfirmation to confirm registration with users
message UserRegistrationConfirmation {
    // RegistrationServer-Signed Client Public Key
    RSASignature ClientSignedByServer = 1;
    string Error = 2;
}

// ClientVersion contains a version string for the client
message ClientVersion {
    string Version = 1;
}

// NonceRequest message to request nonce from client to server
message NonceRequest {
    bytes Salt = 1;
    string ClientRSAPubKey = 2;
    RSASignature ClientSignedByServer = 3;
    bytes ClientDHPubKey = 4;
    RSASignature RequestSignature = 5;
}

// Nonce message to reply to client from server
message Nonce {
    bytes Nonce = 1;
    bytes DHPubKey = 2;
    string Error = 3;
}

// RequestRegistrationConfirmation returning proof of registration
message RequestRegistrationConfirmation {
    bytes userID = 1;
    RSASignature NonceSignedByClient = 2;
    string Error = 3;
}

// RegistrationConfirmation returning proof of registration
message RegistrationConfirmation {
    RSASignature ClientSignedByServer = 1;
    string Error = 2;
}

// GENERAL USE MESSAGES --------------------------------------------------------

// Generic service definition
service Generic {
    // Authenticate a token with the server
    rpc AuthenticateToken (AuthenticatedMessage) returns (Ack) {
    }

    // Request a token from the server
    rpc RequestToken (Ping) returns (AssignToken) {
    }
}

// Generic response message providing an error message from remote servers
message Ack {
    string Error = 1;
}

// Empty message for requesting action from any type of server
message Ping {
}

// Wrapper for authenticated messages that also ensure integrity
message AuthenticatedMessage {
    string ID = 1;
    bytes Signature = 2;
    bytes Token = 3;
    string PublicKey = 4;
    google.protobuf.Any Message = 5;
}

// Provides a token to establish reverse identity to any type of client
message AssignToken {
    bytes Token = 1;
}

// NOTIFICATION BOT MESSAGES --------------------------------------------------------

// NotificationBot service definition
service NotificationBot {
    // Unregister clients from push notifications
    rpc UnregisterForNotifications(AuthenticatedMessage) returns (Ack) {
    }

    // Register clients from push notifications
    rpc RegisterForNotifications (AuthenticatedMessage) returns (Ack) {
    }
}

// Registration token to be associated with the client
message NotificationToken {
    bytes Token = 1;
}
